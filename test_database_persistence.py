#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import sys
from database import AnalyticsDB

def test_database_persistence():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    test_db_path = "test_bot_analytics.db"
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(test_db_path):
        os.remove(test_db_path)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = AnalyticsDB(test_db_path)
        
        test_user_id = 12345
        
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {test_user_id}")
        
        # 1. –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        limits = db.get_user_limits(test_user_id)
        print(f"   –õ–∏–º–∏—Ç—ã: {limits}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ù–ï —Å–æ–∑–¥–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        import sqlite3
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_limits WHERE user_id = ?", (test_user_id,))
            count = cursor.fetchone()[0]
            print(f"   –ó–∞–ø–∏—Å–µ–π –≤ user_limits: {count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0)")
            
        if count == 0:
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù: –ó–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            return False
        
        # 2. –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        credits = db.get_user_credits(test_user_id)
        print(f"   –ö—Ä–µ–¥–∏—Ç—ã: {credits}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ù–ï —Å–æ–∑–¥–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_credits WHERE user_id = ?", (test_user_id,))
            count = cursor.fetchone()[0]
            print(f"   –ó–∞–ø–∏—Å–µ–π –≤ user_credits: {count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0)")
            
        if count == 0:
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù: –ó–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            return False
        
        # 3. –¢–µ—Å—Ç: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        result = db.increment_free_generations(test_user_id)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        import time
        time.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_limits WHERE user_id = ?", (test_user_id,))
            count = cursor.fetchone()[0]
            print(f"   –ó–∞–ø–∏—Å–µ–π –≤ user_limits: {count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)")
            
        if count == 1:
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù: –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!")
            return False
        
        # 4. –¢–µ—Å—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤...")
        result = db.add_credits(test_user_id, 100, description="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        time.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_credits WHERE user_id = ?", (test_user_id,))
            count = cursor.fetchone()[0]
            print(f"   –ó–∞–ø–∏—Å–µ–π –≤ user_credits: {count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)")
            
        if count == 1:
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù: –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return False
        
        # 5. –¢–µ—Å—Ç: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤...")
        result = db.use_credits(test_user_id, 10, description="–¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        credits = db.get_user_credits(test_user_id)
        print(f"   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {credits['balance']} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 90)")
        
        if credits['balance'] == 90:
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù: –ö—Ä–µ–¥–∏—Ç—ã —Å–ø–∏—Å–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ö—Ä–µ–¥–∏—Ç—ã —Å–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            return False
        
        # 6. –¢–µ—Å—Ç: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
        db2 = AnalyticsDB(test_db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        limits2 = db2.get_user_limits(test_user_id)
        credits2 = db2.get_user_credits(test_user_id)
        
        print(f"   –õ–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {limits2}")
        print(f"   –ö—Ä–µ–¥–∏—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {credits2}")
        
        if (limits2['free_generations_used'] == 1 and 
            limits2['total_free_generations'] == 3 and
            credits2['balance'] == 90):
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   –¢–µ–ø–µ—Ä—å –∫—Ä–µ–¥–∏—Ç—ã –∏ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í–û –í–†–ï–ú–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        return False
        
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
            print(f"\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {test_db_path} —É–¥–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    success = test_database_persistence()
    sys.exit(0 if success else 1)
