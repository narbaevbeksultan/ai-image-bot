#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Railway –¥–µ–ø–ª–æ—è
"""

import os
import sys
import subprocess
from datetime import datetime

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        
        if result.stdout.strip():
            print("üìù –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout)
            return False
        else:
            print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
            return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_last_commit():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç"""
    try:
        result = subprocess.run(['git', 'log', '-1', '--oneline'], 
                              capture_output=True, text=True, check=True)
        print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞: {e}")
        return False

def check_remote_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    try:
        result = subprocess.run(['git', 'status', '-uno'], 
                              capture_output=True, text=True, check=True)
        
        if "Your branch is up to date" in result.stdout:
            print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å GitHub")
            return True
        elif "Your branch is ahead" in result.stdout:
            print("‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ –æ–ø–µ—Ä–µ–∂–∞–µ—Ç GitHub")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: git push origin main")
            return False
        else:
            print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å Git")
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists("bot_analytics.db"):
        size = os.path.getsize("bot_analytics.db")
        size_mb = size / (1024 * 1024)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {size_mb:.2f} MB")
        return True
    else:
        print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def check_backups():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    if os.path.exists("backups"):
        backup_files = [f for f in os.listdir("backups") if f.endswith(".db")]
        if backup_files:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backup_files)}")
            return True
        else:
            print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ backups –ø—É—Å—Ç–∞")
            return False
    else:
        print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Railway –¥–µ–ø–ª–æ—è")
    print("=" * 50)
    
    all_good = True
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Å—Ç–∞—Ç—É—Å
    print("\n1Ô∏è‚É£ Git —Å—Ç–∞—Ç—É—Å:")
    if not check_git_status():
        all_good = False
    
    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    print("\n2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:")
    check_last_commit()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å GitHub
    print("\n3Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub:")
    if not check_remote_status():
        all_good = False
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
    check_database()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    print("\n5Ô∏è‚É£ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
    check_backups()
    
    # –ò—Ç–æ–≥
    print("\n" + "=" * 50)
    if all_good:
        print("üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –¥–µ–ø–ª–æ—è!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python railway_deploy.py")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ GitHub")
    
    return all_good

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
