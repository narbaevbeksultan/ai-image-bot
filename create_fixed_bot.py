#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é bot.py —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

def create_fixed_bot():
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é bot.py"""
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open('bot.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —Ü–∏–∫–ª–æ–º for idx, prompt in enumerate(safe_prompts, 1):
    # –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–µ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    
    new_lines = []
    i = 0
    
    while i < len(lines):
        line = lines[i]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–∏–∫–ª–æ–º
        if 'for idx, prompt in enumerate(safe_prompts, 1):' in line:
            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—Ç—É–ø
            indent = len(line) - len(line.lstrip())
            
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            new_lines.append(' ' * indent + '# –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô\n')
            new_lines.append(' ' * indent + '# –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n')
            new_lines.append(' ' * indent + 'tasks = []\n')
            new_lines.append(' ' * indent + 'for idx, prompt in enumerate(safe_prompts, 1):\n')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ break
            i += 1
            while i < len(lines) and 'break' not in lines[i]:
                i += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ break
            new_lines.append(' ' * indent + '    if idx > max_scenes:\n')
            new_lines.append(' ' * indent + '        break\n')
            new_lines.append(' ' * indent + '    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n')
            new_lines.append(' ' * indent + '    task = generate_single_image_async(idx, prompt, state, send_text)\n')
            new_lines.append(' ' * indent + '    tasks.append(task)\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n')
            new_lines.append(' ' * indent + 'if tasks:\n')
            new_lines.append(' ' * indent + '    if send_text:\n')
            new_lines.append(' ' * indent + '        await send_text(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(tasks)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á\n')
            new_lines.append(' ' * indent + '    results = await asyncio.gather(*tasks, return_exceptions=True)\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n')
            new_lines.append(' ' * indent + '    for result in results:\n')
            new_lines.append(' ' * indent + '        if isinstance(result, Exception):\n')
            new_lines.append(' ' * indent + '            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result}")\n')
            new_lines.append(' ' * indent + '            if send_text:\n')
            new_lines.append(' ' * indent + '                await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result}")\n')
            new_lines.append(' ' * indent + '            continue\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '        idx, success, image_url, caption, error = result\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '        if success and image_url:\n')
            new_lines.append(' ' * indent + '            # –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n')
            new_lines.append(' ' * indent + '            images.append(image_url)\n')
            new_lines.append(' ' * indent + '            media.append(InputMediaPhoto(media=image_url, caption=caption))\n')
            new_lines.append(' ' * indent + '            processed_count += 1\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '            print(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx}:")\n')
            new_lines.append(' ' * indent + '            print(f"   image_url: {image_url}")\n')
            new_lines.append(' ' * indent + '            print(f"   –¥–ª–∏–Ω–∞ image_url: {len(str(image_url)) if image_url else \'None\'}")\n')
            new_lines.append(' ' * indent + '            print(f"   –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç media: {media[-1].media}")\n')
            new_lines.append(' ' * indent + '            print(f"   –¥–ª–∏–Ω–∞ media[-1].media: {len(str(media[-1].media)) if media[-1].media else \'None\'}")\n')
            new_lines.append(' ' * indent + '        else:\n')
            new_lines.append(' ' * indent + '            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n')
            new_lines.append(' ' * indent + '            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {error}")\n')
            new_lines.append(' ' * indent + '            if send_text:\n')
            new_lines.append(' ' * indent + '                await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {error}")\n')
            new_lines.append('\n')
            new_lines.append(' ' * indent + '# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ - –æ–Ω –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –≤—ã—à–µ\n')
            new_lines.append(' ' * indent + '# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–æ if media and send_media:
            while i < len(lines) and 'if media and send_media:' not in lines[i]:
                i += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É if media and send_media:
            if i < len(lines):
                new_lines.append(lines[i])
                i += 1
            
        else:
            new_lines.append(line)
            i += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('bot_fixed.py', 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª bot_fixed.py")
    print("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    print("   - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è generate_single_image_async()")
    print("   - –ó–∞–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è asyncio.gather() –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("   - –¢–µ–ø–µ—Ä—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")

if __name__ == "__main__":
    create_fixed_bot()
