import logging
import asyncio
import concurrent.futures
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests
import aiohttp

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db
from betatransfer_api import BetatransferAPI

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
THREAD_POOL = concurrent.futures.ThreadPoolExecutor(max_workers=10)

# –°–æ–∑–¥–∞–µ–º –ø—É–ª HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è aiohttp
HTTP_SESSION = None

# Flask –¥–ª—è callback —Å–µ—Ä–≤–µ—Ä–∞
from flask import Flask, request, jsonify
from betatransfer_api import betatransfer_api

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def init_http_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP —Å–µ—Å—Å–∏—é –¥–ª—è aiohttp"""
    global HTTP_SESSION
    if HTTP_SESSION is None:
        connector = aiohttp.TCPConnector(limit=100, limit_per_host=30)
        timeout = aiohttp.ClientTimeout(total=300)
        HTTP_SESSION = aiohttp.ClientSession(connector=connector, timeout=timeout)
    return HTTP_SESSION

async def close_http_session():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é"""
    global HTTP_SESSION
    if HTTP_SESSION:
        await HTTP_SESSION.close()
        HTTP_SESSION = None

async def replicate_run_async(model: str, input_params: Dict[str, Any], timeout: int = 300) -> Any:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è replicate.run
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
    """
    try:
        loop = asyncio.get_event_loop()
        result = await asyncio.wait_for(
            loop.run_in_executor(
                THREAD_POOL,
                lambda: replicate.run(model, input=input_params)
            ),
            timeout=timeout
        )
        return result
    except asyncio.TimeoutError:
        logging.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ replicate.run –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ replicate.run –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
        raise

async def openai_chat_completion_async(messages: list, model: str = "gpt-4o-mini", max_tokens: int = 800, temperature: float = 0.7) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è OpenAI chat completion
    """
    try:
        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        loop = asyncio.get_event_loop()
        response = await asyncio.wait_for(
            loop.run_in_executor(
                THREAD_POOL,
                lambda: client.chat.completions.create(
                    model=model,
                    messages=messages,
                    max_tokens=max_tokens,
                    temperature=temperature,
                )
            ),
            timeout=30.0
        )
        return response.choices[0].message.content.strip()
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ OpenAI chat completion")
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ OpenAI chat completion: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_pending_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∑–∞—á–∏—Å–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        pending_payments = analytics_db.get_pending_payments()
        
        if not pending_payments:
            return
        
        logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(pending_payments)} pending –ø–ª–∞—Ç–µ–∂–µ–π")
        
        for payment in pending_payments:
            payment_id = payment.get('betatransfer_id')
            user_id = payment.get('user_id')
            order_id = payment.get('order_id')
            
            if not payment_id:
                continue
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Betatransfer API
                status_result = betatransfer_api.get_payment_status(payment_id)
                
                if 'error' in status_result:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status_result['error']}")
                    continue
                
                payment_status = status_result.get('status')
                logging.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {payment_status}")
                
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                if payment_status == 'success':
                    credit_amount = payment.get('credit_amount')
                    
                    if credit_amount and credit_amount > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
                        # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —ç—Ç–∏–º payment_id
                        existing_transaction = analytics_db.get_credit_transaction_by_payment_id(payment_id)
                        
                        if not existing_transaction:
                            # –ö—Ä–µ–¥–∏—Ç—ã –µ—â–µ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã, –∑–∞—á–∏—Å–ª—è–µ–º
                            analytics_db.add_credits(user_id, credit_amount)
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–ª–∞—Ç–µ–∂—É
                            analytics_db.create_credit_transaction_with_payment(user_id, credit_amount, f"–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø–ª–∞—Ç–µ–∂ {payment_id})", payment_id)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                            analytics_db.update_payment_status(payment_id, 'success')
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            notification_message = (
                                f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"
                                f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ:** {credit_amount:,} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                                f"üí∞ **–°—É–º–º–∞:** {payment.get('amount')} {payment.get('currency', 'RUB')}\n"
                                f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
                            )
                            
                            await send_telegram_notification(user_id, notification_message)
                            logging.info(f"–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount}")
                        else:
                            # –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                            analytics_db.update_payment_status(payment_id, 'success')
                            logging.info(f"–ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ –ø–ª–∞—Ç–µ–∂ {payment_id}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å")
                
                elif payment_status == 'failed':
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    analytics_db.update_payment_status(payment_id, 'failed')
                    logging.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                continue
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def start_payment_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            await check_pending_payments()
            # –ñ–¥–µ–º 45 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(45)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ payment polling: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(15)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è callback
flask_app = Flask(__name__)

async def send_telegram_notification(user_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logging.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        loop = asyncio.get_event_loop()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
        session = await init_http_session()
        async with session.post(url, data=data) as response:
            if response.status == 200:
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            else:
                response_text = await response.text()
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status} - {response_text}")
                return False
        
        if response.status_code == 200:
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

@flask_app.route('/payment/ca', methods=['POST'])
async def payment_callback():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Betatransfer
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback (—Ñ–æ—Ä–º–∞—Ç: application/x-www-form-urlencoded)
        callback_data = request.form.to_dict()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
        
        if not callback_data:
            logging.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
            return jsonify({"error": "Empty callback data"}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ API
        result = betatransfer_api.process_callback(callback_data)
        
        if result.get("status") == "error":
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {result.get('error')}")
            return jsonify({"error": result.get("error")}), 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = result.get("payment_info", {})
        payment_id = payment_info.get("payment_id")
        status = payment_info.get("status")
        amount = payment_info.get("amount")
        order_id = payment_info.get("order_id")
        currency = payment_info.get("currency", "RUB")
        
        logging.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        if status == "completed":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã
            payment_record = analytics_db.get_payment_by_order_id(order_id)
            if payment_record:
                user_id = payment_record.get("user_id")
                credit_amount = payment_record.get("credit_amount")
                
                # –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                analytics_db.add_credits(user_id, credit_amount)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                analytics_db.update_payment_status(payment_id, "completed")
                
                logging.info(f"–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                notification_message = (
                    f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"
                    f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ:** {credit_amount:,} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    f"üí∞ **–°—É–º–º–∞:** {amount} {currency}\n"
                    f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                notification_sent = await send_telegram_notification(user_id, notification_message)
                if notification_sent:
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logging.error(f"–ü–ª–∞—Ç–µ–∂ —Å order_id {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Betatransfer)
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@flask_app.route('/payment/su', methods=['GET'])
def payment_success():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return jsonify({
        "status": "success",
        "message": "Payment completed successfully"
    })

@flask_app.route('/payment/fai', methods=['GET'])
def payment_fail():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return jsonify({
        "status": "failed",
        "message": "Payment failed"
    })

@flask_app.route('/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({"status": "healthy"})

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATE = {}

# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
STEP_FORMAT = 'format'
STEP_STYLE = 'style'
STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
STEP_IMAGE_COUNT = 'image_count'
STEP_IMAGE_MODEL = 'image_model'
STEP_IMAGE_GENERATION = 'image_generation'
STEP_IMAGE_EDIT = 'image_edit'
STEP_VIDEO_QUALITY = 'video_quality'
STEP_VIDEO_DURATION = 'video_duration'
STEP_VIDEO_GENERATION = 'video_generation'
STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç
STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞

FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']

# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
IMAGE_GEN_STYLES = [
    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',
    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',
    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',
    '–ê–∫–≤–∞—Ä–µ–ª—å',
    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',
    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'
]

# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_GEN_MODELS = [
    'Ideogram',
    'Bytedance (Seedream-3)',
    'Google Imagen 4 Ultra',
    'Luma Photon',
    'Bria 3.2',
    'Recraft AI'
]

# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
VIDEO_GEN_MODELS = [
    'Bytedance Seedance 1.0 Pro'
]

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)
MODEL_DESCRIPTIONS = {
    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',
    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',
    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',
    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'
}

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ
VIDEO_MODEL_DESCRIPTIONS = {
            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'
}

def get_image_size_for_format(format_type, simple_orientation=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower().replace(' ', '')
    
    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    elif format_type == 'instagrampost':
        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤
        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        if simple_orientation == 'vertical':
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif simple_orientation == 'square':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return "1024x1024"
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return "1024x1024"

def get_replicate_size_for_format(format_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower().replace(' ', '')
    
    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    elif format_type == 'instagrampost':
        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    else:
        return "1024x1024"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

def get_replicate_size_for_model(model_name, format_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate"""
    # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    if 'ideogram' in model_name.lower():
        return get_replicate_size_for_format(format_type)
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    return get_replicate_size_for_format(format_type)

def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate"""
    size = get_replicate_size_for_model(model_name, format_type)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        'width': int(size.split('x')[0]),
        'height': int(size.split('x')[1])
    }
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if 'ideogram' in model_name.lower():
        params.update({
            'style': 'auto',
            'aspect_ratio': f"{params['width']}:{params['height']}"
        })
    elif 'bytedance' in model_name.lower():
        params.update({
            'style': 'realistic',
            'quality': 'high'
        })
    elif 'imagen' in model_name.lower():
        params.update({
            'style': 'photorealistic',
            'safety_filter': 'moderate'
        })
    
    return params

def get_format_tips(format_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"""
    tips = {
        'instagram reels': "üé¨ –î–ª—è Reels: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ —Å—Ü–µ–Ω—ã",
        'tiktok': "üéµ –î–ª—è TikTok: –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–ª–∏–ø—ã, —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å—Ç–∏–ª—å",
        'youtube shorts': "üì∫ –î–ª—è Shorts: –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —á–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
        'instagram post': "üì∏ –î–ª—è –ø–æ—Å—Ç–æ–≤: –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ö–µ—à—Ç–µ–≥–∏",
        'instagram stories': "üì± –î–ª—è Stories: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': "üñºÔ∏è –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å—Ç–∏–ª—å"
    }
    
    return tips.get(format_type.lower(), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

def is_prompt_safe(prompt):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞"""
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑
    forbidden_words = [
        'nude', 'naked', 'sex', 'porn', 'nsfw', 'adult', 'explicit',
        'violence', 'blood', 'gore', 'weapon', 'gun', 'knife',
        'hate', 'racism', 'discrimination', 'offensive'
    ]
    
    prompt_lower = prompt.lower()
    for word in forbidden_words:
        if word in prompt_lower:
            return False
    
    return True

def improve_prompt_for_ideogram(prompt):
    """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Ideogram"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    improvements = [
        "high quality",
        "detailed",
        "professional",
        "sharp focus",
        "vibrant colors"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∏ —Å–ª–æ–≤–∞
    prompt_lower = prompt.lower()
    for improvement in improvements:
        if improvement not in prompt_lower:
            prompt += f", {improvement}"
    
    return prompt

def enhance_prompts_with_character_context(prompts, topic):
    """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    enhanced_prompts = []
    
    for prompt in prompts:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã
        enhanced_prompt = f"{prompt}, {topic} theme, character-focused"
        enhanced_prompts.append(enhanced_prompt)
    
    return enhanced_prompts

# ============================================================================
# ASYNC HANDLERS - –¢–û–õ–¨–ö–û –ü–ï–†–í–´–ï –í–ï–†–°–ò–ò (–ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í)
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    analytics_db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    analytics_db.update_user_activity(user.id)
    analytics_db.log_action(user.id, "start_command")
    
    welcome_text = """
üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.

üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å
‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],
        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],
        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],
        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    limits = analytics_db.get_user_limits(user_id)
    credits = analytics_db.get_user_credits(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    free_generations_left = analytics_db.get_free_generations_left(user_id)
    
    status_text = ""
    if free_generations_left > 0:
        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"
    else:
        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
    if credits['balance'] > 0:
        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
    else:
        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],
        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],
        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],
        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        [InlineKeyboardButton("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram", callback_data="ideogram_tips")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    
    await update.callback_query.edit_message_text(
        f"üé® AI Image Generator\n\n{status_text}"
        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"
        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (3 —Ä–∞–∑–∞)\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (3 —Ä–∞–∑–∞)\n\n"
        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"
        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:
   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram
   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok
   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube
   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram
   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram
   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç

3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)
   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)
   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)

4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:
   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"

5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ

üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞

üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç
‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    about_text = """
‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:

ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤

üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:
‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)
‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)
‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)

üì± –§–æ—Ä–º–∞—Ç—ã:
‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)
‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã

üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        about_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    user_id = update.effective_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATE[user_id] = {'step': 'format_selection'}
    
    format_text = """
üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**

üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
üé¨ **–í–∏–¥–µ–æ** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üí° **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —ç—Ç–æ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!

üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ 3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
    
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="format:—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ (—Å–∫–æ—Ä–æ)", callback_data="video_generation")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        format_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    keyboard = [
        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],
        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],
        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],
        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],
        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],
        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:
   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram
   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok
   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube
   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram
   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram
   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç

3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)
   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)
   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)

4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:
   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"

5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ

üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞

üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç
‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    analytics_db.update_user_activity(user_id)
    analytics_db.log_action(user_id, "stats_command")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = analytics_db.get_user_stats(user_id)
    
    if not user_stats:
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}
‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}
‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}

üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
    if user_stats['models_stats']:
        for model, count, avg_time, successful in user_stats['models_stats'][:5]:
            success_rate = (successful / count * 100) if count > 0 else 0
            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"
            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"
    else:
        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
    if user_stats['formats_stats']:
        for format_type, count in user_stats['formats_stats'][:5]:
            stats_text += f"‚Ä¢ {format_type}: {count}\n"
    else:
        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def credits_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    try:
        stats = analytics_db.get_total_credits_statistics()
        stats_text = f"""ü™ô **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–†–ï–î–ò–¢–û–í –ë–û–¢–ê**
üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏: {stats['total_users']}
‚Ä¢ ü™ô –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_purchased']:,}
‚Ä¢ üí∏ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_used']:,}
‚Ä¢ üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_balance']:,}
üí° **–î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø REPLICATE/OPENAI:**
üî• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: **{stats['total_purchased']:,}**
üí∞ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å—É–º–º—É: **—Å–æ–º{stats['completed_revenue']:,.2f}**"""
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]
    
    if user_id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    analytics_db.update_user_activity(user_id)
    analytics_db.log_action(user_id, "admin_stats_command")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    global_stats = analytics_db.get_global_stats()
    
    if not global_stats:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""
üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {global_stats['active_24h']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: {global_stats['active_7d']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30–¥: {global_stats['active_30d']}

üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {global_stats['successful_generations']}
‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(global_stats['successful_generations'] / global_stats['total_generations'] * 100):.1f}%

üìà **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
    if global_stats['top_models']:
        for model, count in global_stats['top_models'][:5]:
            stats_text += f"‚Ä¢ {model}: {count}\n"
    else:
        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
    if global_stats['top_formats']:
        for format_type, count in global_stats['top_formats'][:5]:
            stats_text += f"‚Ä¢ {format_type}: {count}\n"
    else:
        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ============================================================================
# PLACEHOLDER FUNCTIONS - –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ Ideogram"""
    await update.message.reply_text("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Replicate"""
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Replicate –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç Ideogram"""
    await update.message.reply_text("üß™ –¢–µ—Å—Ç Ideogram –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    await update.message.reply_text("üì§ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    await update.message.reply_text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

async def add_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id not in [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip()]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_credits <user_id> <amount>\n"
            "–ü—Ä–∏–º–µ—Ä: /add_credits 123456789 1000"
        )
        return
    
    try:
        target_user_id = int(args[0])
        credits_amount = int(args[1])
        
        if credits_amount <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = analytics_db.add_user_credits(target_user_id, credits_amount, "admin_add")
        
        if success:
            await update.message.reply_text(
                f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{target_user_id}`\n"
                f"ü™ô –î–æ–±–∞–≤–ª–µ–Ω–æ: **{credits_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n"
                f"üìÖ –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.")

async def check_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id not in [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip()]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if len(args) < 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_credits <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /check_credits 123456789"
        )
        return
    
    try:
        target_user_id = int(args[0])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_credits = analytics_db.get_user_credits(target_user_id)
        
        if user_credits:
            await update.message.reply_text(
                f"ü™ô **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                f"üë§ ID: `{target_user_id}`\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{user_credits['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n"
                f"üõí –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: **{user_credits['total_purchased']} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n"
                f"üí∏ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: **{user_credits['total_used']} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_credits['updated_at'][:19]}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def set_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id not in [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip()]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_credits <user_id> <amount>\n"
            "–ü—Ä–∏–º–µ—Ä: /set_credits 123456789 1000"
        )
        return
    
    try:
        target_user_id = int(args[0])
        credits_amount = int(args[1])
        
        if credits_amount < 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = analytics_db.set_user_credits(target_user_id, credits_amount, "admin_set")
        
        if success:
            await update.message.reply_text(
                f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{target_user_id}`\n"
                f"ü™ô –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{credits_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n"
                f"üìÖ –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    state = USER_STATE.get(user_id, {})
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data == "user_stats":
        analytics_db.update_user_activity(user_id)
        analytics_db.log_action(user_id, "view_stats_button")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = analytics_db.get_user_stats(user_id)
        
        if not user_stats:
            await query.edit_message_text(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}
‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}
‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}

üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
        if user_stats['models_stats']:
            for model, count, avg_time, successful in user_stats['models_stats'][:5]:
                success_rate = (successful / count * 100) if count > 0 else 0
                avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"
                stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"
        else:
            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
        if user_stats['formats_stats']:
            for format_type, count in user_stats['formats_stats'][:5]:
                stats_text += f"‚Ä¢ {format_type}: {count}\n"
        else:
            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        keyboard = [
            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ Ideogram
    elif data == "ideogram_tips":
        tips_text = """
üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**

## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö

## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:

### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**
‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"
‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**
‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"
‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏

## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:

### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:
- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"
- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"
- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"

### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:
- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"
- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"
- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"

## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:
1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen
2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥
3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:
–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!
"""
        
        keyboard = [
            [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(tips_text, reply_markup=reply_markup)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    elif data == "create_content":
        await show_format_selection(update, context)
    
    elif data == "create_simple_images":
        # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        USER_STATE[user_id] = {'step': 'simple_orientation', 'format': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
        
        keyboard = [
            [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],
            [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]
        ]
        keyboard.extend([
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    elif data == "edit_image":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        USER_STATE[user_id] = {'step': 'upload_image_for_edit'}
        
        keyboard = [
            [InlineKeyboardButton("‚ùì –ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="help_image_edit")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        help_text = """üì§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX**

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

üí° **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å (–∞–∫–≤–∞—Ä–µ–ª—å, –º–∞—Å–ª–æ, —ç—Å–∫–∏–∑)
‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–∏—á–µ—Å–∫–∞, –æ–¥–µ–∂–¥–∞, —Ü–≤–µ—Ç–∞)
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
‚Ä¢ –°–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ–±—ä–µ–∫—Ç—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
2. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å
3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ø–æ–¥—Ö–æ–¥—è—â–∏–º" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        await query.edit_message_text(help_text, reply_markup=reply_markup)
    
    elif data == "how_to_use":
        await show_how_to_use(update, context)
    
    elif data == "about_bot":
        await show_about_bot(update, context)
    
    elif data == "support":
        await show_support(update, context)
    
    elif data == "main_menu":
        await show_main_menu(update, context)
    
    elif data == "format_selection":
        await show_format_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    elif data.startswith("format:"):
        format_type = data.split(":", 1)[1]
        USER_STATE[user_id] = {'step': 'style', 'format': format_type}
        await show_style_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    elif data.startswith("image_gen_model:"):
        model_name = data.split(":", 1)[1]
        USER_STATE[user_id]['model'] = model_name
        USER_STATE[user_id]['step'] = 'image_style'
        await show_image_style_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    elif data.startswith("image_style:"):
        style = data.split(":", 1)[1]
        USER_STATE[user_id]['image_style'] = style
        USER_STATE[user_id]['step'] = 'image_count'
        await show_image_count_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data.startswith("image_count:"):
        count = int(data.split(":", 1)[1])
        USER_STATE[user_id]['image_count'] = count
        USER_STATE[user_id]['step'] = 'image_prompt'
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data.startswith("simple_orientation:"):
        orientation = data.split(":", 1)[1]
        USER_STATE[user_id]['orientation'] = orientation
        USER_STATE[user_id]['step'] = 'simple_model'
        await show_model_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    elif data == "video_generation":
        await query.edit_message_text(
            "üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ**\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
            "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è TikTok, Instagram Reels\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    elif data == "credit_packages":
        await show_credit_packages(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    elif data.startswith("buy_credits:"):
        package_type = data.split(":", 1)[1]
        await handle_credit_purchase(update, context, package_type)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    elif data.startswith("check_payment:"):
        order_id = data.split(":", 1)[1]
        await check_payment_status(update, context, order_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    elif data.startswith("style:"):
        style = data.split(":", 1)[1]
        USER_STATE[user_id]['style'] = style
        USER_STATE[user_id]['step'] = 'model'
        await show_model_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    elif data == "retry_generation":
        current_step = state.get('step', '')
        if current_step in ['image_prompt', 'edit_prompt']:
            if current_step == 'image_prompt':
                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
            elif current_step == 'edit_prompt':
                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:")
        else:
            await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif data == "reset":
        USER_STATE[user_id] = {'step': 'main_menu'}
        await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    elif data == "back_to_main":
        await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif data == "change_settings":
        await show_format_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data == "more_images":
        current_step = state.get('step', '')
        if current_step == 'main_menu':
            await show_format_selection(update, context)
        else:
            await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    elif data == "more_images_same_settings":
        if 'prompt' in state and 'model' in state:
            await send_images(update, context, state, prompt_type='user', user_prompt=state['prompt'])
        else:
            await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data == "custom_image_count_simple":
        USER_STATE[user_id]['step'] = 'custom_image_count'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ç 1 –¥–æ 10):")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data == "custom_image_prompt":
        USER_STATE[user_id]['step'] = 'custom_image_prompt'
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data == "custom_image_style":
        USER_STATE[user_id]['step'] = 'custom_image_style'
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data == "generate_images":
        if 'prompt' in state:
            await send_images(update, context, state, prompt_type='user', user_prompt=state['prompt'])
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
    elif data == "style_back":
        await show_style_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif data == "image_count_back":
        await show_image_count_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    elif data == "simple_orientation_back":
        USER_STATE[user_id] = {'step': 'simple_orientation', 'format': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
        keyboard = [
            [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],
            [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]
        ]
        keyboard.extend([
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
    elif data == "model_back":
        await show_model_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    elif data == "style_gen_back":
        await show_style_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–º–ø—Ç—É –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    elif data == "simple_image_prompt_back":
        USER_STATE[user_id]['step'] = 'image_prompt'
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
    
    else:
        await query.edit_message_text("üîò –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def show_style_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ", callback_data="style:üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ")],
        [InlineKeyboardButton("üòÑ –õ–µ–≥–∫–æ", callback_data="style:üòÑ –õ–µ–≥–∫–æ")],
        [InlineKeyboardButton("üî• –ü—Ä–æ–¥–∞—é—â–µ", callback_data="style:üî• –ü—Ä–æ–¥–∞—é—â–µ")],
        [InlineKeyboardButton("üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ", callback_data="style:üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ")],
        [InlineKeyboardButton("üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ", callback_data="style:üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ")],
        [InlineKeyboardButton("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="style:–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π")],
        [InlineKeyboardButton("–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π", callback_data="style:–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π")],
        [InlineKeyboardButton("–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", callback_data="style:–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_image_style_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º", callback_data="image_style:–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º")],
        [InlineKeyboardButton("–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è", callback_data="image_style:–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è")],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", callback_data="image_style:–ú–∏–Ω–∏–º–∞–ª–∏–∑–º")],
        [InlineKeyboardButton("–ê–∫–≤–∞—Ä–µ–ª—å", callback_data="image_style:–ê–∫–≤–∞—Ä–µ–ª—å")],
        [InlineKeyboardButton("–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å", callback_data="image_style:–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å")],
        [InlineKeyboardButton("–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç", callback_data="image_style:–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_image_count_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("1", callback_data="image_count:1")],
        [InlineKeyboardButton("2", callback_data="image_count:2")],
        [InlineKeyboardButton("3", callback_data="image_count:3")],
        [InlineKeyboardButton("4", callback_data="image_count:4")],
        [InlineKeyboardButton("5", callback_data="image_count:5")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    user_id = update.effective_user.id
    user_info = analytics_db.get_user_info_by_id(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username_display = f"@{user_info['username']}" if user_info and user_info['username'] else "–ë–µ–∑ username"
    name_display = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() if user_info else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    support_text = f"""
üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

üë§ **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üÜî ID: `{user_id}`
üìù Username: {username_display}
üìù –ò–º—è: {name_display}

üí¨ **–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:**

1Ô∏è‚É£ **–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram:**
   üë§ @aiimagebotmanager (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏)

2Ô∏è‚É£ **–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:**
   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π
   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
   ‚Ä¢ –í–æ–ø—Ä–æ—Å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
   ‚Ä¢ –î—Ä—É–≥–æ–µ

3Ô∏è‚É£ **–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã** (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

4Ô∏è‚É£ **–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID:** `{user_id}`

‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å!
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        support_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_credit_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_credits = analytics_db.get_user_credits(user_id)
    current_balance = user_credits['balance'] if user_credits else 0
    
    credit_text = f"""
ü™ô **–ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤**

üí∞ **–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤

üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:**

üü¢ **–ú–∞–ª—ã–π –ø–∞–∫–µ—Ç**
‚Ä¢ 200 –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ1,129
‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

üü° **–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç** (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ 5,000 –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ2,420
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 20%

üî¥ **–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç** (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è)
‚Ä¢ 10,000 –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ –¶–µ–Ω–∞: ‚ÇΩ4,030
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 30%

üí° **–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:**
‚Ä¢ Ideogram: 10 –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ Bytedance: 10 –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ Google Imagen: 16 –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 12 –∫—Ä–µ–¥–∏—Ç–æ–≤

üîÑ **–ö—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç!**
–ü–æ–∫—É–ø–∞–µ—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤—Å–µ–≥–¥–∞.
"""
    
    keyboard = [
        [InlineKeyboardButton("üü¢ –ú–∞–ª—ã–π –ø–∞–∫–µ—Ç (200 –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data="buy_credits:small")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç (5,000 –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data="buy_credits:medium")],
        [InlineKeyboardButton("üî¥ –ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç (10,000 –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data="buy_credits:large")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        credit_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_credit_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE, package_type: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–∞
    packages = {
        'small': {'credits': 200, 'price': 1129, 'name': '–ú–∞–ª—ã–π –ø–∞–∫–µ—Ç'},
        'medium': {'credits': 5000, 'price': 2420, 'name': '–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç'},
        'large': {'credits': 10000, 'price': 4030, 'name': '–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç'}
    }
    
    if package_type not in packages:
        await update.callback_query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞–∫–µ—Ç–∞.")
        return
    
    package = packages[package_type]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = analytics_db.get_user_info_by_id(user_id)
        user_name = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() if user_info else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_email = user_info.get('email', '') if user_info else ''
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"credits_{user_id}_{int(time.time())}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Betatransfer API
        payment_result = betatransfer_api.create_payment(
            amount=package['price'],
            currency="RUB",
            description=f"–ü–æ–∫—É–ø–∫–∞ {package['name']} - {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤",
            order_id=order_id,
            payer_email=user_email,
            payer_name=user_name,
            payer_id=str(user_id)
        )
        
        if payment_result.get('success'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            analytics_db.create_payment(
                user_id=user_id,
                order_id=order_id,
                amount=package['price'],
                currency="RUB",
                credits_amount=package['credits'],
                status="pending",
                payment_url=payment_result.get('payment_url', ''),
                description=f"–ü–æ–∫—É–ø–∫–∞ {package['name']}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            purchase_text = f"""
üõí **–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!**

üì¶ **–ü–∞–∫–µ—Ç:** {package['name']}
ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {package['credits']}
üí∞ **–¶–µ–Ω–∞:** ‚ÇΩ{package['price']}
üÜî **ID –∑–∞–∫–∞–∑–∞:** `{order_id}`

üí≥ **–î–ª—è –æ–ø–ª–∞—Ç—ã:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
3. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂
4. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"

‚è∞ **–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:** 30 –º–∏–Ω—É—Ç
"""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result.get('payment_url', ''))],
                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment:{order_id}")],
                [InlineKeyboardButton("ü™ô –î—Ä—É–≥–∏–µ –ø–∞–∫–µ—Ç—ã", callback_data="credit_packages")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.callback_query.edit_message_text(
                purchase_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            error_text = f"""
‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**

üì¶ **–ü–∞–∫–µ—Ç:** {package['name']}
ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {package['credits']}
üí∞ **–¶–µ–Ω–∞:** ‚ÇΩ{package['price']}

üö® **–ü—Ä–æ–±–ª–µ–º–∞:** {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"buy_credits:{package_type}")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                [InlineKeyboardButton("üé® –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="create_content")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.callback_query.edit_message_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        purchase_text = f"""
üõí **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏**

üì¶ **–ü–∞–∫–µ—Ç:** {package['name']}
ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {package['credits']}
üí∞ **–¶–µ–Ω–∞:** ‚ÇΩ{package['price']}

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ:
1. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
3. –î–æ–∂–¥–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ 3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="support")],
            [InlineKeyboardButton("üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="create_content")],
            [InlineKeyboardButton("ü™ô –î—Ä—É–≥–∏–µ –ø–∞–∫–µ—Ç—ã", callback_data="credit_packages")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.callback_query.edit_message_text(
            purchase_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        payment_info = analytics_db.get_payment_by_order_id(order_id)
        
        if not payment_info:
            await update.callback_query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("ü™ô –ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="credit_packages"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Betatransfer API
        status_result = betatransfer_api.get_payment_status(order_id)
        
        if status_result.get('success'):
            payment_status = status_result.get('status', 'unknown')
            
            if payment_status == 'completed':
                # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
                if payment_info['status'] != 'completed':
                    # –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    analytics_db.add_user_credits(
                        user_id=user_id,
                        credits_amount=payment_info['credits_amount'],
                        transaction_type="payment",
                        description=f"–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∑–∞–∫–∞–∑ {order_id})"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    analytics_db.update_payment_status(order_id, 'completed')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
                    user_credits = analytics_db.get_user_credits(user_id)
                    new_balance = user_credits['balance'] if user_credits else 0
                    
                    success_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!**

üÜî **ID –∑–∞–∫–∞–∑–∞:** `{order_id}`
ü™ô **–ó–∞—á–∏—Å–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:** {payment_info['credits_amount']}
üí∞ **–°—É–º–º–∞:** ‚ÇΩ{payment_info['amount']}
üí≥ **–°—Ç–∞—Ç—É—Å:** –û–ø–ª–∞—á–µ–Ω–æ

üéâ **–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
"""
                    
                    keyboard = [
                        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],
                        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                    
                    await update.callback_query.edit_message_text(
                        success_text,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                    await update.callback_query.edit_message_text(
                        "‚úÖ –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content"),
                            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ]])
                    )
            
            elif payment_status == 'pending':
                # –ü–ª–∞—Ç–µ–∂ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
                pending_text = f"""
‚è≥ **–ü–ª–∞—Ç–µ–∂ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏**

üÜî **ID –∑–∞–∫–∞–∑–∞:** `{order_id}`
ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {payment_info['credits_amount']}
üí∞ **–°—É–º–º–∞:** ‚ÇΩ{payment_info['amount']}
üí≥ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ
2. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –µ—â–µ —Ä–∞–∑
3. –ö—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è∞ **–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:** 30 –º–∏–Ω—É—Ç
"""
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info.get('payment_url', ''))],
                    [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment:{order_id}")],
                    [InlineKeyboardButton("ü™ô –î—Ä—É–≥–∏–µ –ø–∞–∫–µ—Ç—ã", callback_data="credit_packages")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                
                await update.callback_query.edit_message_text(
                    pending_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            
            elif payment_status == 'failed':
                # –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è
                failed_text = f"""
‚ùå **–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è**

üÜî **ID –∑–∞–∫–∞–∑–∞:** `{order_id}`
ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {payment_info['credits_amount']}
üí∞ **–°—É–º–º–∞:** ‚ÇΩ{payment_info['amount']}
üí≥ **–°—Ç–∞—Ç—É—Å:** –ù–µ –æ–ø–ª–∞—á–µ–Ω

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç
"""
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="credit_packages")],
                    [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                
                await update.callback_query.edit_message_text(
                    failed_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                await update.callback_query.edit_message_text(
                    f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_status}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment:{order_id}"),
                        InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]])
                )
        
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            error_text = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞**

üÜî **ID –∑–∞–∫–∞–∑–∞:** `{order_id}`
üö® **–ü—Ä–æ–±–ª–µ–º–∞:** {status_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∑–∞–∫–∞–∑–∞
"""
            
            keyboard = [
                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment:{order_id}")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.callback_query.edit_message_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment:{order_id}"),
                InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    state = USER_STATE.get(user_id, {})
    step = state.get('step', '')
    
    if step == 'image_prompt':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        prompt = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞
        if not is_prompt_safe(prompt):
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE[user_id]['prompt'] = prompt
        USER_STATE[user_id]['step'] = 'generating'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await update.message.reply_text(
            f"üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"
            f"üìù **–ü—Ä–æ–º–ø—Ç:** {prompt}\n"
            f"üéØ **–ú–æ–¥–µ–ª—å:** {state.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üé® **–°—Ç–∏–ª—å:** {state.get('image_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {state.get('image_count', 1)}\n\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await send_images(update, context, state, prompt_type='user', user_prompt=prompt)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE[user_id] = {'step': 'main_menu'}
    
    elif step == 'upload_image_for_edit':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if update.message.photo:
            await update.message.reply_text(
                "üì§ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            USER_STATE[user_id]['step'] = 'edit_prompt'
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ), –∞ –Ω–µ —Ç–µ–∫—Å—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_image"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    elif step == 'edit_prompt':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_prompt = update.message.text
        
        await update.message.reply_text(
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ—Å—å!**\n\n"
            f"üìù **–ò–∑–º–µ–Ω–µ–Ω–∏—è:** {edit_prompt}\n\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        await update.message.reply_text(
            "‚úÖ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_image"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE[user_id] = {'step': 'main_menu'}
    
    elif step == 'custom_image_count':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            count = int(update.message.text)
            if 1 <= count <= 10:
                USER_STATE[user_id]['image_count'] = count
                USER_STATE[user_id]['step'] = 'image_prompt'
                await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {count}\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
            else:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="image_count_back"),
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]])
                )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="image_count_back"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    elif step == 'custom_image_prompt':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        prompt = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞
        if not is_prompt_safe(prompt):
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE[user_id]['prompt'] = prompt
        USER_STATE[user_id]['step'] = 'generating'
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await send_images(update, context, state, prompt_type='user', user_prompt=prompt)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE[user_id] = {'step': 'main_menu'}
    
    elif step == 'custom_image_style':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        style = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE[user_id]['image_style'] = style
        USER_STATE[user_id]['step'] = 'image_prompt'
        
        await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å: {style}\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
    
    else:
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "üí¨ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

async def send_images(update, context, state, prompt_type='auto', user_prompt=None, scenes=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º —á–µ—Ä–µ–∑ Replicate API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if hasattr(update, 'message') and update.message:
        chat_id = update.message.chat_id
        send_text = update.message.reply_text
        send_media = update.message.reply_media_group
    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat_id
        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)
        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)
    else:
        chat_id = None
        send_text = None
        send_media = None

    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    analytics_db.update_user_activity(user_id)
    analytics_db.log_action(user_id, "start_generation", f"format:{state.get('format', 'unknown')}, model:{state.get('model', 'unknown')}")
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API —Ç–æ–∫–µ–Ω–æ–≤
    if not os.getenv('REPLICATE_API_TOKEN'):
        if send_text:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await send_text("‚ùå –û—à–∏–±–∫–∞: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.", reply_markup=reply_markup)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if prompt_type == 'user' and user_prompt:
        prompts = [user_prompt]
    elif scenes:
        prompts = scenes[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    else:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        topic = state.get('topic', '–∫—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂')
        style = state.get('image_style', '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º')
        prompts = [f"{topic}, {style}"]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    max_images = min(len(prompts), 5)
    prompts = prompts[:max_images]
    
    images = []
    processed_count = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if send_text:
        await send_text(f"üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {len(prompts)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞—Å—å!**\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i, prompt in enumerate(prompts):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            selected_model = state.get('model', 'Ideogram')
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            if selected_model == 'Ideogram':
                model_name = "ideogram-ai/ideogram-v3-turbo"
                replicate_params = {
                    "prompt": prompt,
                    "aspect_ratio": "1:1",
                    "style": "auto",
                    "safety_tolerance": 2,
                    "magic_prompt": False
                }
            elif selected_model == 'Bytedance':
                model_name = "bytedance/seedream-3"
                replicate_params = {
                    "prompt": prompt,
                    "aspect_ratio": "1:1",
                    "style": "realistic",
                    "quality": "high"
                }
            elif selected_model == 'Google Imagen':
                model_name = "google/imagen-4-ultra"
                replicate_params = {
                    "prompt": prompt,
                    "aspect_ratio": "1:1",
                    "style": "realistic"
                }
            else:
                # Fallback –Ω–∞ Ideogram
                model_name = "ideogram-ai/ideogram-v3-turbo"
                replicate_params = {
                    "prompt": prompt,
                    "aspect_ratio": "1:1",
                    "style": "auto"
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output = await replicate_run_async(model_name, replicate_params, timeout=120)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            image_url = None
            
            if hasattr(output, 'url'):
                image_url = output.url
            elif hasattr(output, '__getitem__'):
                image_url = output[0] if output else None
            elif isinstance(output, (list, tuple)) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output) if output else None
            
            if image_url:
                images.append(InputMediaPhoto(media=image_url))
                processed_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                analytics_db.log_action(user_id, "image_generated", f"model:{selected_model}, prompt_length:{len(prompt)}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {str(e)}")
            analytics_db.log_action(user_id, "generation_error", f"model:{selected_model}, error:{str(e)[:100]}")
            continue
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if images:
        try:
            if send_media:
                await send_media(images)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            generation_time = time.time() - start_time
            analytics_db.log_action(user_id, "images_sent", f"count:{len(images)}, time:{generation_time:.1f}s")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_content")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                stats_text = f"‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                stats_text += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: **{len(images)}**\n"
                stats_text += f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: **{generation_time:.1f}—Å**\n"
                stats_text += f"üéØ –ú–æ–¥–µ–ª—å: **{selected_model}**\n\n"
                stats_text += "üí° **–°–æ–≤–µ—Ç:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
                
                await send_text(stats_text, reply_markup=reply_markup)
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            if send_text:
                await send_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if send_text:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await send_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API Replicate\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                "‚Ä¢ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º–ø—Ç\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
                reply_markup=reply_markup
            )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATE[user_id] = {'step': 'main_menu'}

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error
    user_id = update.effective_user.id if update and update.effective_user else None
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logging.error(f"üîç –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error}")
    logging.error(f"üîç {type(error).__name__}: {error}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if user_id:
        analytics_db.log_action(user_id, "error", f"{type(error).__name__}: {str(error)[:200]}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and update.effective_message:
        try:
            error_text = """
‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:

1. üîÑ –ù–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
2. üìû –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
3. ‚è∞ –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç

–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!
"""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="main_menu")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.effective_message.reply_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

async def setup_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
        BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("my_id", "üÜî –ú–æ–π ID"),
        BotCommand("credits_stats", "ü™ô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"),
        BotCommand("admin_stats", "üëë –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("add_credits", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand("check_credits", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand("set_credits", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (–∞–¥–º–∏–Ω)")
    ]
    await application.bot.set_my_commands(commands)

# ============================================================================
# MAIN FUNCTION
# ============================================================================

def main():
    import os
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    load_dotenv()
    
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_env.py –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è Replicate –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not os.getenv('REPLICATE_API_TOKEN'):
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REPLICATE_API_TOKEN")
        print("üí° –î–ª—è Railway –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    app = ApplicationBuilder().token(TOKEN).build()
    
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('stats', stats_command))
    app.add_handler(CommandHandler('my_id', my_id_command))
    app.add_handler(CommandHandler('admin_stats', admin_stats_command))
    app.add_handler(CommandHandler('credits_stats', credits_stats_command))
    app.add_handler(CommandHandler('ideogram_tips', ideogram_tips_command))
    app.add_handler(CommandHandler('check_replicate', check_replicate))
    app.add_handler(CommandHandler('test_ideogram', test_ideogram))
    app.add_handler(CommandHandler('test_image_send', test_image_send))
    app.add_handler(CommandHandler('edit_image', edit_image_command))
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞–º–∏
    app.add_handler(CommandHandler('add_credits', add_credits_command))
    app.add_handler(CommandHandler('check_credits', check_credits_command))
    app.add_handler(CommandHandler('set_credits', set_credits_command))
    
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, text_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    async def post_init(app):
        await setup_commands(app)
        await init_http_session()
        print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    app.post_init = post_init
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –Ω–∞ Railway
    port = int(os.environ.get('PORT', 0))
    
    if port:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ Railway —Å webhook
        async def start_webhook():
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await init_http_session()
            print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            await app.initialize()
            await app.start()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            webhook_url = f"https://web-production-3dd82.up.railway.app/{TOKEN}"
            print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
            
            try:
                await app.bot.set_webhook(url=webhook_url)
                print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
            try:
                await app.updater.start_webhook(
                    listen="0.0.0.0",
                    port=port,
                    url_path=TOKEN,
                    webhook_url=webhook_url
                )
                print("‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")
                return
            
            print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            print(f"üåê Webhook URL: {webhook_url}")
            print(f"üîë Token: {TOKEN[:10]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
            try:
                webhook_info = await app.bot.get_webhook_info()
                print(f"üìä Webhook —Å—Ç–∞—Ç—É—Å: {webhook_info}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def run_flask():
                flask_app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
            
            flask_thread = threading.Thread(target=run_flask, daemon=True)
            flask_thread.start()
            print("üåê Flask callback —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
            payment_polling_task = asyncio.create_task(start_payment_polling())
            print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥)")
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            try:
                await asyncio.Event().wait()
            except KeyboardInterrupt:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await close_http_session()
                print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                pass
        
        asyncio.run(start_webhook())
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å polling (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å polling")
        
        try:
            app.run_polling()
        except KeyboardInterrupt:
            print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()

