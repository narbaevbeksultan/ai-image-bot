#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python view_stats.py
"""

import sqlite3
from datetime import datetime, timedelta

def view_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with sqlite3.connect("bot_analytics.db") as conn:
            cursor = conn.cursor()
            
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê")
            print("=" * 50)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT COUNT(DISTINCT user_id) as total_users,
                       SUM(total_generations) as total_generations,
                       SUM(total_errors) as total_errors
                FROM users
            ''')
            global_data = cursor.fetchone()
            
            print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_data[0] or 0}")
            print(f"üé® –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_data[1] or 0}")
            print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {global_data[2] or 0}")
            print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            date_limit = datetime.now() - timedelta(days=7)
            cursor.execute('''
                SELECT COUNT(DISTINCT user_id) as active_users,
                       COUNT(*) as generations_count,
                       AVG(generation_time) as avg_generation_time
                FROM generations 
                WHERE timestamp >= ?
            ''', (date_limit,))
            recent_data = cursor.fetchone()
            
            print(f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {recent_data[0] or 0}")
            print(f"   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {recent_data[1] or 0}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {recent_data[2]:.1f}—Å" if recent_data[2] else "   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: N/A")
            print()
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏
            cursor.execute('''
                SELECT model_name, COUNT(*) as count
                FROM generations 
                WHERE timestamp >= ? AND success = 1
                GROUP BY model_name
                ORDER BY count DESC
                LIMIT 5
            ''', (date_limit,))
            popular_models = cursor.fetchall()
            
            print("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ (7 –¥–Ω–µ–π):")
            if popular_models:
                for model, count in popular_models:
                    print(f"   ‚Ä¢ {model}: {count}")
            else:
                print("   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            print()
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            cursor.execute('''
                SELECT format_type, COUNT(*) as count
                FROM generations 
                WHERE timestamp >= ? AND success = 1
                GROUP BY format_type
                ORDER BY count DESC
                LIMIT 5
            ''', (date_limit,))
            popular_formats = cursor.fetchall()
            
            print("üì± –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (7 –¥–Ω–µ–π):")
            if popular_formats:
                for format_type, count in popular_formats:
                    print(f"   ‚Ä¢ {format_type}: {count}")
            else:
                print("   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            print()
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT DATE(timestamp) as date,
                       COUNT(*) as generations,
                       COUNT(DISTINCT user_id) as users,
                       AVG(generation_time) as avg_time
                FROM generations 
                WHERE timestamp >= DATE('now', '-7 days')
                GROUP BY DATE(timestamp)
                ORDER BY date DESC
            ''')
            daily_stats = cursor.fetchall()
            
            print("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (7 –¥–Ω–µ–π):")
            if daily_stats:
                for date, generations, users, avg_time in daily_stats:
                    avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"
                    print(f"   ‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}")
            else:
                print("   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            print()
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                SELECT user_id, username, first_name, total_generations, total_errors
                FROM users 
                ORDER BY total_generations DESC 
                LIMIT 10
            ''')
            top_users = cursor.fetchall()
            
            print("üëë –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º:")
            if top_users:
                for i, (user_id, username, first_name, generations, errors) in enumerate(top_users, 1):
                    name = username or first_name or f"User{user_id}"
                    print(f"   {i}. {name} (ID: {user_id}): {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {errors} –æ—à–∏–±–æ–∫")
            else:
                print("   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    view_stats()
