#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_to_postgres_fixed.py
"""

import os
import sqlite3
import psycopg2
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_sqlite_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ"""
    return sqlite3.connect("bot_analytics.db")

def get_postgres_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ"""
    db_url = os.getenv('DATABASE_URL')
    if not db_url:
        raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL")
    return psycopg2.connect(db_url)

def clear_postgres_tables(postgres_conn):
    """–û—á–∏—â–∞–µ–º PostgreSQL —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∏—Å—Ç–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        cursor = postgres_conn.cursor()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("SET session_replication_role = replica;")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        tables = [
            'credit_transactions',
            'user_credits', 
            'user_limits',
            'payments',
            'user_actions',
            'errors',
            'generations',
            'users'
        ]
        
        for table in tables:
            cursor.execute(f"DELETE FROM {table}")
            logging.info(f"–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}")
        
        # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        cursor.execute("SET session_replication_role = DEFAULT;")
        
        postgres_conn.commit()
        logging.info("‚úÖ PostgreSQL —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ PostgreSQL: {e}")
        postgres_conn.rollback()

def migrate_table_fixed(sqlite_conn, postgres_conn, table_name, transform_func=None):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQLite –≤ PostgreSQL"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
        sqlite_cursor = sqlite_conn.cursor()
        sqlite_cursor.execute(f"SELECT * FROM {table_name}")
        rows = sqlite_cursor.fetchall()
        
        if not rows:
            logging.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        column_names = [description[0] for description in sqlite_cursor.description]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PostgreSQL
        postgres_cursor = postgres_conn.cursor()
        
        migrated_count = 0
        
        for row in rows:
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                if transform_func:
                    row = transform_func(row, column_names)
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è INSERT
                placeholders = ', '.join(['%s'] * len(row))
                columns_str = ', '.join(column_names)
                
                insert_query = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
                
                postgres_cursor.execute(insert_query, row)
                migrated_count += 1
                
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {e}")
                continue
        
        postgres_conn.commit()
        logging.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        postgres_conn.rollback()

def transform_users_fixed(row, columns):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    row = list(row)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ BIGINT
    if 'user_id' in columns:
        user_id_idx = columns.index('user_id')
        row[user_id_idx] = int(row[user_id_idx])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º is_premium –∏–∑ INTEGER –≤ BOOLEAN
    if 'is_premium' in columns:
        is_premium_idx = columns.index('is_premium')
        row[is_premium_idx] = bool(row[is_premium_idx])
    
    return row

def transform_generations_fixed(row, columns):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    row = list(row)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ BIGINT
    if 'user_id' in columns:
        user_id_idx = columns.index('user_id')
        row[user_id_idx] = int(row[user_id_idx])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º success –∏–∑ INTEGER –≤ BOOLEAN
    if 'success' in columns:
        success_idx = columns.index('success')
        row[success_idx] = bool(row[success_idx])
    
    return row

def transform_other_tables_fixed(row, columns):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    row = list(row)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ BIGINT
    if 'user_id' in columns:
        user_id_idx = columns.index('user_id')
        row[user_id_idx] = int(row[user_id_idx])
    
    return row

def check_sqlite_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ SQLite —Ñ–∞–π–ª"""
    if not os.path.exists("bot_analytics.db"):
        logging.error("–§–∞–π–ª bot_analytics.db –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    return True

def check_postgres_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        conn = get_postgres_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        conn.close()
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def get_table_stats(sqlite_conn, table_name):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        cursor = sqlite_conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        return count
    except:
        return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQLite —Ñ–∞–π–ª–∞
    if not check_sqlite_exists():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    if not check_postgres_connection():
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    try:
        sqlite_conn = get_sqlite_connection()
        postgres_conn = get_postgres_connection()
        
        logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        tables_stats = {}
        tables = ['users', 'generations', 'errors', 'user_actions', 'payments', 
                 'user_limits', 'user_credits', 'credit_transactions']
        
        for table in tables:
            count = get_table_stats(sqlite_conn, table)
            tables_stats[table] = count
            logging.info(f"  {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        total_records = sum(tables_stats.values())
        if total_records == 0:
            logging.warning("–í SQLite –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ").lower().strip()
        
        if confirm != 'y':
            logging.info("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –û—á–∏—â–∞–µ–º PostgreSQL —Ç–∞–±–ª–∏—Ü—ã
        logging.info("üßπ –û—á–∏—â–∞–µ–º PostgreSQL —Ç–∞–±–ª–∏—Ü—ã...")
        clear_postgres_tables(postgres_conn)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
        migration_order = [
            ('users', transform_users_fixed),
            ('generations', transform_generations_fixed),
            ('errors', transform_other_tables_fixed),
            ('user_actions', transform_other_tables_fixed),
            ('payments', transform_other_tables_fixed),
            ('user_limits', transform_other_tables_fixed),
            ('user_credits', transform_other_tables_fixed),
            ('credit_transactions', transform_other_tables_fixed)
        ]
        
        for table_name, transform_func in migration_order:
            if tables_stats.get(table_name, 0) > 0:
                logging.info(f"üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É {table_name}...")
                migrate_table_fixed(sqlite_conn, postgres_conn, table_name, transform_func)
            else:
                logging.info(f"‚è≠Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        postgres_cursor = postgres_conn.cursor()
        
        for table in tables:
            postgres_cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = postgres_cursor.fetchone()[0]
            original_count = tables_stats.get(table, 0)
            status = "‚úÖ" if count == original_count else "‚ö†Ô∏è"
            logging.info(f"  {status} {table}: {count}/{original_count} –∑–∞–ø–∏—Å–µ–π")
        
        logging.info("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logging.info("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–æ—Ç–∞ –Ω–∞ Railway")
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        try:
            sqlite_conn.close()
            postgres_conn.close()
        except:
            pass

if __name__ == "__main__":
    main()
