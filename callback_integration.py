"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è callback —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
"""
import asyncio
import logging
from aiohttp import web
from betatransfer_api import betatransfer_api
from database import analytics_db

def send_telegram_notification(user_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    """
    try:
        import os
        import requests
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logging.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π callback"""
    try:
        path = request.path
        
        if path == "/payment/ca":
            # Callback –æ—Ç Betatransfer
            form_data = await request.post()
            callback_data = dict(form_data)
            
            logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            result = betatransfer_api.process_callback(callback_data)
            
            if result.get("status") == "success":
                payment_info = result.get("payment_info", {})
                status = payment_info.get("status")
                
                if status == "completed":
                    order_id = payment_info.get("order_id")
                    payment_record = analytics_db.get_payment_by_order_id(order_id)
                    
                    if payment_record:
                        user_id = payment_record.get("user_id")
                        credit_amount = payment_record.get("credit_amount")
                        
                        # –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                        analytics_db.add_credits(user_id, credit_amount)
                        analytics_db.update_payment_status(payment_info.get("payment_id"), "completed")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        notification_message = (
                            f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"
                            f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ:** {credit_amount:,} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                            f"üí∞ **–°—É–º–º–∞:** {payment_info.get('amount')} {payment_info.get('currency', 'RUB')}\n"
                            f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_info.get('payment_id')}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
                        )
                        send_telegram_notification(user_id, notification_message)
                        logging.info(f"–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount}")
            
            return web.json_response({"status": "success"})
        
        elif path == "/payment/su":
            return web.json_response({"status": "success", "message": "Payment completed successfully"})
        
        elif path == "/payment/fai":
            return web.json_response({"status": "failed", "message": "Payment failed"})
        
        elif path == "/health":
            return web.json_response({"status": "healthy"})
        
        else:
            return web.Response(text="Not Found", status=404)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(text="Internal Server Error", status=500)

def create_callback_app():
    """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è callback"""
    app = web.Application()
    app.router.add_post("/payment/ca", webhook_handler)
    app.router.add_get("/payment/su", webhook_handler)
    app.router.add_get("/payment/fai", webhook_handler)
    app.router.add_get("/health", webhook_handler)
    return app

async def start_callback_server(port=5000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç callback —Å–µ—Ä–≤–µ—Ä"""
    app = create_callback_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Callback —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return runner
