import requests
import hashlib
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
import os
from dotenv import load_dotenv

load_dotenv()

class BetatransferAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Betatransfer API"""
    
    def __init__(self):
        self.api_key = os.getenv('BETATRANSFER_API_KEY')
        self.secret_key = os.getenv('BETATRANSFER_SECRET_KEY')
        self.test_mode = os.getenv('BETATRANSFER_TEST_MODE', 'false').lower() == 'true'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.base_url = "https://merchant.betatransfer.io/api"
    
    def _generate_signature(self, data: Dict) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Betatransfer
        –ê–ª–≥–æ—Ä–∏—Ç–º: md5(implode('', $data) . $secret)
        """
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–±–µ–∑ –∫–ª—é—á–µ–π) + —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: md5(implode('', $data) . $secret)
        # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏
        signature_string = ''.join(str(v) for v in data.values() if v is not None) + self.secret_key
        
        # –°–æ–∑–¥–∞–µ–º MD5 –ø–æ–¥–ø–∏—Å—å
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
        
        return signature
    
    def create_payment(self, amount: float, currency: str = "KGS", 
                       description: str = "", order_id: str = None, 
                       payer_email: str = "", payer_name: str = "",
                       payer_id: str = "") -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞ (KGS, UAH, USD, RUB, KZT, etc.)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            payer_email: Email –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            payer_name: –ò–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            payer_id: ID –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–¥–ª—è –∞–Ω—Ç–∏—Ñ—Ä–æ–¥–∞)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º order_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not order_id:
            order_id = f"order{int(time.time())}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Betatransfer
        payload = {
            'amount': str(amount),
            'currency': currency,
            'orderId': order_id,
            'paymentSystem': 'P2R_KGS',
            'payerId': str(payer_id)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        if payer_email:
            payload['payerEmail'] = payer_email
        if payer_name:
            payload['payerName'] = payer_name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ payload
        payload['sign'] = self._generate_signature(payload)
        
        # URL —Å —Ç–æ–∫–µ–Ω–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        endpoint = f"{self.base_url}/payment?token={self.api_key}"
        
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        try:
            logging.info(f"üîç –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂: {amount} {currency}, Order ID: {order_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ form-data —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            response = requests.post(endpoint, data=payload, headers=headers)
            
            response.raise_for_status()
            result = response.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            if 'id' in result:
                logging.info(f"üîç –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
                logging.info(f"   ID –ø–ª–∞—Ç–µ–∂–∞: {result['id']}")
                logging.info(f"   –°—É–º–º–∞: {result.get('amount', amount)} {result.get('currency', currency)}")
                logging.info(f"   –°—Ç–∞—Ç—É—Å: {result.get('status', 'created')}")
            else:
                logging.warning(f"üîç –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω, –Ω–æ –±–µ–∑ ID: {result}")
            
            return result
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            if hasattr(e, 'response') and e.response is not None:
                logging.error(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}, –¢–µ–ª–æ: {e.response.text}")
            return {"error": str(e)}
    
    def get_payment_status(self, payment_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Betatransfer
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        logging.info(f"üîç get_payment_status –≤—ã–∑–≤–∞–Ω —Å ID: {payment_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        data = {'id': payment_id}
        signature = self._generate_signature(data)
        
        # URL —Å —Ç–æ–∫–µ–Ω–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        endpoint = f"{self.base_url}/info?token={self.api_key}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –¥–∞–Ω–Ω—ã–º
        data['sign'] = signature
        
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        try:
            logging.info(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            response = requests.post(endpoint, data=data, headers=headers)
            
            response.raise_for_status()
            result = response.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
            status = result.get('status', 'unknown')
            amount = result.get('amount', 'N/A')
            currency = result.get('currency', 'N/A')
            order_id = result.get('orderId', 'N/A')
            
            logging.info(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}:")
            logging.info(f"   –°—Ç–∞—Ç—É—Å: {status}")
            logging.info(f"   –°—É–º–º–∞: {amount} {currency}")
            logging.info(f"   Order ID: {order_id}")
            
            return result
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return {"error": str(e)}
        except Exception as e:
            logging.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return {"error": str(e)}
    
    def verify_callback_signature(self, data: Dict, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Betatransfer
        –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: md5($amount . $orderId . $secret)
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ callback
            signature: –ü–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞, False –∏–Ω–∞—á–µ
        """
        # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:
        # md5($amount . $orderId . $secret)
        amount = data.get('amount', '')
        order_id = data.get('orderId', '')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        signature_string = str(amount) + str(order_id) + self.secret_key
        
        # –°–æ–∑–¥–∞–µ–º MD5 –ø–æ–¥–ø–∏—Å—å
        expected_signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
        
        is_valid = signature == expected_signature
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
        if not is_valid:
            logging.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å callback: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_signature}, –ø–æ–ª—É—á–µ–Ω–æ {signature}")
        
        return is_valid
    
    def process_callback(self, callback_data: Dict) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Betatransfer
        
        Args:
            callback_data: –î–∞–Ω–Ω—ã–µ callback
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = callback_data.get('sign', '')
        if not self.verify_callback_signature(callback_data, signature):
            return {"error": "Invalid signature", "status": "error"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É Betatransfer
        payment_info = {
            "payment_id": callback_data.get('id'),
            "payment_system": callback_data.get('paymentSystem'),
            "type": callback_data.get('type'),
            "order_id": callback_data.get('orderId'),
            "order_amount": callback_data.get('orderAmount'),
            "paid_amount": callback_data.get('paidAmount'),
            "amount": callback_data.get('amount'),
            "currency": callback_data.get('currency'),
            "commission": callback_data.get('commission'),
            "status": callback_data.get('status'),
            "created_at": callback_data.get('createdAt'),
            "updated_at": callback_data.get('updatedAt'),
            "exchange_rate": callback_data.get('exchangeRate'),
            "receiver_wallet": callback_data.get('receiverWallet'),
            "beneficiary_name": callback_data.get('beneficiaryName'),
            "beneficiary_bank": callback_data.get('beneficiaryBank')
        }
        
        return {
            "success": True,
            "payment_info": payment_info,
            "status": "success"
        }
    
    def get_payment_url(self, payment_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
        Returns:
            URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        """
        return f"https://merchant.betatransfer.io/pay/{payment_id}"
    
    def test_connection(self) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
        """
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–æ–≤–æ–º—É URL
        endpoint = f"{self.base_url}/"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(endpoint, headers=headers)
            if response.status_code == 200:
                return {"success": True, "message": "API connection successful"}
            else:
                return {"success": False, "message": f"API error: {response.status_code}"}
        except requests.exceptions.RequestException as e:
            return {"success": False, "message": f"Connection error: {str(e)}"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
betatransfer_api = BetatransferAPI()



