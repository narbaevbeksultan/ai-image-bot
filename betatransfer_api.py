import requests
import hashlib
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
import os
from dotenv import load_dotenv

load_dotenv()

class BetatransferAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Betatransfer API"""
    
    def __init__(self):
        self.api_key = os.getenv('BETATRANSFER_API_KEY')
        self.secret_key = os.getenv('BETATRANSFER_SECRET_KEY')
        self.test_mode = os.getenv('BETATRANSFER_TEST_MODE', 'false').lower() == 'true'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.base_url = "https://merchant.betatransfer.io/api"
    
    def _generate_signature(self, data: Dict) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Betatransfer
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á–∞–º
        sorted_params = sorted(data.items())
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ä—è–¥ + —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
        signature_string = ''.join(str(v) if v is not None else '' for _, v in sorted_params) + self.secret_key
        
        # –°–æ–∑–¥–∞–µ–º MD5 –ø–æ–¥–ø–∏—Å—å
        return hashlib.md5(signature_string.encode('utf-8')).hexdigest()
    
    def create_payment(self, amount: float, currency: str = "UAH", 
                       description: str = "", order_id: str = None, 
                       payer_email: str = "", payer_name: str = "",
                       payer_id: str = "") -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency: –í–∞–ª—é—Ç–∞ (UAH, USD, RUB, KZT, etc.)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            payer_email: Email –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            payer_name: –ò–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            payer_id: ID –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–¥–ª—è –∞–Ω—Ç–∏—Ñ—Ä–æ–¥–∞)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        endpoint = f"{self.base_url}/payment"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º order_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not order_id:
            order_id = f"order{int(time.time())}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        payload = {
            'amount': str(amount),
            'currency': currency,
            'fullCallback': '1',
            'orderId': order_id,
            'paymentSystem': 'card',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä—Ç–∞
            'urlFail': os.getenv('WEBHOOK_BASE_URL', '') + "/payment/fail",
            'urlResult': os.getenv('WEBHOOK_BASE_URL', '') + "/payment/callback",
            'urlSuccess': os.getenv('WEBHOOK_BASE_URL', '') + "/payment/success"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        if payer_email:
            payload['payerEmail'] = payer_email
        if payer_id:
            payload['payerId'] = payer_id
        if payer_name:
            payload['payerName'] = payer_name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        payload['sign'] = self._generate_signature(payload)
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        try:
            print(f"üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:")
            print(f"   URL: {endpoint}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            print(f"   –î–∞–Ω–Ω—ã–µ: {payload}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ form-data —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            response = requests.post(endpoint, data=payload, headers=headers)
            
            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}")
                print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            return {"error": str(e)}
    
    def get_payment_status(self, payment_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        endpoint = f"{self.base_url}/payment/{payment_id}"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(endpoint, headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}
    
    def verify_callback_signature(self, data: Dict, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ callback
            signature: –ü–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞, False –∏–Ω–∞—á–µ
        """
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ sign –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        params = {k: v for k, v in data.items() if k != 'sign'}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á–∞–º (–∫–∞–∫ –≤ –∑–∞–ø—Ä–æ—Å–µ)
        sorted_params = sorted(params.items())
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ä—è–¥ + —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–µ–∑ –∫–ª—é—á–µ–π
        signature_string = ''.join(str(v) for _, v in sorted_params) + self.secret_key
        
        # –°–æ–∑–¥–∞–µ–º MD5 –ø–æ–¥–ø–∏—Å—å
        expected_signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {sorted_params}")
        print(f"   –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {signature_string}")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å: {expected_signature}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
        
        return signature == expected_signature
    
    def process_callback(self, callback_data: Dict) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Betatransfer
        
        Args:
            callback_data: –î–∞–Ω–Ω—ã–µ callback
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = callback_data.get('sign', '')
        if not self.verify_callback_signature(callback_data, signature):
            return {"error": "Invalid signature", "status": "error"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É Betatransfer
        payment_info = {
            "payment_id": callback_data.get('id'),
            "payment_system": callback_data.get('paymentSystem'),
            "type": callback_data.get('type'),
            "order_id": callback_data.get('orderId'),
            "order_amount": callback_data.get('orderAmount'),
            "paid_amount": callback_data.get('paidAmount'),
            "amount": callback_data.get('amount'),
            "currency": callback_data.get('currency'),
            "commission": callback_data.get('commission'),
            "status": callback_data.get('status'),
            "created_at": callback_data.get('createdAt'),
            "updated_at": callback_data.get('updatedAt'),
            "exchange_rate": callback_data.get('exchangeRate'),
            "receiver_wallet": callback_data.get('receiverWallet'),
            "beneficiary_name": callback_data.get('beneficiaryName'),
            "beneficiary_bank": callback_data.get('beneficiaryBank')
        }
        
        return {
            "success": True,
            "payment_info": payment_info,
            "status": "success"
        }
    
    def get_payment_url(self, payment_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
        Returns:
            URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        """
        return f"https://merchant.betatransfer.io/pay/{payment_id}"
    
    def test_connection(self) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
        """
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–æ–≤–æ–º—É URL
        endpoint = f"{self.base_url}/"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(endpoint, headers=headers)
            if response.status_code == 200:
                return {"success": True, "message": "API connection successful"}
            else:
                return {"success": False, "message": f"API error: {response.status_code}"}
        except requests.exceptions.RequestException as e:
            return {"success": False, "message": f"Connection error: {str(e)}"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
betatransfer_api = BetatransferAPI()



