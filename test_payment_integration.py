#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –±–æ—Ç–µ
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        from betatransfer_api import betatransfer_api
        print("‚úÖ betatransfer_api –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ betatransfer_api: {e}")
        return False
    
    try:
        from database import analytics_db
        print("‚úÖ database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ database: {e}")
        return False
    
    try:
        from pricing_config import CREDIT_PACKAGES, get_generation_cost
        print("‚úÖ pricing_config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pricing_config: {e}")
        return False
    
    return True

def test_database_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import analytics_db
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 999999
        analytics_db.add_user(test_user_id, "test_user", "Test", "User")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫—Ä–µ–¥–∏—Ç–æ–≤
        analytics_db.init_user_credits(test_user_id)
        print("‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        credits = analytics_db.get_user_credits(test_user_id)
        print(f"‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {credits}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        success = analytics_db.add_credits(test_user_id, 100, description="–¢–µ—Å—Ç–æ–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_record = analytics_db.create_payment(
            user_id=test_user_id,
            amount=14.0,
            currency="UAH",
            payment_id="test_payment_123",
            order_id="test_order_123"
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {'—É—Å–ø–µ—à–Ω–æ' if payment_record else '–æ—à–∏–±–∫–∞'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_pricing_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ü–µ–Ω"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ü–µ–Ω...")
    
    try:
        from pricing_config import CREDIT_PACKAGES, get_generation_cost, get_available_credit_packages
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
        packages = get_available_credit_packages()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤: {len(packages)}")
        for package in packages:
            print(f"  üì¶ {package['name']}: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {package['price']} {package['currency']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        models = ['Ideogram', 'Bytedance (Seedream-3)', 'Google Imagen 4 Ultra']
        for model in models:
            try:
                cost = get_generation_cost(model)
                print(f"‚úÖ {model}: {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            except Exception as e:
                print(f"‚ùå {model}: –æ—à–∏–±–∫–∞ - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–µ–Ω: {e}")
        return False

def test_betatransfer_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API Betatransfer"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API Betatransfer...")
    
    try:
        from betatransfer_api import betatransfer_api
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = os.getenv('BETATRANSFER_API_KEY')
        secret_key = os.getenv('BETATRANSFER_SECRET_KEY')
        webhook_url = os.getenv('WEBHOOK_BASE_URL')
        
        if not api_key:
            print("‚ùå BETATRANSFER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        if not secret_key:
            print("‚ùå BETATRANSFER_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        if not webhook_url:
            print("‚ùå WEBHOOK_BASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print(f"  API Key: {api_key[:10]}...")
        print(f"  Secret Key: {secret_key[:10]}...")
        print(f"  Webhook URL: {webhook_url}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Betatransfer: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –±–æ—Ç–µ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    required_vars = [
        'BETATRANSFER_API_KEY',
        'BETATRANSFER_SECRET_KEY',
        'WEBHOOK_BASE_URL'
    ]
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {value[:20]}..." if len(value) > 20 else f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = True
    
    if not test_imports():
        success = False
    
    if not test_database_functions():
        success = False
    
    if not test_pricing_config():
        success = False
    
    if not test_betatransfer_api():
        success = False
    
    print("\n" + "=" * 60)
    
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return success

if __name__ == "__main__":
    main()
