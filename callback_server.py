from flask import Flask, request, jsonify
from betatransfer_api import BetatransferAPI
from database import AnalyticsDB
import os
from dotenv import load_dotenv
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

app = Flask(__name__)
betatransfer_api = BetatransferAPI()
db = AnalyticsDB()

def send_telegram_notification(user_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

@app.route('/payment/ca', methods=['POST'])
def payment_callback():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Betatransfer
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback (—Ñ–æ—Ä–º–∞—Ç: application/x-www-form-urlencoded)
        callback_data = request.form.to_dict()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
        
        if not callback_data:
            logger.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
            return jsonify({"error": "Empty callback data"}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ API
        result = betatransfer_api.process_callback(callback_data)
        
        if result.get("status") == "error":
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {result.get('error')}")
            return jsonify({"error": result.get("error")}), 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = result.get("payment_info", {})
        payment_id = payment_info.get("payment_id")
        status = payment_info.get("status")
        amount = payment_info.get("amount")
        order_id = payment_info.get("order_id")
        
        logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        if status == "completed":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã
            payment_record = db.get_payment_by_order_id(order_id)
            if payment_record:
                user_id = payment_record.get("user_id")
                credit_amount = payment_record.get("credit_amount")
                
                # –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                db.add_credits(user_id, credit_amount)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                db.update_payment_status(payment_id, "completed")
                
                logger.info(f"–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                notification_message = (
                    f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"
                    f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ:** {credit_amount:,} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    f"üí∞ **–°—É–º–º–∞:** {amount} {currency}\n"
                    f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                notification_sent = send_telegram_notification(user_id, notification_message)
                if notification_sent:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.error(f"–ü–ª–∞—Ç–µ–∂ —Å order_id {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Betatransfer)
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/payment/su', methods=['GET'])
def payment_success():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return jsonify({
        "status": "success",
        "message": "Payment completed successfully"
    })

@app.route('/payment/fai', methods=['GET'])
def payment_fail():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return jsonify({
        "status": "failed",
        "message": "Payment failed"
    })

@app.route('/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({"status": "healthy"})

if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 5000
    port = int(os.getenv('PORT', 5000))
    
    logger.info(f"Callback —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info("URL –¥–ª—è callback: http://localhost:{}/payment/callback".format(port))
    
    app.run(host='0.0.0.0', port=port, debug=False)
