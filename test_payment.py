#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI Image Generator Bot
"""

import os
import sys
from dotenv import load_dotenv

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
def test_betatransfer_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API Betatransfer"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API Betatransfer...")
    
    try:
        from betatransfer_api import betatransfer_api
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
        connection_test = betatransfer_api.test_connection()
        print(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_test}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")
        payment_result = betatransfer_api.create_payment(
            amount=14.0,
            currency="UAH",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è 2000 –∫—Ä–µ–¥–∏—Ç–æ–≤",
            payer_id="test_user_123"
        )
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result}")
        
        if 'payment_id' in payment_result:
            payment_id = payment_result['payment_id']
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {payment_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_url = betatransfer_api.get_payment_url(payment_id)
            print(f"üîó URL –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
            status_result = betatransfer_api.get_payment_status(payment_id)
            print(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status_result}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result}")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import analytics_db
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 999999
        print(f"üîç –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}...")
        analytics_db.add_user(test_user_id, "test_user", "Test", "User")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç—ã...")
        analytics_db.init_user_credits(test_user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã...")
        credits = analytics_db.get_user_credits(test_user_id)
        print(f"üìä –ö—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {credits}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        print("üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã...")
        success = analytics_db.add_credits(test_user_id, 1000, description="–¢–µ—Å—Ç–æ–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        credits = analytics_db.get_user_credits(test_user_id)
        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {credits}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤...")
        success = analytics_db.use_credits(test_user_id, 100, description="–¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        credits = analytics_db.get_user_credits(test_user_id)
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {credits}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        free_left = analytics_db.get_free_generations_left(test_user_id)
        print(f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {free_left}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        print("üîç –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π...")
        success = analytics_db.increment_free_generations(test_user_id)
        print(f"‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        free_left = analytics_db.get_free_generations_left(test_user_id)
        print(f"üÜì –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {free_left}")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def test_pricing_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ü–µ–Ω"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ü–µ–Ω...")
    
    try:
        from pricing_config import (
            CREDIT_PACKAGES, 
            get_generation_cost, 
            format_price,
            get_available_credit_packages
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
        print("üîç –ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤:")
        packages = get_available_credit_packages()
        for package in packages:
            print(f"  üì¶ {package['name']}: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {format_price(package['price'], package['currency'])}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        print("\nüîç –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:")
        models = ['Ideogram', 'Bytedance (Seedream-3)', 'Google Imagen 4 Ultra', 'FLUX.1 Kontext Pro']
        for model in models:
            cost = get_generation_cost(model)
            print(f"  üé® {model}: {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
        print("\nüîç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω:")
        test_amounts = [14.0, 30.0, 50.0]
        currencies = ['UAH', 'USD', 'RUB', 'EUR']
        for amount in test_amounts:
            for currency in currencies:
                formatted = format_price(amount, currency)
                print(f"  üí∞ {amount} {currency}: {formatted}")
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI Image Generator Bot")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    required_vars = [
        'BETATRANSFER_API_KEY',
        'BETATRANSFER_SECRET_KEY',
        'WEBHOOK_BASE_URL'
    ]
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {value[:20]}..." if len(value) > 20 else f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_betatransfer_api()
    test_database()
    test_pricing_config()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
