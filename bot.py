import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import openai
import os
import replicate
import requests
from PIL import Image
import io
import tempfile
import time
import asyncio
from datetime import datetime, timedelta
from database import analytics_db

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATE = {}

# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
STEP_FORMAT = 'format'
STEP_STYLE = 'style'
STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
STEP_IMAGE_COUNT = 'image_count'
STEP_IMAGE_MODEL = 'image_model'
STEP_IMAGE_GENERATION = 'image_generation'
STEP_IMAGE_EDIT = 'image_edit'
STEP_VIDEO_QUALITY = 'video_quality'
STEP_VIDEO_DURATION = 'video_duration'
STEP_VIDEO_GENERATION = 'video_generation'
STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç
STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞

FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']
STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']

# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
IMAGE_GEN_STYLES = [
    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',
    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',
    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',
    '–ê–∫–≤–∞—Ä–µ–ª—å',
    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',
    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'
]

# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_GEN_MODELS = [
    'Ideogram',
    'Bytedance (Seedream-3)',
    'Google Imagen 4 Ultra',
    'Luma Photon',
    'Bria 3.2',
    'Recraft AI'
]

# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
VIDEO_GEN_MODELS = [
    'Bytedance Seedance 1.0 Pro'
]

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)
MODEL_DESCRIPTIONS = {
    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',
    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',
    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',
    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'
}

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ
VIDEO_MODEL_DESCRIPTIONS = {
            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'
}

def get_image_size_for_format(format_type, simple_orientation=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower().replace(' ', '')
    
    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    elif format_type == 'instagrampost':
        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤
        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        if simple_orientation == 'vertical':
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif simple_orientation == 'square':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return "1024x1024"
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return "1024x1024"

def get_replicate_size_for_format(format_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower().replace(' ', '')
    
    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    elif format_type == 'instagrampost':
        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤
        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return "1024x1024"

def get_replicate_size_for_model(model_name, format_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower().replace(' ', '')
    
    if model_name == 'Bytedance (Seedream-3)':
        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"
        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        else:
            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    
    elif model_name == 'Ideogram':
        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif format_type == 'instagrampost':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            return "1024x1024"
    
    elif model_name == 'Google Imagen 4 Ultra':
        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif format_type == 'instagrampost':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            return "1024x1024"
    
    elif model_name == 'Luma Photon':
        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif format_type == 'instagrampost':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            return "1024x1024"
    
    elif model_name == 'Bria 3.2':
        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif format_type == 'instagrampost':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            return "1024x1024"
    
    elif model_name == 'Recraft AI':
        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        elif format_type == 'instagrampost':
            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        else:
            return "1024x1024"
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        return get_replicate_size_for_format(format_type)

def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower().replace(' ', '')
    
    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16
    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:
        return {"aspect_ratio": "9:16"}
    
    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    elif format_type == 'instagrampost':
        return {"aspect_ratio": "1:1"}
    
    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
        if simple_orientation == 'vertical':
            return {"aspect_ratio": "9:16"}
        elif simple_orientation == 'square':
            return {"aspect_ratio": "1:1"}
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return {"aspect_ratio": "1:1"}
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    else:
        return {"aspect_ratio": "1:1"}

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')
BANNED_WORDS = [
    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'
]

def get_format_tips(format_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    format_type = format_type.lower()
    
    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:
        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"
‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """
    
    elif format_type in ['instagram post']:
        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """
    
    elif format_type in ['instagram stories']:
        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"

‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """
    
    else:
        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"
‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    analytics_db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    analytics_db.update_user_activity(user.id)
    analytics_db.log_action(user.id, "start_command")
    
    welcome_text = """
üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.

üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å
‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],
        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],
        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],
        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]
    ]
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    limits = analytics_db.get_user_limits(user_id)
    credits = analytics_db.get_user_credits(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    free_generations_left = analytics_db.get_free_generations_left(user_id)
    
    status_text = ""
    if free_generations_left > 0:
        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"
    else:
        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
    if credits['balance'] > 0:
        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
    else:
        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],
        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],
        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],
        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        [InlineKeyboardButton("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram", callback_data="ideogram_tips")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]
    ]
    
    await update.callback_query.edit_message_text(
        f"üé® AI Image Generator\n\n{status_text}"
        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"
        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"
        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"
        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:
   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram
   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok
   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube
   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram
   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram
   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç

3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)
   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)
   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)

4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:
   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"

5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ

üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞

üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç
‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    about_text = """
‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:

ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤

üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:
‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)
‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)
‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)

üì± –§–æ—Ä–º–∞—Ç—ã:
‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)
‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã

üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        about_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    keyboard = [
        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],
        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],
        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],
        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],
        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],
        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],
        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    keyboard = [
        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],
        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],
        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],
        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],
        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],
        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],
        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:
   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram
   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok
   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube
   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram
   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram
   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç

3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)
   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)
   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)
   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)
   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)

4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:
   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"

5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ

üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞

‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**
‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"
‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen

üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑
‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**
‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û
‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate
‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    analytics_db.update_user_activity(user_id)
    analytics_db.log_action(user_id, "stats_command")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = analytics_db.get_user_stats(user_id)
    
    if not user_stats:
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}
‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}
‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}

üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
    if user_stats['models_stats']:
        for model, count, avg_time, successful in user_stats['models_stats'][:5]:
            success_rate = (successful / count * 100) if count > 0 else 0
            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"
            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"
    else:
        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
    if user_stats['formats_stats']:
        for format_type, count in user_stats['formats_stats'][:5]:
            stats_text += f"‚Ä¢ {format_type}: {count}\n"
    else:
        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""
    tips_text = """
üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**

## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö

## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:

### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**
```
‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"
‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"
```

### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**
```
‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"
‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"
```

### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏

## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:

### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:
- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"
- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"
- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"

### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:
- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"
- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"
- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"

## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:

1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen
2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥
3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:

–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!
"""
    
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        tips_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    USER_STATE[user_id]['step'] = 'upload_image_for_edit'
    
    await update.message.reply_text(
        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"
        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"
        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"
        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"
        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    )

def is_prompt_safe(prompt):
    prompt_lower = prompt.lower()
    for word in BANNED_WORDS:
        if word in prompt_lower:
            return False
    return True

def improve_prompt_for_ideogram(prompt):
    """
    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram
    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    """
    if not prompt:
        return prompt
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram
    prompt = prompt.strip()
    
    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ
    words = prompt.split()
    if len(words) > 15:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        important_words = []
        for word in words:
            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:
                important_words.append(word)
            if len(important_words) >= 10:
                break
        prompt = ' '.join(important_words)
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    words = prompt.split()
    unique_words = []
    for word in words:
        if word.lower() not in [w.lower() for w in unique_words]:
            unique_words.append(word)
    
    return ' '.join(unique_words)

async def extract_scenes_from_script(script_text, format_type=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    import re
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    frame_count = None
    frame_patterns = [
        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',
        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',
        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',
        r'(\d+)\s*—Ñ–æ—Ç–æ',
        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'
    ]
    
    for pattern in frame_patterns:
        match = re.search(pattern, script_text.lower())
        if match:
            frame_count = int(match.group(1))
            break
    
    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if not frame_count and '[' in script_text and ']' in script_text:
        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        frame_matches = re.findall(r'\[.*?\]', script_text)
        if frame_matches:
            frame_count = len(frame_matches)
    
    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if frame_count:
        prompt = (
            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"
            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "
            f"–í–ê–ñ–ù–û: "
            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "
            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "
            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "
            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
        )
    else:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
            if '[' in script_text and ']' in script_text:
                prompt = (
                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"
                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
                )
            else:
                prompt = (
                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"
                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "
                    f"–í–ê–ñ–ù–û: "
                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "
                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "
                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "
                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
                )
        else:
            prompt = (
                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"
                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "
                f"–í–ê–ñ–ù–û: "
                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "
                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "
                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "
                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
            )
    
    try:
        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        response = client.chat.completions.create(
            model="gpt-4o-mini",
                    messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},
            {"role": "user", "content": prompt}
        ],
            max_tokens=700,
            temperature=0.5,
        )
        scenes_text = response.choices[0].message.content.strip()
        scenes = [s for s in scenes_text.split('\n') if s.strip()]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤
        if frame_count:
            scenes = scenes[:frame_count]
    except Exception as e:
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        scenes = []
        
        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        frame_matches = re.findall(r'\[.*?\]', script_text)
        if frame_matches:
            for match in frame_matches:
                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞
                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)
                scene_text = re.sub(r'^\[', '', scene_text)
                scene_text = re.sub(r'\]$', '', scene_text)
                if scene_text.strip():
                    scenes.append(scene_text.strip())
        
        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not scenes:
            sentences = re.split(r'[.!?]+', script_text)
            for sentence in sentences:
                sentence = sentence.strip()
                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    scenes.append(sentence)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω
        if frame_count:
            scenes = scenes[:frame_count]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤
    if frame_count:
        scenes = scenes[:frame_count]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)
    scenes = scenes[:10]
    
    return scenes

def enhance_prompts_with_character_context(prompts, topic):
    """
    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏
    """
    if not prompts:
        return prompts
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    character_keywords = {
        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],
        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],
        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],
        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],
        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],
        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π
    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())
    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)
    
    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
    if not has_people_in_topic and not has_people_in_prompts:
        return prompts
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    main_character = None
    for keyword, english_terms in character_keywords.items():
        if any(keyword in prompt.lower() for prompt in prompts):
            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω
            break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º
    if main_character:
        enhanced_prompts = []
        for i, prompt in enumerate(prompts):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ
            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)
            
            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º
                enhanced_prompt = f"{main_character}, {prompt}"
            elif not has_character and i > 0:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                enhanced_prompt = f"{main_character}, {prompt}"
            else:
                enhanced_prompt = prompt
            
            enhanced_prompts.append(enhanced_prompt)
        
        return enhanced_prompts
    
    return prompts

async def setup_commands(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º / –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
        BotCommand("stats", "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("ideogram_tips", "üé® –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram")
    ]
    
    try:
        await application.bot.set_my_commands(commands)
        logging.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "create_content":
        await show_format_selection(update, context)
    elif query.data == "how_to_use":
        await show_how_to_use(update, context)
    elif query.data == "about_bot":
        await show_about_bot(update, context)
    elif query.data == "format_selection":
        await show_format_selection(update, context)
    elif query.data.startswith("format:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        format_type = query.data.split(":", 1)[1]
        user_id = update.effective_user.id
        if user_id not in USER_STATE:
            USER_STATE[user_id] = {}
        USER_STATE[user_id]['format'] = format_type
        USER_STATE[user_id]['step'] = STEP_TOPIC
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {format_type}\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")
            ]])
        )
    elif query.data.startswith("image_gen_model:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        model = query.data.split(":", 1)[1]
        user_id = update.effective_user.id
        if user_id not in USER_STATE:
            USER_STATE[user_id] = {}
        USER_STATE[user_id]['model'] = model
        USER_STATE[user_id]['step'] = STEP_IMAGE_COUNT
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1", callback_data="count:1")],
                [InlineKeyboardButton("2", callback_data="count:2")],
                [InlineKeyboardButton("3", callback_data="count:3")],
                [InlineKeyboardButton("4", callback_data="count:4")],
                [InlineKeyboardButton("5", callback_data="count:5")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="image_gen_model")]
            ])
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
        )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id not in USER_STATE:
        USER_STATE[user_id] = {'step': 'main_menu'}
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        return
    
    step = USER_STATE[user_id].get('step', 'main_menu')
    
    if step == STEP_TOPIC:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å
        USER_STATE[user_id]['topic'] = text
        USER_STATE[user_id]['step'] = STEP_IMAGE_MODEL
        await show_model_selection(update, context)
    elif step == 'upload_image_for_edit':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        USER_STATE[user_id]['edit_prompt'] = text
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        )

async def send_images(update, context, state, prompt_type='auto', user_prompt=None, scenes=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    format_type = state.get('format', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    model = state.get('model', 'Ideogram')
    topic = state.get('topic', '')
    image_count = state.get('image_count', 1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if user_prompt:
        prompt = user_prompt
    elif scenes:
        prompt = scenes[0] if scenes else topic
    else:
        prompt = topic
    
    if not prompt:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞
    if not is_prompt_safe(prompt):
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    analytics_db.log_action(user_id, f"image_generation_start_{model}")
    start_time = time.time()
    
    try:
        await update.message.reply_text(
            f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n"
            f"üìù –ü—Ä–æ–º–ø—Ç: {prompt[:100]}{'...' if len(prompt) > 100 else ''}\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {model}\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥..."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        if model == 'Ideogram':
            images = await generate_ideogram_images(prompt, image_count, format_type)
        elif model == 'Bytedance (Seedream-3)':
            images = await generate_bytedance_images(prompt, image_count, format_type)
        elif model == 'Google Imagen 4 Ultra':
            images = await generate_google_imagen_images(prompt, image_count, format_type)
        elif model == 'Luma Photon':
            images = await generate_luma_photon_images(prompt, image_count, format_type)
        elif model == 'Bria 3.2':
            images = await generate_bria_images(prompt, image_count, format_type)
        elif model == 'Recraft AI':
            images = await generate_recraft_images(prompt, image_count, format_type)
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: {model}")
            return
        
        if not images:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(images) == 1:
            # –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await update.message.reply_photo(
                photo=images[0],
                caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é {model}\nüìù –ü—Ä–æ–º–ø—Ç: {prompt[:200]}{'...' if len(prompt) > 200 else ''}"
            )
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            media_group = []
            for i, image_url in enumerate(images):
                media_group.append(
                    InputMediaPhoto(
                        media=image_url,
                        caption=f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{len(images)} - {model}\nüìù –ü—Ä–æ–º–ø—Ç: {prompt[:100]}{'...' if len(prompt) > 100 else ''}"
                    )
                )
            
            await update.message.reply_media_group(media=media_group)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        generation_time = time.time() - start_time
        analytics_db.log_generation(
            user_id=user_id,
            model_name=model,
            format_type=format_type,
            prompt=prompt,
            image_count=image_count,
            success=True,
            generation_time=generation_time
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_content")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_image")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {generation_time:.1f} —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        generation_time = time.time() - start_time
        analytics_db.log_generation(
            user_id=user_id,
            model_name=model,
            format_type=format_type,
            prompt=prompt,
            image_count=image_count,
            success=False,
            error_message=str(e),
            generation_time=generation_time
        )
        
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        )

async def generate_video(update, context, state):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å
    await update.message.reply_text(
        "üé¨ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )

async def edit_image_with_flux(update, context, state, original_image_url, edit_prompt):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å
    await update.message.reply_text(
        "‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )

async def generate_ideogram_images(prompt, image_count, format_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Ideogram"""
    try:
        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Ideogram
        improved_prompt = improve_prompt_for_ideogram(prompt)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size = get_replicate_size_for_model('Ideogram', format_type)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for i in range(image_count):
            output = replicate.run(
                "ideogram-ai/ideogram-v3-turbo",
                input={
                    "prompt": improved_prompt,
                    "width": int(size.split('x')[0]),
                    "height": int(size.split('x')[1])
                }
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(output, 'url'):
                image_url = output.url
            elif isinstance(output, list) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output)
            
            if image_url and image_url.startswith('http'):
                images.append(image_url)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < image_count - 1:
                await asyncio.sleep(1)
        
        return images
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Ideogram: {e}")
        return []

async def generate_bytedance_images(prompt, image_count, format_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bytedance Seedream-3"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è Bytedance
        size = get_replicate_size_for_model('Bytedance (Seedream-3)', format_type)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for i in range(image_count):
            output = replicate.run(
                "bytedance/seedream-3",
                input={
                    "prompt": prompt,
                    "size": size,
                    "aspect_ratio": "9:16" if format_type.lower() in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts'] else "1:1"
                }
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(output, 'url'):
                image_url = output.url
            elif isinstance(output, list) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output)
            
            if image_url and image_url.startswith('http'):
                images.append(image_url)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < image_count - 1:
                await asyncio.sleep(1)
        
        return images
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bytedance: {e}")
        return []

async def generate_google_imagen_images(prompt, image_count, format_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Google Imagen 4 Ultra"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size = get_replicate_size_for_model('Google Imagen 4 Ultra', format_type)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for i in range(image_count):
            output = replicate.run(
                "google/imagen-4-ultra",
                input={
                    "prompt": prompt,
                    "width": int(size.split('x')[0]),
                    "height": int(size.split('x')[1])
                }
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(output, 'url'):
                image_url = output.url
            elif isinstance(output, list) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output)
            
            if image_url and image_url.startswith('http'):
                images.append(image_url)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < image_count - 1:
                await asyncio.sleep(1)
        
        return images
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Google Imagen: {e}")
        return []

async def generate_luma_photon_images(prompt, image_count, format_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Luma Photon"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size = get_replicate_size_for_model('Luma Photon', format_type)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for i in range(image_count):
            output = replicate.run(
                "luma-ai/luma-photoreal",
                input={
                    "prompt": prompt,
                    "width": int(size.split('x')[0]),
                    "height": int(size.split('x')[1])
                }
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(output, 'url'):
                image_url = output.url
            elif isinstance(output, list) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output)
            
            if image_url and image_url.startswith('http'):
                images.append(image_url)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < image_count - 1:
                await asyncio.sleep(1)
        
        return images
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Luma Photon: {e}")
        return []

async def generate_bria_images(prompt, image_count, format_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bria 3.2"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size = get_replicate_size_for_model('Bria 3.2', format_type)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for i in range(image_count):
            output = replicate.run(
                "briaai/bria-3.2",
                input={
                    "prompt": prompt,
                    "width": int(size.split('x')[0]),
                    "height": int(size.split('x')[1])
                }
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(output, 'url'):
                image_url = output.url
            elif isinstance(output, list) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output)
            
            if image_url and image_url.startswith('http'):
                images.append(image_url)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < image_count - 1:
                await asyncio.sleep(1)
        
        return images
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bria: {e}")
        return []

async def generate_recraft_images(prompt, image_count, format_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Recraft AI"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size = get_replicate_size_for_model('Recraft AI', format_type)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for i in range(image_count):
            output = replicate.run(
                "recraftai/recraft-ai",
                input={
                    "prompt": prompt,
                    "width": int(size.split('x')[0]),
                    "height": int(size.split('x')[1])
                }
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if hasattr(output, 'url'):
                image_url = output.url
            elif isinstance(output, list) and len(output) > 0:
                image_url = output[0]
            else:
                image_url = str(output)
            
            if image_url and image_url.startswith('http'):
                images.append(image_url)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            if i < image_count - 1:
                await asyncio.sleep(1)
        
        return images
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Recraft AI: {e}")
        return []

def main():
    import os
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    load_dotenv()
    
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_env.py –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è Replicate –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not os.getenv('REPLICATE_API_TOKEN'):
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REPLICATE_API_TOKEN")
        print("üí° –î–ª—è Railway –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('stats', stats_command))
    app.add_handler(CommandHandler('ideogram_tips', ideogram_tips_command))
    app.add_handler(CommandHandler('edit_image', edit_image_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, text_handler))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.post_init = setup_commands
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –Ω–∞ Railway
    port = int(os.environ.get('PORT', 0))
    
    if port:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ Railway —Å webhook
        import asyncio
        
        async def start_webhook():
            await app.initialize()
            await app.start()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            webhook_url = f"https://web-production-3dd82.up.railway.app/{TOKEN}"
            print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
            
            try:
                await app.bot.set_webhook(url=webhook_url)
                print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
            try:
                await app.updater.start_webhook(
                    listen="0.0.0.0",
                    port=port,
                    url_path=TOKEN,
                    webhook_url=webhook_url
                )
                print("‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")
                return
            print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            print(f"üåê Webhook URL: {webhook_url}")
            print(f"üîë Token: {TOKEN[:10]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
            try:
                webhook_info = await app.bot.get_webhook_info()
                print(f"üìä Webhook —Å—Ç–∞—Ç—É—Å: {webhook_info}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            try:
                await asyncio.Event().wait()
            except KeyboardInterrupt:
                pass
        
        asyncio.run(start_webhook())
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å polling
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å polling")
        app.run_polling()

if __name__ == '__main__':
    main()
