import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Bria 3.2',

    'Recraft AI'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Bria 3.2':

        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = update.effective_user

    analytics_db.add_user(

        user_id=user.id,

        username=user.username,

        first_name=user.first_name,

        last_name=user.last_name

    )

    analytics_db.update_user_activity(user.id)

    analytics_db.log_action(user.id, "start_command")

    

    welcome_text = """

üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!



–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.



üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å

‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å

‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"

üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.message.reply_text(

        welcome_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )

    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram", callback_data="ideogram_tips")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é

‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],

        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],

        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],

        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen



üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**

‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:

            output = replicate.run(

                "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",

                input={"prompt": "test"}

            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:

            import asyncio

            loop = asyncio.get_event_loop()

            output = await asyncio.wait_for(

                loop.run_in_executor(None, lambda: replicate.run(

                    "ideogram-ai/ideogram-v3-turbo",

                    input={"prompt": "simple test image"}

                )),

                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram

        output = replicate.run(

            "ideogram-ai/ideogram-v3-turbo",

            input={"prompt": "A simple test image of a red apple on a white background, professional photography"}

        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_stats = analytics_db.get_user_stats(user_id)

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "admin_stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    global_stats = analytics_db.get_global_stats(30)

    daily_stats = analytics_db.get_daily_stats(7)

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = client.chat.completions.create(

            model="gpt-4o-mini",

                    messages=[

            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},

            {"role": "user", "content": prompt}

        ],

            max_tokens=700,

            temperature=0.5,

        )

        scenes_text = response.choices[0].message.content.strip()

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts



import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Bria 3.2',

    'Recraft AI'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Bria 3.2':

        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = update.effective_user

    analytics_db.add_user(

        user_id=user.id,

        username=user.username,

        first_name=user.first_name,

        last_name=user.last_name

    )

    analytics_db.update_user_activity(user.id)

    analytics_db.log_action(user.id, "start_command")

    

    welcome_text = """

üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!



–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.



üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å

‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å

‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"

üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.message.reply_text(

        welcome_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )

    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram", callback_data="ideogram_tips")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é

‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],

        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],

        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],

        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen



üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**

‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:

            output = replicate.run(

                "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",

                input={"prompt": "test"}

            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:

            import asyncio

            loop = asyncio.get_event_loop()

            output = await asyncio.wait_for(

                loop.run_in_executor(None, lambda: replicate.run(

                    "ideogram-ai/ideogram-v3-turbo",

                    input={"prompt": "simple test image"}

                )),

                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram

        output = replicate.run(

            "ideogram-ai/ideogram-v3-turbo",

            input={"prompt": "A simple test image of a red apple on a white background, professional photography"}

        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_stats = analytics_db.get_user_stats(user_id)

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "admin_stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    global_stats = analytics_db.get_global_stats(30)

    daily_stats = analytics_db.get_daily_stats(7)

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = client.chat.completions.create(

            model="gpt-4o-mini",

                    messages=[

            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},

            {"role": "user", "content": prompt}

        ],

            max_tokens=700,

            temperature=0.5,

        )

        scenes_text = response.choices[0].message.content.strip()

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts



async def edit_image_with_flux(update, context, state, original_image_url, edit_prompt):

    """

    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro

    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        chat_id = None

        send_text = None

        send_media = None

    

    try:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            await context.bot.send_message(

                chat_id=chat_id,

                text="üé® –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro...",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        if not os.environ.get('REPLICATE_API_TOKEN'):

            logging.error("API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        if not original_image_url or not edit_prompt:

            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {original_image_url}")

        try:

            response = requests.get(original_image_url, timeout=30)

            if response.status_code != 200:

                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {response.status_code})",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")

        except requests.exceptions.Timeout:

            logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        temp_file_path = None

        try:

            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:

                temp_file.write(response.content)

                temp_file_path = temp_file.name

            

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤

            with Image.open(temp_file_path) as img:

                width, height = img.size

            

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FLUX.1 Kontext Pro

            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ FLUX —Å –ø—Ä–æ–º–ø—Ç–æ–º: {edit_prompt}")

            try:

                with open(temp_file_path, "rb") as image_file:

                    output = replicate.run(

                        "black-forest-labs/flux-kontext-pro",

                        input={

                            "input_image": image_file,

                            "prompt": edit_prompt,

                            "aspect_ratio": "match_input_image",

                            "output_format": "jpg",

                            "safety_tolerance": 2,

                            "prompt_upsampling": False

                        }

                    )

                logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç FLUX: {output}")

                logging.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(output)}")

            except Exception as replicate_error:

                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Replicate FLUX: {replicate_error}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ Replicate: {type(replicate_error).__name__}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ FLUX: {str(replicate_error)}",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            edited_image_url = None

            if hasattr(output, 'url'):

                if callable(output.url):

                    edited_image_url = output.url()

                else:

                    edited_image_url = output.url

            elif isinstance(output, list) and len(output) > 0:

                edited_image_url = output[0]

            elif isinstance(output, str):

                edited_image_url = output

            elif hasattr(output, '__getitem__'):

                edited_image_url = output[0] if output else None

            

            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π URL: {edited_image_url}")

            

            if not edited_image_url:

                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ FLUX")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç FLUX",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π

            if not edited_image_url.startswith('http'):

                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_image_url}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            try:

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {edited_image_url}")

                edited_response = requests.get(edited_image_url, timeout=30)

                logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                

                if edited_response.status_code == 200:

                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(edited_response.content)} –±–∞–π—Ç")

                    

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL

                        logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL...")

                        await context.bot.send_photo(

                            chat_id=chat_id,

                            photo=edited_image_url,

                            caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                        )

                        logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            await context.bot.send_message(

                                chat_id=chat_id,

                                text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                reply_markup=InlineKeyboardMarkup(keyboard)

                            )

                            

                    except Exception as send_error:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL: {send_error}")

                        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(send_error).__name__}")

                        

                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞...")

                            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_edited:

                                temp_edited.write(edited_response.content)

                                temp_edited_path = temp_edited.name

                            

                            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_edited_path}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞

                            with open(temp_edited_path, 'rb') as edited_file:

                                await context.bot.send_photo(

                                    chat_id=chat_id,

                                    photo=edited_file,

                                    caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                                )

                            

                            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")

                            

                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                            try:

                                os.unlink(temp_edited_path)

                                logging.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

                            except Exception as cleanup_error:

                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                                

                        except Exception as file_send_error:

                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {file_send_error}")

                            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞: {type(file_send_error).__name__}")

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                        

                else:

                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                    if send_text:

                        keyboard = [

                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                        ]

                        await context.bot.send_message(

                            chat_id=chat_id,

                            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {edited_response.status_code})",

                            reply_markup=InlineKeyboardMarkup(keyboard)

                        )

                        

            except requests.exceptions.Timeout:

                logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

            except Exception as e:

                logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

                logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

        finally:

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

            if temp_file_path and os.path.exists(temp_file_path):

                try:

                    os.unlink(temp_file_path)

                except:

                    pass

        

        return edited_image_url

                

    except Exception as e:

        error_msg = str(e)

        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ edit_image_with_flux: {e}")

        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        

        if "insufficient_credit" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate –¥–ª—è FLUX.1 Kontext Pro\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        elif "api" in error_msg.lower() or "token" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        else:

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_msg}",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        return None

import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Bria 3.2',

    'Recraft AI'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Bria 3.2':

        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é

‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],

        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],

        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],

        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen



üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**

‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:

            output = replicate.run(

                "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",

                input={"prompt": "test"}

            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:

            import asyncio

            loop = asyncio.get_event_loop()

            output = await asyncio.wait_for(

                loop.run_in_executor(None, lambda: replicate.run(

                    "ideogram-ai/ideogram-v3-turbo",

                    input={"prompt": "simple test image"}

                )),

                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram

        output = replicate.run(

            "ideogram-ai/ideogram-v3-turbo",

            input={"prompt": "A simple test image of a red apple on a white background, professional photography"}

        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_stats = analytics_db.get_user_stats(user_id)

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "admin_stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    global_stats = analytics_db.get_global_stats(30)

    daily_stats = analytics_db.get_daily_stats(7)

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = client.chat.completions.create(

            model="gpt-4o-mini",

                    messages=[

            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},

            {"role": "user", "content": prompt}

        ],

            max_tokens=700,

            temperature=0.5,

        )

        scenes_text = response.choices[0].message.content.strip()

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts



async def edit_image_with_flux(update, context, state, original_image_url, edit_prompt):

    """

    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro

    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        chat_id = None

        send_text = None

        send_media = None

    

    try:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            await context.bot.send_message(

                chat_id=chat_id,

                text="üé® –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro...",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        if not os.environ.get('REPLICATE_API_TOKEN'):

            logging.error("API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        if not original_image_url or not edit_prompt:

            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {original_image_url}")

        try:

            response = requests.get(original_image_url, timeout=30)

            if response.status_code != 200:

                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {response.status_code})",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")

        except requests.exceptions.Timeout:

            logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        temp_file_path = None

        try:

            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:

                temp_file.write(response.content)

                temp_file_path = temp_file.name

            

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤

            with Image.open(temp_file_path) as img:

                width, height = img.size

            

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FLUX.1 Kontext Pro

            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ FLUX —Å –ø—Ä–æ–º–ø—Ç–æ–º: {edit_prompt}")

            try:

                with open(temp_file_path, "rb") as image_file:

                    output = replicate.run(

                        "black-forest-labs/flux-kontext-pro",

                        input={

                            "input_image": image_file,

                            "prompt": edit_prompt,

                            "aspect_ratio": "match_input_image",

                            "output_format": "jpg",

                            "safety_tolerance": 2,

                            "prompt_upsampling": False

                        }

                    )

                logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç FLUX: {output}")

                logging.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(output)}")

            except Exception as replicate_error:

                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Replicate FLUX: {replicate_error}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ Replicate: {type(replicate_error).__name__}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ FLUX: {str(replicate_error)}",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            edited_image_url = None

            if hasattr(output, 'url'):

                if callable(output.url):

                    edited_image_url = output.url()

                else:

                    edited_image_url = output.url

            elif isinstance(output, list) and len(output) > 0:

                edited_image_url = output[0]

            elif isinstance(output, str):

                edited_image_url = output

            elif hasattr(output, '__getitem__'):

                edited_image_url = output[0] if output else None

            

            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π URL: {edited_image_url}")

            

            if not edited_image_url:

                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ FLUX")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç FLUX",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π

            if not edited_image_url.startswith('http'):

                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_image_url}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            try:

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {edited_image_url}")

                edited_response = requests.get(edited_image_url, timeout=30)

                logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                

                if edited_response.status_code == 200:

                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(edited_response.content)} –±–∞–π—Ç")

                    

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL

                        logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL...")

                        await context.bot.send_photo(

                            chat_id=chat_id,

                            photo=edited_image_url,

                            caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                        )

                        logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            await context.bot.send_message(

                                chat_id=chat_id,

                                text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                reply_markup=InlineKeyboardMarkup(keyboard)

                            )

                            

                    except Exception as send_error:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL: {send_error}")

                        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(send_error).__name__}")

                        

                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞...")

                            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_edited:

                                temp_edited.write(edited_response.content)

                                temp_edited_path = temp_edited.name

                            

                            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_edited_path}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞

                            with open(temp_edited_path, 'rb') as edited_file:

                                await context.bot.send_photo(

                                    chat_id=chat_id,

                                    photo=edited_file,

                                    caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                                )

                            

                            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")

                            

                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                            try:

                                os.unlink(temp_edited_path)

                                logging.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

                            except Exception as cleanup_error:

                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                                

                        except Exception as file_send_error:

                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {file_send_error}")

                            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞: {type(file_send_error).__name__}")

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                        

                else:

                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                    if send_text:

                        keyboard = [

                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                        ]

                        await context.bot.send_message(

                            chat_id=chat_id,

                            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {edited_response.status_code})",

                            reply_markup=InlineKeyboardMarkup(keyboard)

                        )

                        

            except requests.exceptions.Timeout:

                logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

            except Exception as e:

                logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

                logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

        finally:

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

            if temp_file_path and os.path.exists(temp_file_path):

                try:

                    os.unlink(temp_file_path)

                except:

                    pass

        

        return edited_image_url

                

    except Exception as e:

        error_msg = str(e)

        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ edit_image_with_flux: {e}")

        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        

        if "insufficient_credit" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate –¥–ª—è FLUX.1 Kontext Pro\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        elif "api" in error_msg.lower() or "token" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        else:

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_msg}",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        return None



async def send_images(update, context, state, prompt_type='auto', user_prompt=None, scenes=None):

    """

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 2-3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–æ–º–ø—Ç–∞–º —á–µ—Ä–µ–∑ GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    prompt_type: 'auto' ‚Äî –ø—Ä–æ–º–ø—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, 'user' ‚Äî –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.

    user_prompt: –µ—Å–ª–∏ prompt_type == 'user', –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç.

    """



    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        # fallback

        chat_id = None

        send_text = None

        send_media = None

    user_id = update.effective_user.id

    

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "start_generation", f"format:{state.get('format', 'unknown')}, model:{state.get('image_gen_model', 'unknown')}")

    

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    start_time = time.time()

    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    images = []

    prompts = []

    processed_count = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API —Ç–æ–∫–µ–Ω–æ–≤

    if not os.getenv('REPLICATE_API_TOKEN'):

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text("‚ùå –û—à–∏–±–∫–∞: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.", reply_markup=reply_markup)

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Replicate

    try:

        import replicate

        replicate_client = replicate.Client(api_token=os.getenv('REPLICATE_API_TOKEN'))

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞

        try:

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API

            test_response = replicate.run(

                "replicate/hello-world",

                input={"text": "test"}

            )

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç API —Ä–∞–±–æ—Ç–∞–µ—Ç

        except Exception as e:

            error_msg = str(e).lower()

            if "insufficient_credit" in error_msg or "insufficient credit" in error_msg or "billing" in error_msg:

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await send_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

                return

            elif "unauthorized" in error_msg or "invalid" in error_msg:

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await send_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Replicate API\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

                return

    except Exception as e:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate API: {str(e)[:100]}...\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    free_generations_left = analytics_db.get_free_generations_left(user_id)
    user_credits = analytics_db.get_user_credits(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    selected_model = state.get('image_gen_model', 'Ideogram')
    try:
        from pricing_config import get_generation_cost
        generation_cost = get_generation_cost(selected_model, state.get('format', ''))
    except ImportError:
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        generation_cost = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –∫—Ä–µ–¥–∏—Ç–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    can_generate = False
    if free_generations_left > 0:
        can_generate = True
        generation_type = "free"
    elif user_credits['balance'] >= generation_cost:
        can_generate = True
        generation_type = "credits"
    else:
        can_generate = False
        generation_type = "none"
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not can_generate:
        if send_text:
            keyboard = [
                [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "‚ùå **–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã!**\n\n"
            text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: **{free_generations_left}**\n"
            text += f"ü™ô –ö—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: **{user_credits['balance']}**\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: **{generation_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n\n"
            text += "üí≥ **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!**"
            
            await send_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    user_format = state.get('format', '').lower()

    image_count = state.get('image_count', 'default')

    

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏)

    logging.info(f"–û—Ç–ª–∞–¥–∫–∞: format='{user_format}', image_count='{image_count}', prompt_type='{prompt_type}', user_prompt='{user_prompt}'")

    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    

    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if scenes:

        max_scenes = len(scenes)

    elif image_count == 'all_scenes':

        max_scenes = 7

    elif image_count == 'auto':

        max_scenes = 2  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–∞—á–µ

    elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and image_count == 'default':

        max_scenes = 2  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2

    elif user_format in ['instagram stories'] and image_count == 'default':

        max_scenes = 1  # –î–ª—è Instagram Stories –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    elif user_format in ['instagram post'] and image_count == 'default':

        max_scenes = 2  # –î–ª—è –ø–æ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    elif isinstance(image_count, int):

        max_scenes = min(image_count, 10)  # –º–∞–∫—Å–∏–º—É–º 10

    else:

        max_scenes = 2  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤



    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ 10 (–ª–∏–º–∏—Ç Telegram)

    # –ù–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –µ–≥–æ

    if isinstance(image_count, int):

        max_scenes = min(image_count, 10)  # –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10

    else:

        max_scenes = min(max_scenes, 10)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10

    

    if prompt_type == 'auto':

        # –ï—Å–ª–∏ scenes –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫–∏

        if scenes:

            prompts = scenes[:max_scenes]

        else:

            # –°–æ–∑–¥–∞—ë–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            topic = state.get('topic', '')

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            selected_model = state.get('image_gen_model', 'Ideogram')

            

            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            if selected_model == 'Ideogram':

                # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã

                # Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

                prompts = []

                

                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤

                if max_scenes >= 1:

                    prompts.append(f"{topic}")

                if max_scenes >= 2:

                    prompts.append(f"{topic}, professional design")

                if max_scenes >= 3:

                    prompts.append(f"{topic}, modern style")

                

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤

                prompts = prompts[:max_scenes]

            elif selected_model == 'Bytedance (Seedream-3)':

                # –î–ª—è Bytedance Seedream-3 - –Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è

                prompts = [

                    f"{topic}, high quality, professional, detailed composition, architectural design, modern aesthetic",

                    f"{topic}, premium quality, well balanced, sharp focus, clean design, sophisticated style",

                    f"{topic}, excellent quality, clear details, professional result, contemporary design, elegant composition"

                ][:max_scenes]

            elif selected_model == 'Google Imagen 4 Ultra':

                # –î–ª—è Google Imagen 4 Ultra - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏

                prompts = [

                    f"{topic}, photorealistic, ultra high quality, maximum detail, 8k resolution, professional photography, studio lighting",

                    f"{topic}, hyperrealistic, intricate details, perfect composition, cinematic quality, premium photography",

                    f"{topic}, ultra detailed, professional grade, perfect lighting, high end photography, masterpiece quality"

                ][:max_scenes]

            elif selected_model == 'Luma Photon':

                # –î–ª—è Luma Photon - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

                prompts = [

                    f"{topic}, high quality, detailed, cinematic lighting, creative composition, professional result",

                    f"{topic}, artistic style, excellent quality, creative vision, detailed composition, premium quality",

                    f"{topic}, creative approach, high resolution, professional lighting, detailed result, artistic quality"

                ][:max_scenes]

            elif selected_model == 'Bria 3.2':

                # –î–ª—è Bria 3.2 - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

                prompts = [

                    f"{topic}, professional quality, high resolution, clean composition, commercial grade, safe content",

                    f"{topic}, excellent quality, professional result, clear details, commercial use, premium quality",

                    f"{topic}, high quality, professional photography, detailed composition, commercial standard, clean result"

                ][:max_scenes]

            elif selected_model == 'Recraft AI':

                # –î–ª—è Recraft AI - –¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, SVG

                prompts = [

                    f"{topic}, SVG design, logo style, brand identity, clean composition, professional design, modern aesthetic, vector graphics",

                    f"{topic}, design elements, brand graphics, modern logo concept, clean art style, professional branding, scalable design",

                    f"{topic}, design system, brand design, graphic elements, logo style, professional identity, clean design, vector art"

                ][:max_scenes]

            else:

                # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤

                image_prompts = (

                    f"–¢–µ–º–∞: {topic}\n"

                    f"–°–æ–∑–¥–∞–π {max_scenes} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å {topic} "

                    f"- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —ç–ª–µ–º–µ–Ω—Ç—ã {topic} "

                    f"- –ò—Å–ø–æ–ª—å–∑—É–π: professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–º–µ "

                    f"- –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã {topic} "

                    f"–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º: "

                    f"- –¢—É—Ä–±–∞–∑–∞: 'wooden cabin resort, forest landscape, professional photography', 'russian bathhouse, steam room, traditional design' "

                    f"- –°–ø–æ—Ä—Ç–∑–∞–ª: 'modern gym interior, fitness equipment, professional lighting', 'weight training area, cardio machines, clean design' "

                    f"- –ö–∞—Ñ–µ: 'cozy cafe interior, coffee shop, modern design', 'outdoor seating, garden cafe, comfortable atmosphere' "

                    f"- –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –µ—Å—Ç—å –ª—é–¥–∏: 'beautiful brunette woman in elegant dress', 'attractive woman with long hair', 'gorgeous woman looking at camera' "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫."

                )

                

                try:

                    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

                    response = client.chat.completions.create(

                        model="gpt-4o-mini",

                        messages=[

                            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–º—É –∏ –≤–∫–ª—é—á–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–º–µ."},

                            {"role": "user", "content": image_prompts}

                        ],

                        max_tokens=800,

                        temperature=0.7,

                    )

                    raw_prompts = response.choices[0].message.content.strip()

                    prompts = [p.strip() for p in raw_prompts.split('\n') if p.strip() and not p.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.'))]

                    prompts = prompts[:max_scenes]

                    

                    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã

                    enhanced_prompts = []

                    for prompt in prompts:

                        if len(prompt.split()) < 8:  # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π

                            enhanced_prompt = f"{prompt}, professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting"

                        else:

                            enhanced_prompt = prompt

                        enhanced_prompts.append(enhanced_prompt)

                    prompts = enhanced_prompts

                    

                except Exception as e:

                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

                    prompts = [

                        f"{topic}, professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting",

                        f"{topic}, modern design, contemporary style, professional environment, high quality photography"

                    ][:max_scenes]

    elif prompt_type == 'user' and user_prompt:

        prompts = [user_prompt] * min(3, max_scenes)

    else:

        prompts = [state.get('topic', '')] * min(3, max_scenes)

    

    # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    topic = state.get('topic', '')

    prompts = enhance_prompts_with_character_context(prompts, topic)

    

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

    safe_prompts = []

    blocked_prompts = []

    for prompt in prompts:

        if is_prompt_safe(prompt):

            safe_prompts.append(prompt)

        else:

            blocked_prompts.append(prompt)

    if not safe_prompts:

        if send_text:

            msg = "–í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É."

            if blocked_prompts:

                msg += "\n–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–º–ø—Ç—ã:\n" + "\n".join(blocked_prompts)

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text(msg, reply_markup=reply_markup)

        return

    if blocked_prompts and send_text:

        msg = "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –Ω–µ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n" + "\n".join(blocked_prompts)

        await send_text(msg)

    media = []

    for idx, prompt in enumerate(safe_prompts, 1):

        if idx > max_scenes:

            break

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–æ–º–ø—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Ideogram)

        image_gen_style = state.get('image_gen_style', '')

        selected_model = state.get('image_gen_model', 'Ideogram')

        style_suffix = ''

        

        if image_gen_style and selected_model != 'Ideogram':

            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç–∏–ª–∏

            if image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':

                style_suffix = ', photorealistic, ultra-realistic, high detail, 8k, professional photography, sharp focus, natural lighting, cinematic, award-winning photo'

            elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':

                style_suffix = ', illustration, digital art, high detail, artistic, creative, vibrant colors'

            elif image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':

                style_suffix = ', minimalism, clean, simple, high contrast, modern design, geometric shapes'

            elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':

                style_suffix = ', watercolor, painting, soft colors, artistic, flowing, organic'

            elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':

                style_suffix = ', oil painting, canvas texture, brush strokes, artistic, traditional art'

            elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':

                style_suffix = ', pixel art, 8-bit, retro style, digital art'

        elif image_gen_style and selected_model == 'Ideogram':

            # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏

            if image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':

                style_suffix = ', realistic'

            elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':

                style_suffix = ', illustration'

            elif image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':

                style_suffix = ', minimal'

            elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':

                style_suffix = ', watercolor'

            elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':

                style_suffix = ', oil painting'

            elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':

                style_suffix = ', pixel art'

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Ideogram)

        format_suffix = ''

        user_format = state.get('format', '').lower().replace(' ', '')

        simple_orientation = state.get('simple_orientation', None)

        

        if selected_model == 'Ideogram':

            # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è

            if user_format == 'instagramstories':

                format_suffix = ', vertical'

            elif user_format == 'instagramreels':

                format_suffix = ', vertical'

            elif user_format == 'tiktok':

                format_suffix = ', vertical'

            elif user_format == 'youtubeshorts':

                format_suffix = ', vertical'

            elif user_format == 'instagrampost':

                format_suffix = ', square'

            elif user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

                # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

                if simple_orientation == 'vertical':

                    format_suffix = ', vertical'

                elif simple_orientation == 'square':

                    format_suffix = ', square'

                else:

                    format_suffix = ', square'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π

        else:

            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è

            if user_format == 'instagramstories':

                format_suffix = ', vertical composition, Instagram Stories format, mobile optimized, space for text overlay'

            elif user_format == 'instagramreels':

                format_suffix = ', vertical composition, mobile video format, dynamic composition'

            elif user_format == 'tiktok':

                format_suffix = ', vertical composition, TikTok format, mobile optimized, trending style'

            elif user_format == 'youtubeshorts':

                format_suffix = ', vertical composition, YouTube Shorts format, mobile video optimized'

            elif user_format == 'instagrampost':

                format_suffix = ', square composition, Instagram Post format, social media optimized'

            elif user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

                # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

                if simple_orientation == 'vertical':

                    format_suffix = ', vertical composition, portrait orientation, tall vertical image'

                elif simple_orientation == 'square':

                    format_suffix = ', square composition, balanced layout'

                else:

                    format_suffix = ', square composition, balanced layout'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π

        

        prompt_with_style = prompt + style_suffix + format_suffix

        

        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Ideogram

        if selected_model == 'Ideogram':

            prompt_with_style = improve_prompt_for_ideogram(prompt_with_style)

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –º–æ–¥–µ–ª–∏

        image_size = get_image_size_for_format(user_format, simple_orientation)

        selected_model = state.get('image_gen_model', 'Ideogram')

        simple_orientation = state.get('simple_orientation', None)

        replicate_params = get_replicate_params_for_model(selected_model, user_format, simple_orientation)

        



        

        try:

            if send_text:

                caption = f'–°—Ü–µ–Ω–∞ {idx}: {prompt}' if scenes else f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'

                await send_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx}...')

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            selected_model = state.get('image_gen_model', 'Ideogram')

            

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            if selected_model == 'Ideogram':

                try:

                    if send_text:

                        await send_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Ideogram...\n\nüí° –°–æ–≤–µ—Ç: Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Ideogram –Ω–∞ Replicate —Å —Ç–∞–π–º–∞—É—Ç–æ–º

                    import asyncio

                    try:

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

                        if not os.environ.get('REPLICATE_API_TOKEN'):

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                reply_markup = InlineKeyboardMarkup(keyboard)

                                await send_text(f"‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=reply_markup)

                            continue

                        

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º

                        loop = asyncio.get_event_loop()

                        

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ideogram v3 Turbo (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)

                        try:

                            output = await asyncio.wait_for(

                                loop.run_in_executor(None, lambda: replicate.run(

                                    "ideogram-ai/ideogram-v3-turbo",

                                    input={"prompt": prompt_with_style, **replicate_params}

                                )),

                                timeout=60.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è Ideogram

                            )

                        except Exception as e:

                            # –ï—Å–ª–∏ v3 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º v2

                            logging.warning(f"Ideogram v3 Turbo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –ø—Ä–æ–±—É–µ–º v2...")

                            try:

                                output = await asyncio.wait_for(

                                    loop.run_in_executor(None, lambda: replicate.run(

                                        "ideogram-ai/ideogram-v2",

                                        input={"prompt": prompt_with_style, **replicate_params}

                                    )),

                                    timeout=60.0

                                )

                            except Exception as e2:

                                logging.error(f"Ideogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e2}")

                                if send_text:

                                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                                continue

                        

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

                        image_url = None

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

                        if hasattr(output, 'url'):

                            # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                            image_url = output.url()

                        elif hasattr(output, '__iter__') and not isinstance(output, str):

                            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                            try:

                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                                output_list = list(output)

                                if output_list:

                                    image_url = output_list[0]

                            except Exception as e:

                                if send_text:

                                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                                continue

                        else:

                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                            image_url = output

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ URL

                        if not image_url:

                            if send_text:

                                await send_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Ideogram (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")

                            continue

                        

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

                        if isinstance(image_url, bytes):

                            try:

                                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                                image_url = image_url.decode('utf-8')

                            except UnicodeDecodeError:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                                if send_text:

                                    await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                                continue

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http

                        if not isinstance(image_url, str):

                            if send_text:

                                await send_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Ideogram")

                            continue

                        

                        if not image_url.startswith(('http://', 'https://')):

                            if send_text:

                                await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

                            continue

                            

                    except asyncio.TimeoutError:

                        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ideogram")

                        if send_text:

                            await send_text(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                        continue

                        

                except Exception as e:

                    error_msg = str(e)

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                    if "insufficient_credit" in error_msg.lower() or "insufficient credit" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", reply_markup=reply_markup)

                    elif "api" in error_msg.lower() or "token" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.", reply_markup=reply_markup)

                    else:

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ideogram: {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

                    continue

            elif selected_model == 'Bytedance (Seedream-3)':

                try:

                    if send_text:

                        await send_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)...\n\nüí° –°–æ–≤–µ—Ç: Seedream-3 –ª–∏–¥–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å –Ω–∞—Ç–∏–≤–Ω—ã–º 2K —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bytedance –Ω–∞ Replicate —Å —Ç–∞–π–º–∞—É—Ç–æ–º

                    import asyncio

                    try:

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

                        if not os.environ.get('REPLICATE_API_TOKEN'):

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                reply_markup = InlineKeyboardMarkup(keyboard)

                                await send_text(f"‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=reply_markup)

                            continue

                        

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è 2K –∫–∞—á–µ—Å—Ç–≤–∞

                        loop = asyncio.get_event_loop()

                        

                        output = await asyncio.wait_for(

                            loop.run_in_executor(None, lambda: replicate.run(

                                "bytedance/seedream-3",

                                input={"prompt": prompt_with_style, **replicate_params}

                            )),

                            timeout=180.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 180 —Å–µ–∫—É–Ω–¥ –¥–ª—è Bytedance –Ω–∞—Ç–∏–≤–Ω–æ–π 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

                        )

                        

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

                        image_url = None

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

                        if hasattr(output, 'url'):

                            # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                            image_url = output.url()

                        elif hasattr(output, '__iter__') and not isinstance(output, str):

                            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                            try:

                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                                output_list = list(output)

                                if output_list:

                                    image_url = output_list[0]

                            except Exception as e:

                                if send_text:

                                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                                continue

                        elif hasattr(output, '__getitem__'):

                            image_url = output[0] if output else None

                        elif isinstance(output, (list, tuple)) and len(output) > 0:

                            image_url = output[0]

                        else:

                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                            image_url = str(output) if output else None

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ URL

                        if not image_url:

                            if send_text:

                                await send_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Bytedance (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")

                            continue

                        

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

                        if isinstance(image_url, bytes):

                            try:

                                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                                image_url = image_url.decode('utf-8')

                            except UnicodeDecodeError:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                # Bytedance —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

                                print(f"üîç Bytedance: –ø–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª–∏–Ω–∞: {len(image_url)} –±–∞–π—Ç")
                                
                                try:
                                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                                    import tempfile
                                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                                        temp_file.write(image_url)
                                        temp_path = temp_file.name
                                    
                                    print(f"üîç Bytedance: —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
                                    with open(temp_path, 'rb') as img_file:
                                        if hasattr(update, 'message') and update.message:
                                            await update.message.reply_photo(photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                        else:
                                            await context.bot.send_photo(chat_id=chat_id, photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                                    
                                    print(f"üîç Bytedance: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
                                    
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                                    continue
                                    
                                except Exception as file_error:
                                    print(f"üîç Bytedance: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª: {file_error}")
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                                    
                                    if send_text:

                                        await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Bytedance, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")

                                    continue

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http

                        if not isinstance(image_url, str):

                            if send_text:

                                await send_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Bytedance")

                            continue

                        

                        if not image_url.startswith(('http://', 'https://')):

                            # Bytedance –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                            print(f"üîç Bytedance: URL –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                            if isinstance(image_url, bytes):
                                print(f"üîç Bytedance: –ø–æ–ª—É—á–µ–Ω—ã bytes, –¥–ª–∏–Ω–∞: {len(image_url)}")
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                try:
                                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    import tempfile
                                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                                        temp_file.write(image_url)
                                        temp_path = temp_file.name
                                    
                                    print(f"üîç Bytedance: —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
                                    with open(temp_path, 'rb') as img_file:
                                        if hasattr(update, 'message') and update.message:
                                            await update.message.reply_photo(photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                        else:
                                            await context.bot.send_photo(chat_id=chat_id, photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                                    
                                    print(f"üîç Bytedance: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
                                    
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                                    continue
                                    
                                except Exception as file_error:
                                    print(f"üîç Bytedance: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª: {file_error}")
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                            
                            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                            if send_text:

                                await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç Bytedance\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


                            continue

                            

                    except asyncio.TimeoutError:

                        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bytedance (180 —Å–µ–∫)")

                        if send_text:

                            await send_text(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ 2K –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° Seedream-3 —Ç—Ä–µ–±—É–µ—Ç –¥–æ 3 –º–∏–Ω—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                        continue

                        

                except Exception as e:

                    error_msg = str(e)

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bytedance: {e}")

                    if "insufficient_credit" in error_msg.lower() or "insufficient credit" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", reply_markup=reply_markup)

                    elif "api" in error_msg.lower() or "token" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.", reply_markup=reply_markup)

                    else:

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bytedance: {error_msg[:100]}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

                    continue

            elif selected_model == 'Google Imagen 4 Ultra':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google Imagen 4 –Ω–∞ Replicate

                    output = replicate.run(

                        "google/imagen-4-ultra",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google Imagen 4: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            elif selected_model == 'Luma Photon':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Luma –Ω–∞ Replicate

                    output = replicate.run(

                        "luma/photon",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Luma: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            elif selected_model == 'Bria 3.2':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bria –Ω–∞ Replicate

                    output = replicate.run(

                        "bria/image-3.2",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bria: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            elif selected_model == 'Recraft AI':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Recraft AI –Ω–∞ Replicate

                    output = replicate.run(

                        "recraft-ai/recraft-v3-svg",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ FileOutput –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è Recraft AI

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª SVG

                    if image_url and image_url.endswith('.svg'):

                        if send_text:

                            await send_text("‚ö†Ô∏è Recraft AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª SVG —Ñ–∞–π–ª. Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SVG –Ω–∞–ø—Ä—è–º—É—é.")

                            await send_text("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + image_url)

                            await send_text("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")

                        

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

                        processed_count += 1

                        

                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SVG —Ñ–∞–π–ª–∞

                        continue

                        

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Recraft AI: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue



            else:  # Fallback –Ω–∞ Ideogram

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Ideogram (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)...")

                    

                    # Fallback –Ω–∞ Ideogram –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

                    output = replicate.run(

                        "ideogram-ai/ideogram-v3-turbo",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ideogram: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≠–¢–ê–ü 2: –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Å–ø–∏—Å–æ–∫
            print(f"üîç Seedream-3 –≠–¢–ê–ü 2: –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ images")
            print(f"   image_url = {image_url}")
            print(f"   —Ç–∏–ø image_url = {type(image_url)}")
            print(f"   –¥–ª–∏–Ω–∞ image_url = {len(str(image_url)) if image_url else 'None'}")
            if image_url:
                print(f"   image_url[:15] = {str(image_url)[:15]}")
                print(f"   image_url[-15:] = {str(image_url)[-15:]}")
            images.append(image_url)

            media.append(InputMediaPhoto(media=image_url, caption=caption))
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å URL
            print(f"üîç –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è InputMediaPhoto:")
            print(f"   image_url: {image_url}")
            print(f"   –¥–ª–∏–Ω–∞ image_url: {len(str(image_url)) if image_url else 'None'}")
            print(f"   –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç media: {media[-1].media}")
            print(f"   –¥–ª–∏–Ω–∞ media[-1].media: {len(str(media[-1].media)) if media[-1].media else 'None'}")

            processed_count += 1

            

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        except Exception as e:

            logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {e}")

            if send_text:

                await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")

    if media and send_media:
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ media –≥—Ä—É–ø–ø—ã...")
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(media)}")
        for i, item in enumerate(media):
            print(f"üîç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {item.media}")
            print(f"üîç –î–ª–∏–Ω–∞ URL: {len(str(item.media)) if item.media else 'None'}")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≥—Ä—É–ø–ø—É
            await send_media(media=media)
            print(f"‚úÖ Media –≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as group_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã: {group_error}")
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
            for i, item in enumerate(media):
                try:
                    if hasattr(update, 'message') and update.message:
                        await update.message.reply_photo(photo=item.media, caption=item.caption)
                    else:
                        await context.bot.send_photo(chat_id=chat_id, photo=item.media, caption=item.caption)
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ")
                except Exception as photo_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {photo_error}")
                    if send_text:
                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {str(photo_error)[:100]}")

    elif processed_count == 0 and send_text:

        keyboard = [

            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", callback_data="help_filters")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    generation_time = time.time() - start_time

    selected_model = state.get('image_gen_model', 'Ideogram')

    format_type = state.get('format', 'unknown')

    

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

    if processed_count > 0:

        analytics_db.log_generation(

            user_id=user_id,

            model_name=selected_model,

            format_type=format_type,

            prompt=state.get('topic', 'unknown'),

            image_count=processed_count,

            success=True,

            generation_time=generation_time

        )

        analytics_db.log_action(user_id, "generation_success", f"count:{processed_count}, time:{generation_time:.1f}s")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if generation_type == "free":
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            analytics_db.increment_free_generations(user_id)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –û—Å—Ç–∞–ª–æ—Å—å: {free_generations_left - 1}")
        elif generation_type == "credits":
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            total_cost = generation_cost * processed_count
            if analytics_db.use_credits(user_id, total_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ {selected_model}"):
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {total_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    else:

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        analytics_db.log_generation(

            user_id=user_id,

            model_name=selected_model,

            format_type=format_type,

            prompt=state.get('topic', 'unknown'),

            image_count=0,

            success=False,

            error_message="No images generated",

            generation_time=generation_time

        )

        analytics_db.log_action(user_id, "generation_failed", f"time:{generation_time:.1f}s")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if images:

        state['last_generated_images'] = images

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    state['last_prompt_type'] = prompt_type

    state['last_user_prompt'] = user_prompt

    state['last_settings'] = {

        'model': state.get('image_gen_model', 'Ideogram'),

        'style': state.get('image_gen_style', ''),

        'count': state.get('image_count', 2)

    }

    USER_STATE[user_id] = state

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    if scenes:

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã

        if 'last_scenes' not in state:

            state['last_scenes'] = scenes

            state['total_scenes_count'] = len(scenes)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ

        if 'generated_scenes_count' not in state:

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            state['generated_scenes_count'] = len(scenes[:max_scenes]) if isinstance(max_scenes, int) else len(scenes)

        else:

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

            current_generated = state.get('generated_scenes_count', 0)

            new_scenes_count = len(scenes[:max_scenes]) if isinstance(max_scenes, int) else len(scenes)

            state['generated_scenes_count'] = current_generated + new_scenes_count

    

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    user_format = state.get('format', '').lower()

    if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        last_settings = state.get('last_settings', {})

        settings_text = f"({last_settings.get('model', 'Ideogram')}, {last_settings.get('style', '')}, {last_settings.get('count', 2)} —à—Ç.)"

        

        keyboard = [

            [InlineKeyboardButton(f"üîÑ –° —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ {settings_text}", callback_data="more_images_same_settings")],

            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change_settings")],

            [InlineKeyboardButton("üìù –¢–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if send_text:

            await send_text("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?", reply_markup=reply_markup)

    else:

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        generated_count = state.get('generated_scenes_count', 0)

        total_count = state.get('total_scenes_count', 0)

        

        keyboard = []

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ

        keyboard.append([InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë (—Ç–µ –∂–µ —Å—Ü–µ–Ω—ã)", callback_data="more_images")])

        

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

        if total_count > generated_count:

            remaining_count = total_count - generated_count

            start_scene = generated_count + 1

            end_scene = total_count

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—ã {start_scene}-{end_scene}", callback_data="generate_remaining_scenes")])

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã 1-{total_count}", callback_data="generate_all_scenes")])

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        keyboard.append([InlineKeyboardButton("üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω", callback_data="select_scene_count")])

        

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard.extend([

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="create_video_from_images")],

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data="create_video_from_script")],

        ])

        

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        keyboard.extend([

            [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset")],

        ])

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        if send_text:

            await send_text("–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?", reply_markup=reply_markup)



async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query

    await query.answer()

    user_id = query.from_user.id

    state = USER_STATE.get(user_id, {})

    data = query.data



    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if data == "user_stats":

        analytics_db.update_user_activity(user_id)

        analytics_db.log_action(user_id, "view_stats_button")

        

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        user_stats = analytics_db.get_user_stats(user_id)

        

        if not user_stats:

            await query.edit_message_text(

                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content"),

                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")

                ]])

            )

            return

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

        if user_stats['models_stats']:

            for model, count, avg_time, successful in user_stats['models_stats'][:5]:

                success_rate = (successful / count * 100) if count > 0 else 0

                avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

                stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

        else:

            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        

        stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

        if user_stats['formats_stats']:

            for format_type, count in user_stats['formats_stats'][:5]:

                stats_text += f"‚Ä¢ {format_type}: {count}\n"

        else:

            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        

        keyboard = [

            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        

        await query.edit_message_text(

            stats_text,

            reply_markup=InlineKeyboardMarkup(keyboard)

        )

        return



    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    if data == "help_filters":

        help_filters_text = (

            "üö´ **–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π**\n\n"

            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:\n\n"

            "‚ùå **–ß—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è:**\n"

            "‚Ä¢ –°–ª–æ–≤–∞ —Ç–∏–ø–∞ '—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è', '–∫—Ä–∞—Å–∏–≤–∞—è', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è'\n"

            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è –≤–∑–≥–ª—è–¥–æ–≤: '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', '–ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π –≤–∑–≥–ª—è–¥'\n"

            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏\n\n"

            "‚úÖ **–ö–∞–∫ —Ä–µ—à–∏—Ç—å:**\n"

            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: '–∂–µ–Ω—â–∏–Ω–∞' –≤–º–µ—Å—Ç–æ '–∫—Ä–∞—Å–∏–≤–∞—è'\n"

            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å: Ideogram, Bytedance, Google Imagen\n"

            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'\n"

            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏'\n\n"

            "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"

            "‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ideogram –∏–ª–∏ Bytedance\n"

            "‚Ä¢ –î–ª—è –ø–µ–π–∑–∞–∂–µ–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–¥—Ö–æ–¥—è—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏"

        )

        keyboard = [

            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_filters_text, reply_markup=reply_markup)

    elif data == "ideogram_tips":

        tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

        keyboard = [

            [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(tips_text, reply_markup=reply_markup)

    elif data == "help_image_edit":

        help_image_edit_text = (

            "üì§ **–ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å FLUX**\n\n"

            "FLUX.1 Kontext Pro - —ç—Ç–æ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç.\n\n"

            "üé® **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**\n"

            "‚Ä¢ **–°–º–µ–Ω–∞ —Å—Ç–∏–ª—è**: '–ø—Ä–µ–≤—Ä–∞—Ç–∏ –≤ –∞–∫–≤–∞—Ä–µ–ª—å–Ω—É—é –∂–∏–≤–æ–ø–∏—Å—å', '—Å–¥–µ–ª–∞–π –≤ —Å—Ç–∏–ª–µ –º–∞—Å–ª—è–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏'\n"

            "‚Ä¢ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤**: '–∏–∑–º–µ–Ω–∏ –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –±–æ–±', '–∑–∞–º–µ–Ω–∏ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ –Ω–∞ —Å–∏–Ω–µ–µ'\n"

            "‚Ä¢ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**: '–∑–∞–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç \"—Å—Ç–∞—Ä—ã–π\" –Ω–∞ \"–Ω–æ–≤—ã–π\"'\n"

            "‚Ä¢ **–°–º–µ–Ω–∞ —Ñ–æ–Ω–∞**: '—Å–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –ø–ª—è–∂–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ç–æ–º –∂–µ –ø–æ–ª–æ–∂–µ–Ω–∏–∏'\n"

            "‚Ä¢ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏**: '–∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –ª–∏—Ü–æ —á–µ–ª–æ–≤–µ–∫–∞'\n\n"

            "üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**\n"

            "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã: '–∫–æ—Ä–æ—Ç–∫–∞—è —á–µ—Ä–Ω–∞—è –ø—Ä–∏—á–µ—Å–∫–∞' –≤–º–µ—Å—Ç–æ '–¥—Ä—É–≥–∞—è –ø—Ä–∏—á–µ—Å–∫–∞'\n"

            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: '—Å–æ—Ö—Ä–∞–Ω–∏ –ª–∏—Ü–æ, –∏–∑–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–µ–∂–¥—É'\n"

            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞: '—Å–∏–Ω–µ–µ –ø–ª–∞—Ç—å–µ' –≤–º–µ—Å—Ç–æ '–¥—Ä—É–≥–æ–µ –ø–ª–∞—Ç—å–µ'\n"

            "‚Ä¢ –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏: '–∑–∞–º–µ–Ω–∏ \"—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç\" –Ω–∞ \"–Ω–æ–≤—ã–π\"'\n\n"

            "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"

            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"

            "‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –ª–æ–≥–æ—Ç–∏–ø—ã –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"

            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB"

        )

        keyboard = [

            [InlineKeyboardButton("üì§ –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_image")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_image_edit_text, reply_markup=reply_markup)

    elif data == "retry_generation":

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

        current_step = state.get('step', '')

        if current_step in ['custom_image_prompt', 'custom_image_style', 'simple_image_prompt']:

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É

            if current_step == 'custom_image_prompt':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")

            elif current_step == 'custom_image_style':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

            elif current_step == 'simple_image_prompt':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")

        else:

            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            await show_main_menu(update, context)

    elif data == "create_content":

        await show_format_selection(update, context)

    elif data == "create_simple_images":

        # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        USER_STATE[user_id] = {'step': 'image_gen_model', 'format': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}

        await show_model_selection(update, context)

    elif data == "edit_image":

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        USER_STATE[user_id] = {'step': 'upload_image_for_edit'}

        keyboard = [

            [InlineKeyboardButton("‚ùì –ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="help_image_edit")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        help_text = """üì§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX**



–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.



üí° **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**

‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å (–∞–∫–≤–∞—Ä–µ–ª—å, –º–∞—Å–ª–æ, —ç—Å–∫–∏–∑)

‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–∏—á–µ—Å–∫–∞, –æ–¥–µ–∂–¥–∞, —Ü–≤–µ—Ç–∞)

‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö

‚Ä¢ –°–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ–±—ä–µ–∫—Ç—ã

‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π



üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

2. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å

3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é



‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**

‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB

‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG

‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ø–æ–¥—Ö–æ–¥—è—â–∏–º" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        

        await query.edit_message_text(help_text, reply_markup=reply_markup)

    elif data == "how_to_use":

        await show_how_to_use(update, context)

    elif data == "about_bot":

        await show_about_bot(update, context)

    elif data == "main_menu":

        await show_main_menu(update, context)

    elif data == "format_selection":

        await show_format_selection(update, context)

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–†–ï–î–ò–¢–û–í

    elif data == "subscription_menu":

        await show_subscription_menu(update, context)

    elif data == "credit_packages":

        await show_credit_packages(update, context)

    elif data.startswith("buy_credits:"):

        await handle_credit_purchase(update, context)

    elif data.startswith("check_payment:"):

        await check_payment_status(update, context)

    elif data.startswith('format:'):

        selected_format = data.split(':', 1)[1]

        if selected_format == 'custom':

            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä—É—á–Ω—É—é

            USER_STATE[user_id] = {'step': 'custom_format'}

            await query.edit_message_text(

                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Facebook Post, Twitter, LinkedIn –∏ —Ç.–¥.):",

                reply_markup=InlineKeyboardMarkup([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ])

            )

        elif selected_format == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

            USER_STATE[user_id] = {'step': 'simple_image_orientation', 'format': selected_format}

            keyboard = [

                [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

                [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected_format}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

                reply_markup=reply_markup

            )

        else:

            USER_STATE[user_id] = {'step': STEP_STYLE, 'format': selected_format}

            keyboard = [

                [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

            keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected_format}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

                reply_markup=reply_markup

            )

    elif data.startswith('style:'):

        selected_style = data.split(':', 1)[1]

        if selected_style == 'custom':

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            current_format = state.get('format', '')

            USER_STATE[user_id] = {'step': 'custom_style', 'format': current_format}

            await query.edit_message_text(

                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–µ–ª–æ–≤–æ–π, –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ —Ç.–¥.):",

                reply_markup=InlineKeyboardMarkup([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ])

            )

            return

        else:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

            USER_STATE[user_id]['style'] = selected_style

            USER_STATE[user_id]['step'] = 'image_gen_model'

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {selected_style}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

                reply_markup=reply_markup

            )

    elif data == "style_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

        keyboard = [

            [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

        keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

            reply_markup=reply_markup

        )

    elif data.startswith('image_count:'):

        count_type = data.split(':', 1)[1]

        if count_type == 'default':

            user_format = state.get('format', '').lower()

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

                USER_STATE[user_id]['image_count'] = 'auto'  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞

            elif user_format in ['instagram stories']:

                USER_STATE[user_id]['image_count'] = 1  # –î–ª—è Instagram Stories 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            elif user_format in ['instagram post']:

                USER_STATE[user_id]['image_count'] = 2  # –î–ª—è –ø–æ—Å—Ç–æ–≤ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            else:

                USER_STATE[user_id]['image_count'] = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['step'] = 'image_gen_model'  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="image_count_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                reply_markup=reply_markup

            )

            return

        elif count_type == 'custom':

            USER_STATE[user_id]['step'] = 'custom_image_count'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

    elif data == "image_count_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        user_format = state.get('format', '').lower()

        if user_format in ['reels']:

            default_text = "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ —Ç–µ–∫—Å—Ç–µ"

        elif user_format in ['tiktok']:

            default_text = "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ —Ç–µ–∫—Å—Ç–µ"

        elif user_format in ['instagram stories']:

            default_text = "1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

        elif user_format in ['–ø–æ—Å—Ç']:

            default_text = "2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        else:

            default_text = "2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        keyboard = [

            [InlineKeyboardButton(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_text})", callback_data="image_count:default")],

            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count:custom")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–°—Ç–∏–ª—å: {state.get('style', '')}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

            reply_markup=reply_markup

        )

    elif data.startswith('simple_orientation:'):

        orientation = data.split(':', 1)[1]

        USER_STATE[user_id]['simple_orientation'] = orientation

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        USER_STATE[user_id]['step'] = 'image_gen_model'

        keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_orientation_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        orientation_text = "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)" if orientation == "vertical" else "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)"

        await query.edit_message_text(

            f'–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞: {orientation_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

            reply_markup=reply_markup

        )

    elif data == "simple_orientation_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

        keyboard = [

            [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

            [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

            reply_markup=reply_markup

        )

    elif data.startswith('image_gen_model:'):

        selected_model = data.split(':', 1)[1]

        USER_STATE[user_id]['image_gen_model'] = selected_model

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è Ideogram

        ideogram_tips = ""

        if selected_model == 'Ideogram':

            ideogram_tips = "\n\nüí° **–°–æ–≤–µ—Ç—ã –¥–ª—è Ideogram:**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è\n‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑\n‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ\n‚Ä¢ Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏"

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

            USER_STATE[user_id]['step'] = 'image_gen_style'

            keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="custom_image_style")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {selected_model}{ideogram_tips}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['step'] = 'image_gen_style'

            keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="custom_image_style")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {selected_model}{ideogram_tips}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",

                reply_markup=reply_markup

            )

        return

    elif data == "model_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

                [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

            keyboard = [

                [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

            ]

            keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

                reply_markup=reply_markup

            )

    elif data.startswith('image_gen_style:'):

        selected_img_style = data.split(':', 1)[1]

        USER_STATE[user_id]['image_gen_style'] = selected_img_style

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['step'] = 'image_count_simple'

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {selected_img_style}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã

            USER_STATE[user_id]['step'] = STEP_TOPIC

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞

            format_tips = get_format_tips(user_format)

            message_text = f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {selected_img_style}\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è:\n\n{format_tips}"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                message_text,

                reply_markup=reply_markup

            )

        return

    elif data == "style_gen_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="custom_image_style")])

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–ú–æ–¥–µ–ª—å: {state.get('image_gen_model', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",

            reply_markup=reply_markup

        )

    elif data.startswith('image_count_simple:'):

        count_data = data.split(':', 1)[1]

        if count_data == 'custom':

            USER_STATE[user_id]['step'] = 'custom_image_count_simple'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

        else:

            try:

                count = int(count_data)

                if 1 <= count <= 10:

                    USER_STATE[user_id]['image_count'] = count

                    USER_STATE[user_id]['step'] = 'simple_image_prompt'

                    state = USER_STATE[user_id]

                    

                    keyboard = [

                        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    

                    tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                    

                    await query.edit_message_text(

                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                        reply_markup=reply_markup

                    )

                else:

                    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10:")

            except ValueError:

                await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    elif data == "custom_image_count_simple":

        USER_STATE[user_id]['step'] = 'custom_image_count_simple'

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ç 1 –¥–æ 10):")

        return

    elif data == "more_images":

        user_format = state.get('format', '').lower()

        if user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_scenes' in state:

            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ —Å—Ü–µ–Ω –∑–∞–Ω–æ–≤–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            state['generated_scenes_count'] = 0

            USER_STATE[user_id] = state

            

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º –∂–µ —Å—Ü–µ–Ω–∞–º...')

            await send_images(update, context, state, prompt_type='auto', scenes=state['last_scenes'])

        elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_script' in state:

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞–º...')

            scenes = await extract_scenes_from_script(state['last_script'], user_format)

            state['last_scenes'] = scenes

            await send_images(update, context, state, prompt_type='auto', scenes=scenes)

        else:

            await send_images(update, context, state, prompt_type=state.get('last_prompt_type', 'auto'), user_prompt=state.get('last_user_prompt'))

    elif data == "more_images_same_settings":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...')

            await send_images(update, context, state, prompt_type=state.get('last_prompt_type', 'user'), user_prompt=state.get('last_user_prompt'))

        else:

            # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

            await send_images(update, context, state, prompt_type=state.get('last_prompt_type', 'auto'), user_prompt=state.get('last_user_prompt'))

    elif data == "change_settings":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            USER_STATE[user_id]['step'] = 'image_gen_model'

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

            await show_main_menu(update, context)

    elif data == "reset":

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        USER_STATE[user_id] = {'step': 'main_menu'}

        await show_format_selection(update, context)

    elif data == "custom_image_prompt":

        USER_STATE[user_id]['step'] = 'custom_image_prompt'

        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")

    elif data == "edit_image":

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await edit_image_command(update, context)



    elif data == "back_to_main":

        await show_main_menu(update, context)

    elif data == "custom_image_style":

        USER_STATE[user_id]['step'] = 'custom_image_style'

        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, —è—Ä–∫–∏–π, —Ç–µ–º–Ω—ã–π –∏ —Ç.–¥.):")

    elif data == "generate_images":

        try:

            user_format = state.get('format', '').lower()

            state = USER_STATE.get(user_id, {})

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_scenes' in state:

                await send_images(update, context, state, prompt_type='auto', scenes=state['last_scenes'])

            elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_script' in state:

                scenes = await extract_scenes_from_script(state['last_script'], user_format)

                state['last_scenes'] = scenes

                await send_images(update, context, state, prompt_type='auto', scenes=scenes)

            else:

                await send_images(update, context, state, prompt_type='auto')

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            USER_STATE[user_id] = {'step': STEP_FORMAT}

    elif data.startswith('generate_with_count:'):

        try:

            count = int(data.split(':', 1)[1])

            user_format = state.get('format', '').lower()

            state = USER_STATE.get(user_id, {})

            

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            state['image_count'] = count

            USER_STATE[user_id] = state

            

            if 'last_scenes' in state:

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ü–µ–Ω—ã –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                scenes = state['last_scenes'][:count]

                await send_images(update, context, state, prompt_type='auto', scenes=scenes)

            else:

                await send_images(update, context, state, prompt_type='auto')

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

            USER_STATE[user_id] = {'step': STEP_FORMAT}

    elif data.startswith('simple_image_count:'):

        count_data = data.split(':', 1)[1]

        if count_data == 'custom':

            USER_STATE[user_id]['step'] = 'custom_simple_image_count'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

        else:

            try:

                count = int(count_data)

                if 1 <= count <= 10:

                    USER_STATE[user_id]['image_count'] = count

                    USER_STATE[user_id]['step'] = 'simple_image_prompt'

                    state = USER_STATE[user_id]

                    

                    keyboard = [

                        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    

                    tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                    

                    await query.edit_message_text(

                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                        reply_markup=reply_markup

                    )

                else:

                    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10:")

            except ValueError:

                await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    elif data == "simple_image_prompt_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        USER_STATE[user_id]['step'] = 'simple_image_prompt'

        keyboard = [

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Bria 3.2',

    'Recraft AI'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Bria 3.2':

        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = update.effective_user

    analytics_db.add_user(

        user_id=user.id,

        username=user.username,

        first_name=user.first_name,

        last_name=user.last_name

    )

    analytics_db.update_user_activity(user.id)

    analytics_db.log_action(user.id, "start_command")

    

    welcome_text = """

üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!



–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.



üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å

‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å

‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"

üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.message.reply_text(

        welcome_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )

    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram", callback_data="ideogram_tips")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é

‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],

        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],

        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],

        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen



üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**

‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:

            output = replicate.run(

                "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",

                input={"prompt": "test"}

            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:

            import asyncio

            loop = asyncio.get_event_loop()

            output = await asyncio.wait_for(

                loop.run_in_executor(None, lambda: replicate.run(

                    "ideogram-ai/ideogram-v3-turbo",

                    input={"prompt": "simple test image"}

                )),

                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram

        output = replicate.run(

            "ideogram-ai/ideogram-v3-turbo",

            input={"prompt": "A simple test image of a red apple on a white background, professional photography"}

        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_stats = analytics_db.get_user_stats(user_id)

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "admin_stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    global_stats = analytics_db.get_global_stats(30)

    daily_stats = analytics_db.get_daily_stats(7)

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = client.chat.completions.create(

            model="gpt-4o-mini",

                    messages=[

            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},

            {"role": "user", "content": prompt}

        ],

            max_tokens=700,

            temperature=0.5,

        )

        scenes_text = response.choices[0].message.content.strip()

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts



import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Bria 3.2',

    'Recraft AI'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Bria 3.2':

        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = update.effective_user

    analytics_db.add_user(

        user_id=user.id,

        username=user.username,

        first_name=user.first_name,

        last_name=user.last_name

    )

    analytics_db.update_user_activity(user.id)

    analytics_db.log_action(user.id, "start_command")

    

    welcome_text = """

üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!



–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.



üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å

‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å

‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"

üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.message.reply_text(

        welcome_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )

    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("üé® –°–æ–≤–µ—Ç—ã –ø–æ Ideogram", callback_data="ideogram_tips")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é

‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],

        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],

        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],

        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen



üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**

‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:

            output = replicate.run(

                "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",

                input={"prompt": "test"}

            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:

            import asyncio

            loop = asyncio.get_event_loop()

            output = await asyncio.wait_for(

                loop.run_in_executor(None, lambda: replicate.run(

                    "ideogram-ai/ideogram-v3-turbo",

                    input={"prompt": "simple test image"}

                )),

                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram

        output = replicate.run(

            "ideogram-ai/ideogram-v3-turbo",

            input={"prompt": "A simple test image of a red apple on a white background, professional photography"}

        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_stats = analytics_db.get_user_stats(user_id)

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "admin_stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    global_stats = analytics_db.get_global_stats(30)

    daily_stats = analytics_db.get_daily_stats(7)

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = client.chat.completions.create(

            model="gpt-4o-mini",

                    messages=[

            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},

            {"role": "user", "content": prompt}

        ],

            max_tokens=700,

            temperature=0.5,

        )

        scenes_text = response.choices[0].message.content.strip()

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts



async def edit_image_with_flux(update, context, state, original_image_url, edit_prompt):

    """

    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro

    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        chat_id = None

        send_text = None

        send_media = None

    

    try:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            await context.bot.send_message(

                chat_id=chat_id,

                text="üé® –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro...",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        if not os.environ.get('REPLICATE_API_TOKEN'):

            logging.error("API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        if not original_image_url or not edit_prompt:

            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {original_image_url}")

        try:

            response = requests.get(original_image_url, timeout=30)

            if response.status_code != 200:

                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {response.status_code})",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")

        except requests.exceptions.Timeout:

            logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        temp_file_path = None

        try:

            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:

                temp_file.write(response.content)

                temp_file_path = temp_file.name

            

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤

            with Image.open(temp_file_path) as img:

                width, height = img.size

            

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FLUX.1 Kontext Pro

            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ FLUX —Å –ø—Ä–æ–º–ø—Ç–æ–º: {edit_prompt}")

            try:

                with open(temp_file_path, "rb") as image_file:

                    output = replicate.run(

                        "black-forest-labs/flux-kontext-pro",

                        input={

                            "input_image": image_file,

                            "prompt": edit_prompt,

                            "aspect_ratio": "match_input_image",

                            "output_format": "jpg",

                            "safety_tolerance": 2,

                            "prompt_upsampling": False

                        }

                    )

                logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç FLUX: {output}")

                logging.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(output)}")

            except Exception as replicate_error:

                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Replicate FLUX: {replicate_error}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ Replicate: {type(replicate_error).__name__}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ FLUX: {str(replicate_error)}",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            edited_image_url = None

            if hasattr(output, 'url'):

                if callable(output.url):

                    edited_image_url = output.url()

                else:

                    edited_image_url = output.url

            elif isinstance(output, list) and len(output) > 0:

                edited_image_url = output[0]

            elif isinstance(output, str):

                edited_image_url = output

            elif hasattr(output, '__getitem__'):

                edited_image_url = output[0] if output else None

            

            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π URL: {edited_image_url}")

            

            if not edited_image_url:

                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ FLUX")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç FLUX",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π

            if not edited_image_url.startswith('http'):

                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_image_url}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            try:

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {edited_image_url}")

                edited_response = requests.get(edited_image_url, timeout=30)

                logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                

                if edited_response.status_code == 200:

                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(edited_response.content)} –±–∞–π—Ç")

                    

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL

                        logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL...")

                        await context.bot.send_photo(

                            chat_id=chat_id,

                            photo=edited_image_url,

                            caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                        )

                        logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            await context.bot.send_message(

                                chat_id=chat_id,

                                text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                reply_markup=InlineKeyboardMarkup(keyboard)

                            )

                            

                    except Exception as send_error:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL: {send_error}")

                        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(send_error).__name__}")

                        

                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞...")

                            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_edited:

                                temp_edited.write(edited_response.content)

                                temp_edited_path = temp_edited.name

                            

                            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_edited_path}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞

                            with open(temp_edited_path, 'rb') as edited_file:

                                await context.bot.send_photo(

                                    chat_id=chat_id,

                                    photo=edited_file,

                                    caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                                )

                            

                            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")

                            

                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                            try:

                                os.unlink(temp_edited_path)

                                logging.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

                            except Exception as cleanup_error:

                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                                

                        except Exception as file_send_error:

                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {file_send_error}")

                            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞: {type(file_send_error).__name__}")

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                        

                else:

                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                    if send_text:

                        keyboard = [

                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                        ]

                        await context.bot.send_message(

                            chat_id=chat_id,

                            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {edited_response.status_code})",

                            reply_markup=InlineKeyboardMarkup(keyboard)

                        )

                        

            except requests.exceptions.Timeout:

                logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

            except Exception as e:

                logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

                logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

        finally:

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

            if temp_file_path and os.path.exists(temp_file_path):

                try:

                    os.unlink(temp_file_path)

                except:

                    pass

        

        return edited_image_url

                

    except Exception as e:

        error_msg = str(e)

        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ edit_image_with_flux: {e}")

        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        

        if "insufficient_credit" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate –¥–ª—è FLUX.1 Kontext Pro\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        elif "api" in error_msg.lower() or "token" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        else:

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_msg}",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        return None

import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Bria 3.2',

    'Recraft AI'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Bria 3.2': '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Bria 3.2':

        # Bria –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")],

        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],

        [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]

    ]

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –≤ –ª—é–±–æ–º –º–µ–Ω—é

‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ —á–∞—Ç

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

‚Ä¢ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data="image_gen_model:FLUX.1 Kontext Pro")],

        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],

        [InlineKeyboardButton("üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="image_gen_model:Bria 3.2")],

        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üíº Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen



üí∞ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**

‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ë–ï–°–ü–õ–ê–¢–ù–û

‚Ä¢ üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ - —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

‚Ä¢ üí≥ –î–ª—è –≤–∏–¥–µ–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:

            output = replicate.run(

                "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",

                input={"prompt": "test"}

            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:

            import asyncio

            loop = asyncio.get_event_loop()

            output = await asyncio.wait_for(

                loop.run_in_executor(None, lambda: replicate.run(

                    "ideogram-ai/ideogram-v3-turbo",

                    input={"prompt": "simple test image"}

                )),

                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞

            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram

        output = replicate.run(

            "ideogram-ai/ideogram-v3-turbo",

            input={"prompt": "A simple test image of a red apple on a white background, professional photography"}

        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_stats = analytics_db.get_user_stats(user_id)

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "admin_stats_command")

    

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    global_stats = analytics_db.get_global_stats(30)

    daily_stats = analytics_db.get_daily_stats(7)

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def ideogram_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        response = client.chat.completions.create(

            model="gpt-4o-mini",

                    messages=[

            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},

            {"role": "user", "content": prompt}

        ],

            max_tokens=700,

            temperature=0.5,

        )

        scenes_text = response.choices[0].message.content.strip()

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts



async def edit_image_with_flux(update, context, state, original_image_url, edit_prompt):

    """

    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro

    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        chat_id = None

        send_text = None

        send_media = None

    

    try:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            await context.bot.send_message(

                chat_id=chat_id,

                text="üé® –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro...",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        if not os.environ.get('REPLICATE_API_TOKEN'):

            logging.error("API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        if not original_image_url or not edit_prompt:

            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {original_image_url}")

        try:

            response = requests.get(original_image_url, timeout=30)

            if response.status_code != 200:

                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {response.status_code})",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")

        except requests.exceptions.Timeout:

            logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        temp_file_path = None

        try:

            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:

                temp_file.write(response.content)

                temp_file_path = temp_file.name

            

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤

            with Image.open(temp_file_path) as img:

                width, height = img.size

            

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FLUX.1 Kontext Pro

            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ FLUX —Å –ø—Ä–æ–º–ø—Ç–æ–º: {edit_prompt}")

            try:

                with open(temp_file_path, "rb") as image_file:

                    output = replicate.run(

                        "black-forest-labs/flux-kontext-pro",

                        input={

                            "input_image": image_file,

                            "prompt": edit_prompt,

                            "aspect_ratio": "match_input_image",

                            "output_format": "jpg",

                            "safety_tolerance": 2,

                            "prompt_upsampling": False

                        }

                    )

                logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç FLUX: {output}")

                logging.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(output)}")

            except Exception as replicate_error:

                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Replicate FLUX: {replicate_error}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ Replicate: {type(replicate_error).__name__}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ FLUX: {str(replicate_error)}",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            edited_image_url = None

            if hasattr(output, 'url'):

                if callable(output.url):

                    edited_image_url = output.url()

                else:

                    edited_image_url = output.url

            elif isinstance(output, list) and len(output) > 0:

                edited_image_url = output[0]

            elif isinstance(output, str):

                edited_image_url = output

            elif hasattr(output, '__getitem__'):

                edited_image_url = output[0] if output else None

            

            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π URL: {edited_image_url}")

            

            if not edited_image_url:

                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ FLUX")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç FLUX",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π

            if not edited_image_url.startswith('http'):

                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_image_url}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                return None

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            try:

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {edited_image_url}")

                edited_response = requests.get(edited_image_url, timeout=30)

                logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                

                if edited_response.status_code == 200:

                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(edited_response.content)} –±–∞–π—Ç")

                    

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL

                        logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL...")

                        await context.bot.send_photo(

                            chat_id=chat_id,

                            photo=edited_image_url,

                            caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                        )

                        logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            await context.bot.send_message(

                                chat_id=chat_id,

                                text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                reply_markup=InlineKeyboardMarkup(keyboard)

                            )

                            

                    except Exception as send_error:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL: {send_error}")

                        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(send_error).__name__}")

                        

                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞...")

                            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_edited:

                                temp_edited.write(edited_response.content)

                                temp_edited_path = temp_edited.name

                            

                            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_edited_path}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞

                            with open(temp_edited_path, 'rb') as edited_file:

                                await context.bot.send_photo(

                                    chat_id=chat_id,

                                    photo=edited_file,

                                    caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"

                                )

                            

                            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")

                            

                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                            try:

                                os.unlink(temp_edited_path)

                                logging.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

                            except Exception as cleanup_error:

                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                                

                        except Exception as file_send_error:

                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {file_send_error}")

                            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞: {type(file_send_error).__name__}")

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                                    reply_markup=InlineKeyboardMarkup(keyboard)

                                )

                        

                else:

                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status_code}")

                    if send_text:

                        keyboard = [

                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                        ]

                        await context.bot.send_message(

                            chat_id=chat_id,

                            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {edited_response.status_code})",

                            reply_markup=InlineKeyboardMarkup(keyboard)

                        )

                        

            except requests.exceptions.Timeout:

                logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

            except Exception as e:

                logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

                logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    await context.bot.send_message(

                        chat_id=chat_id,

                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

        finally:

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

            if temp_file_path and os.path.exists(temp_file_path):

                try:

                    os.unlink(temp_file_path)

                except:

                    pass

        

        return edited_image_url

                

    except Exception as e:

        error_msg = str(e)

        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ edit_image_with_flux: {e}")

        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        

        if "insufficient_credit" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate –¥–ª—è FLUX.1 Kontext Pro\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        elif "api" in error_msg.lower() or "token" in error_msg.lower():

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        else:

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_msg}",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

        return None



async def send_images(update, context, state, prompt_type='auto', user_prompt=None, scenes=None):

    """

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 2-3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–æ–º–ø—Ç–∞–º —á–µ—Ä–µ–∑ GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    prompt_type: 'auto' ‚Äî –ø—Ä–æ–º–ø—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, 'user' ‚Äî –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.

    user_prompt: –µ—Å–ª–∏ prompt_type == 'user', –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç.

    """



    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        # fallback

        chat_id = None

        send_text = None

        send_media = None

    user_id = update.effective_user.id

    

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    analytics_db.update_user_activity(user_id)

    analytics_db.log_action(user_id, "start_generation", f"format:{state.get('format', 'unknown')}, model:{state.get('image_gen_model', 'unknown')}")

    

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    start_time = time.time()

    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    images = []

    prompts = []

    processed_count = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API —Ç–æ–∫–µ–Ω–æ–≤

    if not os.getenv('REPLICATE_API_TOKEN'):

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text("‚ùå –û—à–∏–±–∫–∞: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.", reply_markup=reply_markup)

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Replicate

    try:

        import replicate

        replicate_client = replicate.Client(api_token=os.getenv('REPLICATE_API_TOKEN'))

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞

        try:

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API

            test_response = replicate.run(

                "replicate/hello-world",

                input={"text": "test"}

            )

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç API —Ä–∞–±–æ—Ç–∞–µ—Ç

        except Exception as e:

            error_msg = str(e).lower()

            if "insufficient_credit" in error_msg or "insufficient credit" in error_msg or "billing" in error_msg:

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await send_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

                return

            elif "unauthorized" in error_msg or "invalid" in error_msg:

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await send_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Replicate API\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

                return

    except Exception as e:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate API: {str(e)[:100]}...\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    free_generations_left = analytics_db.get_free_generations_left(user_id)
    user_credits = analytics_db.get_user_credits(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    selected_model = state.get('image_gen_model', 'Ideogram')
    try:
        from pricing_config import get_generation_cost
        generation_cost = get_generation_cost(selected_model, state.get('format', ''))
    except ImportError:
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        generation_cost = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –∫—Ä–µ–¥–∏—Ç–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    can_generate = False
    if free_generations_left > 0:
        can_generate = True
        generation_type = "free"
    elif user_credits['balance'] >= generation_cost:
        can_generate = True
        generation_type = "credits"
    else:
        can_generate = False
        generation_type = "none"
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not can_generate:
        if send_text:
            keyboard = [
                [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "‚ùå **–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã!**\n\n"
            text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: **{free_generations_left}**\n"
            text += f"ü™ô –ö—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: **{user_credits['balance']}**\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: **{generation_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n\n"
            text += "üí≥ **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!**"
            
            await send_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    user_format = state.get('format', '').lower()

    image_count = state.get('image_count', 'default')

    

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏)

    logging.info(f"–û—Ç–ª–∞–¥–∫–∞: format='{user_format}', image_count='{image_count}', prompt_type='{prompt_type}', user_prompt='{user_prompt}'")

    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    

    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if scenes:

        max_scenes = len(scenes)

    elif image_count == 'all_scenes':

        max_scenes = 7

    elif image_count == 'auto':

        max_scenes = 2  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–∞—á–µ

    elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and image_count == 'default':

        max_scenes = 2  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2

    elif user_format in ['instagram stories'] and image_count == 'default':

        max_scenes = 1  # –î–ª—è Instagram Stories –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    elif user_format in ['instagram post'] and image_count == 'default':

        max_scenes = 2  # –î–ª—è –ø–æ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    elif isinstance(image_count, int):

        max_scenes = min(image_count, 10)  # –º–∞–∫—Å–∏–º—É–º 10

    else:

        max_scenes = 2  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤



    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ 10 (–ª–∏–º–∏—Ç Telegram)

    # –ù–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –µ–≥–æ

    if isinstance(image_count, int):

        max_scenes = min(image_count, 10)  # –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10

    else:

        max_scenes = min(max_scenes, 10)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10

    

    if prompt_type == 'auto':

        # –ï—Å–ª–∏ scenes –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫–∏

        if scenes:

            prompts = scenes[:max_scenes]

        else:

            # –°–æ–∑–¥–∞—ë–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            topic = state.get('topic', '')

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            selected_model = state.get('image_gen_model', 'Ideogram')

            

            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            if selected_model == 'Ideogram':

                # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã

                # Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

                prompts = []

                

                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤

                if max_scenes >= 1:

                    prompts.append(f"{topic}")

                if max_scenes >= 2:

                    prompts.append(f"{topic}, professional design")

                if max_scenes >= 3:

                    prompts.append(f"{topic}, modern style")

                

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤

                prompts = prompts[:max_scenes]

            elif selected_model == 'Bytedance (Seedream-3)':

                # –î–ª—è Bytedance Seedream-3 - –Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è

                prompts = [

                    f"{topic}, high quality, professional, detailed composition, architectural design, modern aesthetic",

                    f"{topic}, premium quality, well balanced, sharp focus, clean design, sophisticated style",

                    f"{topic}, excellent quality, clear details, professional result, contemporary design, elegant composition"

                ][:max_scenes]

            elif selected_model == 'Google Imagen 4 Ultra':

                # –î–ª—è Google Imagen 4 Ultra - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏

                prompts = [

                    f"{topic}, photorealistic, ultra high quality, maximum detail, 8k resolution, professional photography, studio lighting",

                    f"{topic}, hyperrealistic, intricate details, perfect composition, cinematic quality, premium photography",

                    f"{topic}, ultra detailed, professional grade, perfect lighting, high end photography, masterpiece quality"

                ][:max_scenes]

            elif selected_model == 'Luma Photon':

                # –î–ª—è Luma Photon - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

                prompts = [

                    f"{topic}, high quality, detailed, cinematic lighting, creative composition, professional result",

                    f"{topic}, artistic style, excellent quality, creative vision, detailed composition, premium quality",

                    f"{topic}, creative approach, high resolution, professional lighting, detailed result, artistic quality"

                ][:max_scenes]

            elif selected_model == 'Bria 3.2':

                # –î–ª—è Bria 3.2 - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

                prompts = [

                    f"{topic}, professional quality, high resolution, clean composition, commercial grade, safe content",

                    f"{topic}, excellent quality, professional result, clear details, commercial use, premium quality",

                    f"{topic}, high quality, professional photography, detailed composition, commercial standard, clean result"

                ][:max_scenes]

            elif selected_model == 'Recraft AI':

                # –î–ª—è Recraft AI - –¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, SVG

                prompts = [

                    f"{topic}, SVG design, logo style, brand identity, clean composition, professional design, modern aesthetic, vector graphics",

                    f"{topic}, design elements, brand graphics, modern logo concept, clean art style, professional branding, scalable design",

                    f"{topic}, design system, brand design, graphic elements, logo style, professional identity, clean design, vector art"

                ][:max_scenes]

            else:

                # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤

                image_prompts = (

                    f"–¢–µ–º–∞: {topic}\n"

                    f"–°–æ–∑–¥–∞–π {max_scenes} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å {topic} "

                    f"- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —ç–ª–µ–º–µ–Ω—Ç—ã {topic} "

                    f"- –ò—Å–ø–æ–ª—å–∑—É–π: professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–º–µ "

                    f"- –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã {topic} "

                    f"–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º: "

                    f"- –¢—É—Ä–±–∞–∑–∞: 'wooden cabin resort, forest landscape, professional photography', 'russian bathhouse, steam room, traditional design' "

                    f"- –°–ø–æ—Ä—Ç–∑–∞–ª: 'modern gym interior, fitness equipment, professional lighting', 'weight training area, cardio machines, clean design' "

                    f"- –ö–∞—Ñ–µ: 'cozy cafe interior, coffee shop, modern design', 'outdoor seating, garden cafe, comfortable atmosphere' "

                    f"- –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –µ—Å—Ç—å –ª—é–¥–∏: 'beautiful brunette woman in elegant dress', 'attractive woman with long hair', 'gorgeous woman looking at camera' "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫."

                )

                

                try:

                    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

                    response = client.chat.completions.create(

                        model="gpt-4o-mini",

                        messages=[

                            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–º—É –∏ –≤–∫–ª—é—á–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–º–µ."},

                            {"role": "user", "content": image_prompts}

                        ],

                        max_tokens=800,

                        temperature=0.7,

                    )

                    raw_prompts = response.choices[0].message.content.strip()

                    prompts = [p.strip() for p in raw_prompts.split('\n') if p.strip() and not p.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.'))]

                    prompts = prompts[:max_scenes]

                    

                    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã

                    enhanced_prompts = []

                    for prompt in prompts:

                        if len(prompt.split()) < 8:  # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π

                            enhanced_prompt = f"{prompt}, professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting"

                        else:

                            enhanced_prompt = prompt

                        enhanced_prompts.append(enhanced_prompt)

                    prompts = enhanced_prompts

                    

                except Exception as e:

                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

                    prompts = [

                        f"{topic}, professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting",

                        f"{topic}, modern design, contemporary style, professional environment, high quality photography"

                    ][:max_scenes]

    elif prompt_type == 'user' and user_prompt:

        prompts = [user_prompt] * min(3, max_scenes)

    else:

        prompts = [state.get('topic', '')] * min(3, max_scenes)

    

    # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    topic = state.get('topic', '')

    prompts = enhance_prompts_with_character_context(prompts, topic)

    

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

    safe_prompts = []

    blocked_prompts = []

    for prompt in prompts:

        if is_prompt_safe(prompt):

            safe_prompts.append(prompt)

        else:

            blocked_prompts.append(prompt)

    if not safe_prompts:

        if send_text:

            msg = "–í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É."

            if blocked_prompts:

                msg += "\n–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–º–ø—Ç—ã:\n" + "\n".join(blocked_prompts)

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text(msg, reply_markup=reply_markup)

        return

    if blocked_prompts and send_text:

        msg = "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –Ω–µ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n" + "\n".join(blocked_prompts)

        await send_text(msg)

    media = []

    for idx, prompt in enumerate(safe_prompts, 1):

        if idx > max_scenes:

            break

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–æ–º–ø—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Ideogram)

        image_gen_style = state.get('image_gen_style', '')

        selected_model = state.get('image_gen_model', 'Ideogram')

        style_suffix = ''

        

        if image_gen_style and selected_model != 'Ideogram':

            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç–∏–ª–∏

            if image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':

                style_suffix = ', photorealistic, ultra-realistic, high detail, 8k, professional photography, sharp focus, natural lighting, cinematic, award-winning photo'

            elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':

                style_suffix = ', illustration, digital art, high detail, artistic, creative, vibrant colors'

            elif image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':

                style_suffix = ', minimalism, clean, simple, high contrast, modern design, geometric shapes'

            elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':

                style_suffix = ', watercolor, painting, soft colors, artistic, flowing, organic'

            elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':

                style_suffix = ', oil painting, canvas texture, brush strokes, artistic, traditional art'

            elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':

                style_suffix = ', pixel art, 8-bit, retro style, digital art'

        elif image_gen_style and selected_model == 'Ideogram':

            # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏

            if image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':

                style_suffix = ', realistic'

            elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':

                style_suffix = ', illustration'

            elif image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':

                style_suffix = ', minimal'

            elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':

                style_suffix = ', watercolor'

            elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':

                style_suffix = ', oil painting'

            elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':

                style_suffix = ', pixel art'

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Ideogram)

        format_suffix = ''

        user_format = state.get('format', '').lower().replace(' ', '')

        simple_orientation = state.get('simple_orientation', None)

        

        if selected_model == 'Ideogram':

            # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è

            if user_format == 'instagramstories':

                format_suffix = ', vertical'

            elif user_format == 'instagramreels':

                format_suffix = ', vertical'

            elif user_format == 'tiktok':

                format_suffix = ', vertical'

            elif user_format == 'youtubeshorts':

                format_suffix = ', vertical'

            elif user_format == 'instagrampost':

                format_suffix = ', square'

            elif user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

                # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

                if simple_orientation == 'vertical':

                    format_suffix = ', vertical'

                elif simple_orientation == 'square':

                    format_suffix = ', square'

                else:

                    format_suffix = ', square'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π

        else:

            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è

            if user_format == 'instagramstories':

                format_suffix = ', vertical composition, Instagram Stories format, mobile optimized, space for text overlay'

            elif user_format == 'instagramreels':

                format_suffix = ', vertical composition, mobile video format, dynamic composition'

            elif user_format == 'tiktok':

                format_suffix = ', vertical composition, TikTok format, mobile optimized, trending style'

            elif user_format == 'youtubeshorts':

                format_suffix = ', vertical composition, YouTube Shorts format, mobile video optimized'

            elif user_format == 'instagrampost':

                format_suffix = ', square composition, Instagram Post format, social media optimized'

            elif user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

                # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

                if simple_orientation == 'vertical':

                    format_suffix = ', vertical composition, portrait orientation, tall vertical image'

                elif simple_orientation == 'square':

                    format_suffix = ', square composition, balanced layout'

                else:

                    format_suffix = ', square composition, balanced layout'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π

        

        prompt_with_style = prompt + style_suffix + format_suffix

        

        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Ideogram

        if selected_model == 'Ideogram':

            prompt_with_style = improve_prompt_for_ideogram(prompt_with_style)

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –º–æ–¥–µ–ª–∏

        image_size = get_image_size_for_format(user_format, simple_orientation)

        selected_model = state.get('image_gen_model', 'Ideogram')

        simple_orientation = state.get('simple_orientation', None)

        replicate_params = get_replicate_params_for_model(selected_model, user_format, simple_orientation)

        



        

        try:

            if send_text:

                caption = f'–°—Ü–µ–Ω–∞ {idx}: {prompt}' if scenes else f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'

                await send_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx}...')

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            selected_model = state.get('image_gen_model', 'Ideogram')

            

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            if selected_model == 'Ideogram':

                try:

                    if send_text:

                        await send_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Ideogram...\n\nüí° –°–æ–≤–µ—Ç: Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Ideogram –Ω–∞ Replicate —Å —Ç–∞–π–º–∞—É—Ç–æ–º

                    import asyncio

                    try:

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

                        if not os.environ.get('REPLICATE_API_TOKEN'):

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                reply_markup = InlineKeyboardMarkup(keyboard)

                                await send_text(f"‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=reply_markup)

                            continue

                        

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º

                        loop = asyncio.get_event_loop()

                        

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ideogram v3 Turbo (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)

                        try:

                            output = await asyncio.wait_for(

                                loop.run_in_executor(None, lambda: replicate.run(

                                    "ideogram-ai/ideogram-v3-turbo",

                                    input={"prompt": prompt_with_style, **replicate_params}

                                )),

                                timeout=60.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è Ideogram

                            )

                        except Exception as e:

                            # –ï—Å–ª–∏ v3 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º v2

                            logging.warning(f"Ideogram v3 Turbo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –ø—Ä–æ–±—É–µ–º v2...")

                            try:

                                output = await asyncio.wait_for(

                                    loop.run_in_executor(None, lambda: replicate.run(

                                        "ideogram-ai/ideogram-v2",

                                        input={"prompt": prompt_with_style, **replicate_params}

                                    )),

                                    timeout=60.0

                                )

                            except Exception as e2:

                                logging.error(f"Ideogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e2}")

                                if send_text:

                                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                                continue

                        

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

                        image_url = None

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

                        if hasattr(output, 'url'):

                            # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                            image_url = output.url()

                        elif hasattr(output, '__iter__') and not isinstance(output, str):

                            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                            try:

                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                                output_list = list(output)

                                if output_list:

                                    image_url = output_list[0]

                            except Exception as e:

                                if send_text:

                                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                                continue

                        else:

                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                            image_url = output

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ URL

                        if not image_url:

                            if send_text:

                                await send_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Ideogram (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")

                            continue

                        

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

                        if isinstance(image_url, bytes):

                            try:

                                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                                image_url = image_url.decode('utf-8')

                            except UnicodeDecodeError:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                                if send_text:

                                    await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                                continue

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http

                        if not isinstance(image_url, str):

                            if send_text:

                                await send_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Ideogram")

                            continue

                        

                        if not image_url.startswith(('http://', 'https://')):

                            if send_text:

                                await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

                            continue

                            

                    except asyncio.TimeoutError:

                        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ideogram")

                        if send_text:

                            await send_text(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                        continue

                        

                except Exception as e:

                    error_msg = str(e)

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                    if "insufficient_credit" in error_msg.lower() or "insufficient credit" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", reply_markup=reply_markup)

                    elif "api" in error_msg.lower() or "token" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.", reply_markup=reply_markup)

                    else:

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ideogram: {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

                    continue

            elif selected_model == 'Bytedance (Seedream-3)':

                try:

                    if send_text:

                        await send_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)...\n\nüí° –°–æ–≤–µ—Ç: Seedream-3 –ª–∏–¥–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å –Ω–∞—Ç–∏–≤–Ω—ã–º 2K —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bytedance –Ω–∞ Replicate —Å —Ç–∞–π–º–∞—É—Ç–æ–º

                    import asyncio

                    try:

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

                        if not os.environ.get('REPLICATE_API_TOKEN'):

                            if send_text:

                                keyboard = [

                                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                                ]

                                reply_markup = InlineKeyboardMarkup(keyboard)

                                await send_text(f"‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=reply_markup)

                            continue

                        

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è 2K –∫–∞—á–µ—Å—Ç–≤–∞

                        loop = asyncio.get_event_loop()

                        

                        output = await asyncio.wait_for(

                            loop.run_in_executor(None, lambda: replicate.run(

                                "bytedance/seedream-3",

                                input={"prompt": prompt_with_style, **replicate_params}

                            )),

                            timeout=180.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 180 —Å–µ–∫—É–Ω–¥ –¥–ª—è Bytedance –Ω–∞—Ç–∏–≤–Ω–æ–π 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

                        )

                        

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

                        image_url = None

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

                        if hasattr(output, 'url'):

                            # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                            image_url = output.url()

                        elif hasattr(output, '__iter__') and not isinstance(output, str):

                            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                            try:

                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                                output_list = list(output)

                                if output_list:

                                    image_url = output_list[0]

                            except Exception as e:

                                if send_text:

                                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                                continue

                        elif hasattr(output, '__getitem__'):

                            image_url = output[0] if output else None

                        elif isinstance(output, (list, tuple)) and len(output) > 0:

                            image_url = output[0]

                        else:

                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                            image_url = str(output) if output else None

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ URL

                        if not image_url:

                            if send_text:

                                await send_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Bytedance (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")

                            continue

                        

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

                        if isinstance(image_url, bytes):

                            try:

                                # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                                image_url = image_url.decode('utf-8')

                            except UnicodeDecodeError:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                # Bytedance —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

                                print(f"üîç Bytedance: –ø–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª–∏–Ω–∞: {len(image_url)} –±–∞–π—Ç")
                                
                                try:
                                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                                    import tempfile
                                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                                        temp_file.write(image_url)
                                        temp_path = temp_file.name
                                    
                                    print(f"üîç Bytedance: —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
                                    with open(temp_path, 'rb') as img_file:
                                        if hasattr(update, 'message') and update.message:
                                            await update.message.reply_photo(photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                        else:
                                            await context.bot.send_photo(chat_id=chat_id, photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                                    
                                    print(f"üîç Bytedance: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
                                    
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                                    continue
                                    
                                except Exception as file_error:
                                    print(f"üîç Bytedance: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª: {file_error}")
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                                    
                                    if send_text:

                                        await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Bytedance, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")

                                    continue

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http

                        if not isinstance(image_url, str):

                            if send_text:

                                await send_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Bytedance")

                            continue

                        

                        if not image_url.startswith(('http://', 'https://')):

                            # Bytedance –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                            print(f"üîç Bytedance: URL –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                            if isinstance(image_url, bytes):
                                print(f"üîç Bytedance: –ø–æ–ª—É—á–µ–Ω—ã bytes, –¥–ª–∏–Ω–∞: {len(image_url)}")
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                try:
                                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    import tempfile
                                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                                        temp_file.write(image_url)
                                        temp_path = temp_file.name
                                    
                                    print(f"üîç Bytedance: —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
                                    with open(temp_path, 'rb') as img_file:
                                        if hasattr(update, 'message') and update.message:
                                            await update.message.reply_photo(photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                        else:
                                            await context.bot.send_photo(chat_id=chat_id, photo=img_file, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {topic}")
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                                    
                                    print(f"üîç Bytedance: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
                                    
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                                    continue
                                    
                                except Exception as file_error:
                                    print(f"üîç Bytedance: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª: {file_error}")
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    try:
                                        os.unlink(temp_path)
                                    except:
                                        pass
                            
                            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                            if send_text:

                                await send_text(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç Bytedance\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


                            continue

                            

                    except asyncio.TimeoutError:

                        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bytedance (180 —Å–µ–∫)")

                        if send_text:

                            await send_text(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ 2K –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° Seedream-3 —Ç—Ä–µ–±—É–µ—Ç –¥–æ 3 –º–∏–Ω—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                        continue

                        

                except Exception as e:

                    error_msg = str(e)

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bytedance: {e}")

                    if "insufficient_credit" in error_msg.lower() or "insufficient credit" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", reply_markup=reply_markup)

                    elif "api" in error_msg.lower() or "token" in error_msg.lower():

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.", reply_markup=reply_markup)

                    else:

                        if send_text:

                            keyboard = [

                                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

                            ]

                            reply_markup = InlineKeyboardMarkup(keyboard)

                            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bytedance: {error_msg[:100]}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

                    continue

            elif selected_model == 'Google Imagen 4 Ultra':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google Imagen 4 –Ω–∞ Replicate

                    output = replicate.run(

                        "google/imagen-4-ultra",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google Imagen 4: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            elif selected_model == 'Luma Photon':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Luma –Ω–∞ Replicate

                    output = replicate.run(

                        "luma/photon",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Luma: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            elif selected_model == 'Bria 3.2':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Bria 3.2 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, 4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Bria –Ω–∞ Replicate

                    output = replicate.run(

                        "bria/image-3.2",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bria: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            elif selected_model == 'Recraft AI':

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã)...")

                    

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Recraft AI –Ω–∞ Replicate

                    output = replicate.run(

                        "recraft-ai/recraft-v3-svg",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ FileOutput –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è Recraft AI

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                    

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª SVG

                    if image_url and image_url.endswith('.svg'):

                        if send_text:

                            await send_text("‚ö†Ô∏è Recraft AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª SVG —Ñ–∞–π–ª. Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SVG –Ω–∞–ø—Ä—è–º—É—é.")

                            await send_text("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + image_url)

                            await send_text("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")

                        

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

                        processed_count += 1

                        

                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SVG —Ñ–∞–π–ª–∞

                        continue

                        

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Recraft AI: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue



            else:  # Fallback –Ω–∞ Ideogram

                try:

                    if send_text:

                        await send_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Ideogram (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)...")

                    

                    # Fallback –Ω–∞ Ideogram –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

                    output = replicate.run(

                        "ideogram-ai/ideogram-v3-turbo",

                        input={"prompt": prompt_with_style, **replicate_params}

                    )

                    

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                    if hasattr(output, 'url'):

                        image_url = output.url

                    elif hasattr(output, '__getitem__'):

                        image_url = output[0] if output else None

                    elif isinstance(output, (list, tuple)) and len(output) > 0:

                        image_url = output[0]

                    else:

                        image_url = str(output) if output else None

                except Exception as e:

                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Ideogram: {e}")

                    if send_text:

                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")

                    continue

            

            images.append(image_url)

            media.append(InputMediaPhoto(media=image_url, caption=caption))

            processed_count += 1

            

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        except Exception as e:

            logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {e}")

            if send_text:

                await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")

    if media and send_media:
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ media –≥—Ä—É–ø–ø—ã...")
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(media)}")
        for i, item in enumerate(media):
            print(f"üîç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {item.media}")
            print(f"üîç –î–ª–∏–Ω–∞ URL: {len(str(item.media)) if item.media else 'None'}")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≥—Ä—É–ø–ø—É
            await send_media(media=media)
            print(f"‚úÖ Media –≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as group_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã: {group_error}")
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
            for i, item in enumerate(media):
                try:
                    if hasattr(update, 'message') and update.message:
                        await update.message.reply_photo(photo=item.media, caption=item.caption)
                    else:
                        await context.bot.send_photo(chat_id=chat_id, photo=item.media, caption=item.caption)
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ")
                except Exception as photo_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {photo_error}")

    elif processed_count == 0 and send_text:

        keyboard = [

            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", callback_data="help_filters")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    generation_time = time.time() - start_time

    selected_model = state.get('image_gen_model', 'Ideogram')

    format_type = state.get('format', 'unknown')

    

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

    if processed_count > 0:

        analytics_db.log_generation(

            user_id=user_id,

            model_name=selected_model,

            format_type=format_type,

            prompt=state.get('topic', 'unknown'),

            image_count=processed_count,

            success=True,

            generation_time=generation_time

        )

        analytics_db.log_action(user_id, "generation_success", f"count:{processed_count}, time:{generation_time:.1f}s")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if generation_type == "free":
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            analytics_db.increment_free_generations(user_id)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –û—Å—Ç–∞–ª–æ—Å—å: {free_generations_left - 1}")
        elif generation_type == "credits":
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            total_cost = generation_cost * processed_count
            if analytics_db.use_credits(user_id, total_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ {selected_model}"):
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {total_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    else:

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        analytics_db.log_generation(

            user_id=user_id,

            model_name=selected_model,

            format_type=format_type,

            prompt=state.get('topic', 'unknown'),

            image_count=0,

            success=False,

            error_message="No images generated",

            generation_time=generation_time

        )

        analytics_db.log_action(user_id, "generation_failed", f"time:{generation_time:.1f}s")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if images:

        state['last_generated_images'] = images

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    state['last_prompt_type'] = prompt_type

    state['last_user_prompt'] = user_prompt

    state['last_settings'] = {

        'model': state.get('image_gen_model', 'Ideogram'),

        'style': state.get('image_gen_style', ''),

        'count': state.get('image_count', 2)

    }

    USER_STATE[user_id] = state

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    if scenes:

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã

        if 'last_scenes' not in state:

            state['last_scenes'] = scenes

            state['total_scenes_count'] = len(scenes)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ

        if 'generated_scenes_count' not in state:

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            state['generated_scenes_count'] = len(scenes[:max_scenes]) if isinstance(max_scenes, int) else len(scenes)

        else:

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

            current_generated = state.get('generated_scenes_count', 0)

            new_scenes_count = len(scenes[:max_scenes]) if isinstance(max_scenes, int) else len(scenes)

            state['generated_scenes_count'] = current_generated + new_scenes_count

    

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    user_format = state.get('format', '').lower()

    if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        last_settings = state.get('last_settings', {})

        settings_text = f"({last_settings.get('model', 'Ideogram')}, {last_settings.get('style', '')}, {last_settings.get('count', 2)} —à—Ç.)"

        

        keyboard = [

            [InlineKeyboardButton(f"üîÑ –° —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ {settings_text}", callback_data="more_images_same_settings")],

            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change_settings")],

            [InlineKeyboardButton("üìù –¢–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if send_text:

            await send_text("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?", reply_markup=reply_markup)

    else:

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        generated_count = state.get('generated_scenes_count', 0)

        total_count = state.get('total_scenes_count', 0)

        

        keyboard = []

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ

        keyboard.append([InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë (—Ç–µ –∂–µ —Å—Ü–µ–Ω—ã)", callback_data="more_images")])

        

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

        if total_count > generated_count:

            remaining_count = total_count - generated_count

            start_scene = generated_count + 1

            end_scene = total_count

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—ã {start_scene}-{end_scene}", callback_data="generate_remaining_scenes")])

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã 1-{total_count}", callback_data="generate_all_scenes")])

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        keyboard.append([InlineKeyboardButton("üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω", callback_data="select_scene_count")])

        

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard.extend([

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="create_video_from_images")],

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data="create_video_from_script")],

        ])

        

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        keyboard.extend([

            [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset")],

        ])

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        if send_text:

            await send_text("–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?", reply_markup=reply_markup)



async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query

    await query.answer()

    user_id = query.from_user.id

    state = USER_STATE.get(user_id, {})

    data = query.data



    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if data == "user_stats":

        analytics_db.update_user_activity(user_id)

        analytics_db.log_action(user_id, "view_stats_button")

        

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        user_stats = analytics_db.get_user_stats(user_id)

        

        if not user_stats:

            await query.edit_message_text(

                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content"),

                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")

                ]])

            )

            return

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats['first_seen'][:10]}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:10]}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

        if user_stats['models_stats']:

            for model, count, avg_time, successful in user_stats['models_stats'][:5]:

                success_rate = (successful / count * 100) if count > 0 else 0

                avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

                stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

        else:

            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        

        stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

        if user_stats['formats_stats']:

            for format_type, count in user_stats['formats_stats'][:5]:

                stats_text += f"‚Ä¢ {format_type}: {count}\n"

        else:

            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        

        keyboard = [

            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_content")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        

        await query.edit_message_text(

            stats_text,

            reply_markup=InlineKeyboardMarkup(keyboard)

        )

        return



    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    if data == "help_filters":

        help_filters_text = (

            "üö´ **–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π**\n\n"

            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:\n\n"

            "‚ùå **–ß—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è:**\n"

            "‚Ä¢ –°–ª–æ–≤–∞ —Ç–∏–ø–∞ '—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è', '–∫—Ä–∞—Å–∏–≤–∞—è', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è'\n"

            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è –≤–∑–≥–ª—è–¥–æ–≤: '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', '–ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π –≤–∑–≥–ª—è–¥'\n"

            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏\n\n"

            "‚úÖ **–ö–∞–∫ —Ä–µ—à–∏—Ç—å:**\n"

            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: '–∂–µ–Ω—â–∏–Ω–∞' –≤–º–µ—Å—Ç–æ '–∫—Ä–∞—Å–∏–≤–∞—è'\n"

            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å: Ideogram, Bytedance, Google Imagen\n"

            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'\n"

            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏'\n\n"

            "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"

            "‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ideogram –∏–ª–∏ Bytedance\n"

            "‚Ä¢ –î–ª—è –ø–µ–π–∑–∞–∂–µ–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–¥—Ö–æ–¥—è—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏"

        )

        keyboard = [

            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_filters_text, reply_markup=reply_markup)

    elif data == "ideogram_tips":

        tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

        keyboard = [

            [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_content")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(tips_text, reply_markup=reply_markup)

    elif data == "help_image_edit":

        help_image_edit_text = (

            "üì§ **–ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å FLUX**\n\n"

            "FLUX.1 Kontext Pro - —ç—Ç–æ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç.\n\n"

            "üé® **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**\n"

            "‚Ä¢ **–°–º–µ–Ω–∞ —Å—Ç–∏–ª—è**: '–ø—Ä–µ–≤—Ä–∞—Ç–∏ –≤ –∞–∫–≤–∞—Ä–µ–ª—å–Ω—É—é –∂–∏–≤–æ–ø–∏—Å—å', '—Å–¥–µ–ª–∞–π –≤ —Å—Ç–∏–ª–µ –º–∞—Å–ª—è–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏'\n"

            "‚Ä¢ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤**: '–∏–∑–º–µ–Ω–∏ –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –±–æ–±', '–∑–∞–º–µ–Ω–∏ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ –Ω–∞ —Å–∏–Ω–µ–µ'\n"

            "‚Ä¢ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**: '–∑–∞–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç \"—Å—Ç–∞—Ä—ã–π\" –Ω–∞ \"–Ω–æ–≤—ã–π\"'\n"

            "‚Ä¢ **–°–º–µ–Ω–∞ —Ñ–æ–Ω–∞**: '—Å–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –ø–ª—è–∂–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ç–æ–º –∂–µ –ø–æ–ª–æ–∂–µ–Ω–∏–∏'\n"

            "‚Ä¢ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏**: '–∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –ª–∏—Ü–æ —á–µ–ª–æ–≤–µ–∫–∞'\n\n"

            "üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**\n"

            "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã: '–∫–æ—Ä–æ—Ç–∫–∞—è —á–µ—Ä–Ω–∞—è –ø—Ä–∏—á–µ—Å–∫–∞' –≤–º–µ—Å—Ç–æ '–¥—Ä—É–≥–∞—è –ø—Ä–∏—á–µ—Å–∫–∞'\n"

            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: '—Å–æ—Ö—Ä–∞–Ω–∏ –ª–∏—Ü–æ, –∏–∑–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–µ–∂–¥—É'\n"

            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞: '—Å–∏–Ω–µ–µ –ø–ª–∞—Ç—å–µ' –≤–º–µ—Å—Ç–æ '–¥—Ä—É–≥–æ–µ –ø–ª–∞—Ç—å–µ'\n"

            "‚Ä¢ –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏: '–∑–∞–º–µ–Ω–∏ \"—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç\" –Ω–∞ \"–Ω–æ–≤—ã–π\"'\n\n"

            "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"

            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"

            "‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –ª–æ–≥–æ—Ç–∏–ø—ã –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"

            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB"

        )

        keyboard = [

            [InlineKeyboardButton("üì§ –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_image")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_image_edit_text, reply_markup=reply_markup)

    elif data == "retry_generation":

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

        current_step = state.get('step', '')

        if current_step in ['custom_image_prompt', 'custom_image_style', 'simple_image_prompt']:

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É

            if current_step == 'custom_image_prompt':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")

            elif current_step == 'custom_image_style':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

            elif current_step == 'simple_image_prompt':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")

        else:

            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            await show_main_menu(update, context)

    elif data == "create_content":

        await show_format_selection(update, context)

    elif data == "create_simple_images":

        # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        USER_STATE[user_id] = {'step': 'image_gen_model', 'format': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}

        await show_model_selection(update, context)

    elif data == "edit_image":

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        USER_STATE[user_id] = {'step': 'upload_image_for_edit'}

        keyboard = [

            [InlineKeyboardButton("‚ùì –ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="help_image_edit")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        help_text = """üì§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX**



–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.



üí° **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**

‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å (–∞–∫–≤–∞—Ä–µ–ª—å, –º–∞—Å–ª–æ, —ç—Å–∫–∏–∑)

‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–∏—á–µ—Å–∫–∞, –æ–¥–µ–∂–¥–∞, —Ü–≤–µ—Ç–∞)

‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö

‚Ä¢ –°–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ–±—ä–µ–∫—Ç—ã

‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π



üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

2. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å

3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é



‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**

‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB

‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG

‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ø–æ–¥—Ö–æ–¥—è—â–∏–º" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        

        await query.edit_message_text(help_text, reply_markup=reply_markup)

    elif data == "how_to_use":

        await show_how_to_use(update, context)

    elif data == "about_bot":

        await show_about_bot(update, context)

    elif data == "main_menu":

        await show_main_menu(update, context)

    elif data == "format_selection":

        await show_format_selection(update, context)

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–†–ï–î–ò–¢–û–í

    elif data == "subscription_menu":

        await show_subscription_menu(update, context)

    elif data == "credit_packages":

        await show_credit_packages(update, context)

    elif data.startswith("buy_credits:"):

        await handle_credit_purchase(update, context)

    elif data.startswith("check_payment:"):

        await check_payment_status(update, context)

    elif data.startswith('format:'):

        selected_format = data.split(':', 1)[1]

        if selected_format == 'custom':

            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä—É—á–Ω—É—é

            USER_STATE[user_id] = {'step': 'custom_format'}

            await query.edit_message_text(

                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Facebook Post, Twitter, LinkedIn –∏ —Ç.–¥.):",

                reply_markup=InlineKeyboardMarkup([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ])

            )

        elif selected_format == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

            USER_STATE[user_id] = {'step': 'simple_image_orientation', 'format': selected_format}

            keyboard = [

                [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

                [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected_format}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

                reply_markup=reply_markup

            )

        else:

            USER_STATE[user_id] = {'step': STEP_STYLE, 'format': selected_format}

            keyboard = [

                [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

            keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected_format}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

                reply_markup=reply_markup

            )

    elif data.startswith('style:'):

        selected_style = data.split(':', 1)[1]

        if selected_style == 'custom':

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            current_format = state.get('format', '')

            USER_STATE[user_id] = {'step': 'custom_style', 'format': current_format}

            await query.edit_message_text(

                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–µ–ª–æ–≤–æ–π, –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ —Ç.–¥.):",

                reply_markup=InlineKeyboardMarkup([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ])

            )

            return

        else:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

            USER_STATE[user_id]['style'] = selected_style

            USER_STATE[user_id]['step'] = 'image_gen_model'

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {selected_style}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

                reply_markup=reply_markup

            )

    elif data == "style_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

        keyboard = [

            [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

        keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

            reply_markup=reply_markup

        )

    elif data.startswith('image_count:'):

        count_type = data.split(':', 1)[1]

        if count_type == 'default':

            user_format = state.get('format', '').lower()

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

                USER_STATE[user_id]['image_count'] = 'auto'  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞

            elif user_format in ['instagram stories']:

                USER_STATE[user_id]['image_count'] = 1  # –î–ª—è Instagram Stories 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            elif user_format in ['instagram post']:

                USER_STATE[user_id]['image_count'] = 2  # –î–ª—è –ø–æ—Å—Ç–æ–≤ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            else:

                USER_STATE[user_id]['image_count'] = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['step'] = 'image_gen_model'  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="image_count_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                reply_markup=reply_markup

            )

            return

        elif count_type == 'custom':

            USER_STATE[user_id]['step'] = 'custom_image_count'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

    elif data == "image_count_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        user_format = state.get('format', '').lower()

        if user_format in ['reels']:

            default_text = "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ —Ç–µ–∫—Å—Ç–µ"

        elif user_format in ['tiktok']:

            default_text = "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ —Ç–µ–∫—Å—Ç–µ"

        elif user_format in ['instagram stories']:

            default_text = "1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

        elif user_format in ['–ø–æ—Å—Ç']:

            default_text = "2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        else:

            default_text = "2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        keyboard = [

            [InlineKeyboardButton(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_text})", callback_data="image_count:default")],

            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count:custom")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–°—Ç–∏–ª—å: {state.get('style', '')}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

            reply_markup=reply_markup

        )

    elif data.startswith('simple_orientation:'):

        orientation = data.split(':', 1)[1]

        USER_STATE[user_id]['simple_orientation'] = orientation

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        USER_STATE[user_id]['step'] = 'image_gen_model'

        keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_orientation_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        orientation_text = "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)" if orientation == "vertical" else "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)"

        await query.edit_message_text(

            f'–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞: {orientation_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

            reply_markup=reply_markup

        )

    elif data == "simple_orientation_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

        keyboard = [

            [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

            [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

            reply_markup=reply_markup

        )

    elif data.startswith('image_gen_model:'):

        selected_model = data.split(':', 1)[1]

        USER_STATE[user_id]['image_gen_model'] = selected_model

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è Ideogram

        ideogram_tips = ""

        if selected_model == 'Ideogram':

            ideogram_tips = "\n\nüí° **–°–æ–≤–µ—Ç—ã –¥–ª—è Ideogram:**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è\n‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑\n‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ\n‚Ä¢ Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏"

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

            USER_STATE[user_id]['step'] = 'image_gen_style'

            keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="custom_image_style")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {selected_model}{ideogram_tips}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['step'] = 'image_gen_style'

            keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="custom_image_style")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {selected_model}{ideogram_tips}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",

                reply_markup=reply_markup

            )

        return

    elif data == "model_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

                [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

            keyboard = [

                [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

            ]

            keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

                reply_markup=reply_markup

            )

    elif data.startswith('image_gen_style:'):

        selected_img_style = data.split(':', 1)[1]

        USER_STATE[user_id]['image_gen_style'] = selected_img_style

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['step'] = 'image_count_simple'

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {selected_img_style}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã

            USER_STATE[user_id]['step'] = STEP_TOPIC

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞

            format_tips = get_format_tips(user_format)

            message_text = f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {selected_img_style}\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è:\n\n{format_tips}"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                message_text,

                reply_markup=reply_markup

            )

        return

    elif data == "style_gen_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="custom_image_style")])

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–ú–æ–¥–µ–ª—å: {state.get('image_gen_model', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",

            reply_markup=reply_markup

        )

    elif data.startswith('image_count_simple:'):

        count_data = data.split(':', 1)[1]

        if count_data == 'custom':

            USER_STATE[user_id]['step'] = 'custom_image_count_simple'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

        else:

            try:

                count = int(count_data)

                if 1 <= count <= 10:

                    USER_STATE[user_id]['image_count'] = count

                    USER_STATE[user_id]['step'] = 'simple_image_prompt'

                    state = USER_STATE[user_id]

                    

                    keyboard = [

                        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    

                    tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                    

                    await query.edit_message_text(

                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                        reply_markup=reply_markup

                    )

                else:

                    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10:")

            except ValueError:

                await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    elif data == "custom_image_count_simple":

        USER_STATE[user_id]['step'] = 'custom_image_count_simple'

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ç 1 –¥–æ 10):")

        return

    elif data == "more_images":

        user_format = state.get('format', '').lower()

        if user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_scenes' in state:

            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ —Å—Ü–µ–Ω –∑–∞–Ω–æ–≤–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            state['generated_scenes_count'] = 0

            USER_STATE[user_id] = state

            

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º –∂–µ —Å—Ü–µ–Ω–∞–º...')

            await send_images(update, context, state, prompt_type='auto', scenes=state['last_scenes'])

        elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_script' in state:

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞–º...')

            scenes = await extract_scenes_from_script(state['last_script'], user_format)

            state['last_scenes'] = scenes

            await send_images(update, context, state, prompt_type='auto', scenes=scenes)

        else:

            await send_images(update, context, state, prompt_type=state.get('last_prompt_type', 'auto'), user_prompt=state.get('last_user_prompt'))

    elif data == "more_images_same_settings":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...')

            await send_images(update, context, state, prompt_type=state.get('last_prompt_type', 'user'), user_prompt=state.get('last_user_prompt'))

        else:

            # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

            await send_images(update, context, state, prompt_type=state.get('last_prompt_type', 'auto'), user_prompt=state.get('last_user_prompt'))

    elif data == "change_settings":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            USER_STATE[user_id]['step'] = 'image_gen_model'

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

            await show_main_menu(update, context)

    elif data == "reset":

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        USER_STATE[user_id] = {'step': 'main_menu'}

        await show_format_selection(update, context)

    elif data == "custom_image_prompt":

        USER_STATE[user_id]['step'] = 'custom_image_prompt'

        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")

    elif data == "edit_image":

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await edit_image_command(update, context)



    elif data == "back_to_main":

        await show_main_menu(update, context)

    elif data == "custom_image_style":

        USER_STATE[user_id]['step'] = 'custom_image_style'

        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, —è—Ä–∫–∏–π, —Ç–µ–º–Ω—ã–π –∏ —Ç.–¥.):")

    elif data == "generate_images":

        try:

            user_format = state.get('format', '').lower()

            state = USER_STATE.get(user_id, {})

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_scenes' in state:

                await send_images(update, context, state, prompt_type='auto', scenes=state['last_scenes'])

            elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_script' in state:

                scenes = await extract_scenes_from_script(state['last_script'], user_format)

                state['last_scenes'] = scenes

                await send_images(update, context, state, prompt_type='auto', scenes=scenes)

            else:

                await send_images(update, context, state, prompt_type='auto')

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            USER_STATE[user_id] = {'step': STEP_FORMAT}

    elif data.startswith('generate_with_count:'):

        try:

            count = int(data.split(':', 1)[1])

            user_format = state.get('format', '').lower()

            state = USER_STATE.get(user_id, {})

            

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            state['image_count'] = count

            USER_STATE[user_id] = state

            

            if 'last_scenes' in state:

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ü–µ–Ω—ã –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                scenes = state['last_scenes'][:count]

                await send_images(update, context, state, prompt_type='auto', scenes=scenes)

            else:

                await send_images(update, context, state, prompt_type='auto')

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

            USER_STATE[user_id] = {'step': STEP_FORMAT}

    elif data.startswith('simple_image_count:'):

        count_data = data.split(':', 1)[1]

        if count_data == 'custom':

            USER_STATE[user_id]['step'] = 'custom_simple_image_count'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

        else:

            try:

                count = int(count_data)

                if 1 <= count <= 10:

                    USER_STATE[user_id]['image_count'] = count

                    USER_STATE[user_id]['step'] = 'simple_image_prompt'

                    state = USER_STATE[user_id]

                    

                    keyboard = [

                        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    

                    tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                    

                    await query.edit_message_text(

                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                        reply_markup=reply_markup

                    )

                else:

                    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10:")

            except ValueError:

                await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    elif data == "simple_image_prompt_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        USER_STATE[user_id]['step'] = 'simple_image_prompt'

        keyboard = [

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

        

        await query.edit_message_text(

            f"–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

            reply_markup=reply_markup

        )

    elif data == "simple_image_count_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        USER_STATE[user_id]['step'] = 'image_count_simple'

        keyboard = [

            [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="simple_image_count:1")],

            [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="simple_image_count:2")],

            [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="simple_image_count:3")],

            [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="simple_image_count:4")],

            [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="simple_image_count:5")],

            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="simple_image_count:custom")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {state.get('image_gen_style', '')}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

            reply_markup=reply_markup

        )

    elif data == "custom_count_after_text":

        USER_STATE[user_id]['step'] = 'custom_count_after_text'

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

    elif data == "generate_remaining_scenes":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ü–µ–Ω

        try:

            user_format = state.get('format', '').lower()

            if 'last_scenes' in state and 'generated_scenes_count' in state:

                generated_count = state.get('generated_scenes_count', 0)

                total_scenes = state.get('last_scenes', [])

                

                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ü–µ–Ω—ã

                remaining_scenes = total_scenes[generated_count:]

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ü–µ–Ω

                state['image_count'] = len(remaining_scenes)

                

                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã send_images –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª–∞ –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã

                state['generated_scenes_count'] = generated_count

                USER_STATE[user_id] = state

                

                await query.edit_message_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {len(remaining_scenes)} —Å—Ü–µ–Ω...')

                await send_images(update, context, state, prompt_type='auto', scenes=remaining_scenes)

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    elif data == "generate_all_scenes":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω

        try:

            user_format = state.get('format', '').lower()

            if 'last_scenes' in state:

                all_scenes = state.get('last_scenes', [])

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Å–µ—Ö —Å—Ü–µ–Ω

                state['image_count'] = len(all_scenes)

                

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã –∑–∞–Ω–æ–≤–æ

                state['generated_scenes_count'] = 0

                USER_STATE[user_id] = state

                

                await query.edit_message_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö {len(all_scenes)} —Å—Ü–µ–Ω...')

                await send_images(update, context, state, prompt_type='auto', scenes=all_scenes)

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    elif data == "generate_more":

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        USER_STATE[user_id] = {'step': 'main_menu'}

        await show_format_selection(update, context)

    elif data == "select_scene_count":

        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω

        try:

            user_format = state.get('format', '').lower()

            if 'last_scenes' in state:

                total_scenes = state.get('last_scenes', [])

                generated_count = state.get('generated_scenes_count', 0)

                

                keyboard = []

                

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ü–µ–Ω

                remaining_count = len(total_scenes) - generated_count

                if remaining_count > 0:

                    for i in range(1, min(remaining_count + 1, 6)):  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫

                        start_scene = generated_count + 1

                        end_scene = generated_count + i

                        if i == 1:

                            scene_text = f"–°—Ü–µ–Ω–∞ {start_scene}"

                        else:

                            scene_text = f"–°—Ü–µ–Ω—ã {start_scene}-{end_scene}"

                        keyboard.append([InlineKeyboardButton(scene_text, callback_data=f"generate_scenes_count:{i}")])

                

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω

                keyboard.append([InlineKeyboardButton(f"–í—Å–µ —Å—Ü–µ–Ω—ã 1-{len(total_scenes)}", callback_data=f"generate_scenes_count:{len(total_scenes)}")])

                

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                keyboard.append([InlineKeyboardButton("üî¢ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_scene_count")])

                

                # –ù–∞–≤–∏–≥–∞—Ü–∏—è

                keyboard.extend([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")],

                ])

                

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(

                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"

                    f"–í—Å–µ–≥–æ —Å—Ü–µ–Ω: {len(total_scenes)}\n"

                    f"–£–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ü–µ–Ω—ã 1-{generated_count}\n"

                    f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Å—Ü–µ–Ω—ã {generated_count + 1}-{len(total_scenes)}",

                    reply_markup=reply_markup

                )

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: {e}")

    elif data.startswith('generate_scenes_count:'):

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω

        try:

            count = int(data.split(':', 1)[1])

            user_format = state.get('format', '').lower()

            

            if 'last_scenes' in state:

                all_scenes = state.get('last_scenes', [])

                generated_count = state.get('generated_scenes_count', 0)

                

                # –ë–µ—Ä–µ–º —Å—Ü–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

                scenes_to_generate = all_scenes[generated_count:generated_count + count]

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω

                state['image_count'] = len(scenes_to_generate)

                

                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã send_images –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª–∞ –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã

                state['generated_scenes_count'] = generated_count

                USER_STATE[user_id] = state

                

                await query.edit_message_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {len(scenes_to_generate)} —Å—Ü–µ–Ω...')

                await send_images(update, context, state, prompt_type='auto', scenes=scenes_to_generate)

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    elif data == "custom_scene_count":

        # –ó–∞–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω

        USER_STATE[user_id]['step'] = 'custom_scene_count'

        total_scenes = state.get('total_scenes_count', 0)

        generated_count = state.get('generated_scenes_count', 0)

        remaining_count = total_scenes - generated_count

        

        await query.edit_message_text(

            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Ç 1 –¥–æ {remaining_count}):\n"

            f"–í—Å–µ–≥–æ —Å—Ü–µ–Ω: {total_scenes}\n"

            f"–£–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ü–µ–Ω—ã 1-{generated_count}\n"

            f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Å—Ü–µ–Ω—ã {generated_count + 1}-{total_scenes}"

        )

    elif data == "back_to_main_options":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–ø—Ü–∏—è–º –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        user_format = state.get('format', '').lower()

        generated_count = state.get('generated_scenes_count', 0)

        total_count = state.get('total_scenes_count', 0)

        

        keyboard = []

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ

        keyboard.append([InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë (—Ç–µ –∂–µ —Å—Ü–µ–Ω—ã)", callback_data="more_images")])

        

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

        if total_count > generated_count:

            remaining_count = total_count - generated_count

            start_scene = generated_count + 1

            end_scene = total_count

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—ã {start_scene}-{end_scene}", callback_data="generate_remaining_scenes")])

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã 1-{total_count}", callback_data="generate_all_scenes")])

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        keyboard.append([InlineKeyboardButton("üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω", callback_data="select_scene_count")])

        

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard.extend([

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="create_video_from_images")],

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data="create_video_from_script")],

        ])

        

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        keyboard.extend([

            [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset")],

        ])

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?", reply_markup=reply_markup)



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

    elif data == "video_generation":

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard = [

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="video_text_to_video")],

            [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="video_image_to_video")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "create_video_from_script":

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é (text-to-video)

        state['video_type'] = 'text_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "create_video_from_images":

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (image-to-video)

        state['video_type'] = 'image_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé¨ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data.startswith("video_quality:"):

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ

        quality = data.split(":")[1]

        state['video_quality'] = quality

        state['step'] = STEP_VIDEO_DURATION

        

        keyboard = [

            [InlineKeyboardButton("‚è±Ô∏è 5 —Å–µ–∫—É–Ω–¥", callback_data="video_duration:5")],

            [InlineKeyboardButton("‚è±Ô∏è 10 —Å–µ–∫—É–Ω–¥", callback_data="video_duration:10")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"üé¨ **–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {quality}**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data.startswith("video_duration:"):

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ

        duration = int(data.split(":")[1])

        state['video_duration'] = duration

        state['step'] = 'waiting_for_aspect_ratio'

        

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω

        keyboard = [

            [InlineKeyboardButton("üì± Instagram Stories/Reels (9:16)", callback_data="aspect_ratio:9:16")],

            [InlineKeyboardButton("üì∑ Instagram Post (1:1)", callback_data="aspect_ratio:1:1")],

            [InlineKeyboardButton("üñ•Ô∏è YouTube/–û–±—ã—á–Ω–æ–µ (16:9)", callback_data="aspect_ratio:16:9")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {duration} —Å–µ–∫**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏—é —Å—Ç–æ—Ä–æ–Ω –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data.startswith("aspect_ratio:"):

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω

        aspect_ratio = data.split(":")[1] + ":" + data.split(":")[2]  # –ü–æ–ª—É—á–∞–µ–º "9:16", "1:1", "16:9"

        state['aspect_ratio'] = aspect_ratio

        state['step'] = STEP_VIDEO_GENERATION

        

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ

        if state.get('video_type') == 'text_to_video':

            await query.edit_message_text(

                "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É**\n\n"

                "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –≤–∏–¥–µ–æ:\n\n"

                "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

                "‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —Å —Ü–≤–µ—Ç—É—â–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏\n"

                "‚Ä¢ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –ª–µ—Ç–∏—Ç —Å—Ä–µ–¥–∏ –∑–≤–µ–∑–¥\n"

                "‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂ —Å –Ω–µ–±–æ—Å–∫—Ä–µ–±–∞–º–∏\n\n"

                "üåê **–í–∞—à –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ**",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")

                ]])

            )

        else:

            # –î–ª—è image-to-video –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            state['step'] = 'waiting_for_image'

            await query.edit_message_text(

                "üñºÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"

                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"

                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")

                ]])

            )



    elif data == "video_text_to_video":

        # –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        state['video_type'] = 'text_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "video_image_to_video":

        # –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        state['video_type'] = 'image_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üñºÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "waiting":

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        await query.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")



    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤

    elif data == "enhance_prompt":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç

        await show_enhanced_prompt(update, context, state)

        return

        

    elif data == "generate_as_is":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º

        await generate_video(update, context, state)

        return

        

    elif data == "use_enhanced":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

        await generate_video(update, context, state)

        return

        

    elif data == "show_another_enhancement":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è

        enhancement_attempt = state.get('enhancement_attempt', 1) + 1

        if enhancement_attempt <= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏

            state['enhancement_attempt'] = enhancement_attempt

            await show_enhanced_prompt(update, context, state)

        else:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

            keyboard = [

                [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="use_enhanced")],

                [InlineKeyboardButton("‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É", callback_data="use_simple")]

            ]

            state['enhancement_attempt'] = enhancement_attempt  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

            await query.edit_message_text(

                "üîÑ **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è**\n\n"

                "–í—ã –º–æ–∂–µ—Ç–µ:\n"

                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"

                "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        return

        

    elif data == "use_simple":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É

        if 'enhanced_prompt' in state:

            del state['enhanced_prompt']  # –£–±–∏—Ä–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

        await generate_video(update, context, state)

        return





async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Ç–∏–ø={type(update.message).__name__}, —Ñ–æ—Ç–æ={bool(update.message.photo)}, —Ç–µ–∫—Å—Ç={bool(update.message.text)}")

    state = USER_STATE.get(user_id, {})

    step = state.get('step')

    if step == STEP_TOPIC:

        user_format = state.get('format', '').lower()

        

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['topic'] = update.message.text

            USER_STATE[user_id]['step'] = 'image_count_simple'

            state = USER_STATE[user_id]

            

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_prompt_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            

            await update.message.reply_text(

                f'–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "{update.message.text}"\n\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',

                reply_markup=reply_markup

            )

            return

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞

            USER_STATE[user_id]['topic'] = update.message.text

            USER_STATE[user_id]['step'] = STEP_DONE

            state = USER_STATE[user_id]

            

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–¥—Ä–∞–º–∏

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

                prompt = (

                    f"–§–æ—Ä–º–∞—Ç: {state.get('format', '')}\n"

                    f"–°—Ç–∏–ª—å: {state.get('style', '')}\n"

                    f"–¢–µ–º–∞: {state.get('topic', '')}\n"

                    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ —Å –∫–∞–¥—Ä–∞–º–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: [–ö–∞–¥—Ä 1: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã] –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ. [–ö–∞–¥—Ä 2: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã] –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ."

                )

            else:

                prompt = (

                    f"–§–æ—Ä–º–∞—Ç: {state.get('format', '')}\n"

                    f"–°—Ç–∏–ª—å: {state.get('style', '')}\n"

                    f"–¢–µ–º–∞: {state.get('topic', '')}\n"

                    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç."

                )

            await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')

        

        # –°–æ–∑–¥–∞—ë–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

        topic = state.get('topic', '')

        style = state.get('style', '')

        format_name = state.get('format', '')

        selected_model = state.get('image_gen_model', 'Ideogram')

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI

        content_prompt = (

            f"–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {format_name} –Ω–∞ —Ç–µ–º—É '{topic}'. "

            f"–°—Ç–∏–ª—å: {style}. "

            f"–í–ê–ñ–ù–û: "

            f"- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä', '–Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –æ—Ç–¥—ã—Ö', '–∫–∞—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏' "

            f"- –°–æ–∑–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–º–µ–Ω–Ω–æ –ø—Ä–æ {topic} "

            f"- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è "

            f"- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {topic} "

            f"- –°–¥–µ–ª–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–¥–∞—é—â–∏–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º "

            f"- –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ (Reels/TikTok/Shorts): —Å–æ–∑–¥–∞–π –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∫–∞–¥—Ä–∞–º–∏ [–ö–∞–¥—Ä 1: –æ–ø–∏—Å–∞–Ω–∏–µ] —Ç–µ–∫—Å—Ç "

            f"- –î–ª—è –ø–æ—Å—Ç–æ–≤: —Å–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ "

            f"- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã, –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º "

            f"–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "

            f"- –î–ª—è '—Ç—É—Ä–±–∞–∑–∞': '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –¥–æ–º–∏–∫–∏ —Å—Ä–µ–¥–∏ —Å–æ—Å–µ–Ω, –±–∞–Ω—è —Å –≤–µ–Ω–∏–∫–∞–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ' "

            f"- –î–ª—è '—Å–ø–æ—Ä—Ç–∑–∞–ª': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è' "

            f"–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –ø—Ä–∏–≤–ª–µ—á–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ."

        )

        

        try:

            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

            response = client.chat.completions.create(

                model="gpt-4o-mini",

                messages=[

                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –Ω–µ—à–∞–±–ª–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–º—É –∏ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."},

                    {"role": "user", "content": content_prompt}

                ],

                max_tokens=1000,

                temperature=0.8,

            )

            gpt_reply = response.choices[0].message.content.strip()

        except Exception as e:

            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

                gpt_reply = f"[–ö–∞–¥—Ä 1: {topic} - –æ–±—â–∏–π –≤–∏–¥] –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è {topic}! [–ö–∞–¥—Ä 2: –¥–µ—Ç–∞–ª–∏ {topic}] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. [–ö–∞–¥—Ä 3: –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ {topic}] –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è."

            else:

                gpt_reply = f"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è {topic}! –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∂–¥—É—Ç –≤–∞—Å. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è. #{topic.replace(' ', '')} #–∫–∞—á–µ—Å—Ç–≤–æ #–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è"



        

        await update.message.reply_text(gpt_reply)

        user_format = state.get('format', '').lower()

        

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        if user_format not in ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']:

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞

            scenes = await extract_scenes_from_script(gpt_reply, user_format)

            scene_count = len(scenes)

            

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω

            keyboard = []

            if scene_count <= 3:

                keyboard.append([InlineKeyboardButton(f"–í—Å–µ —Å—Ü–µ–Ω—ã ({scene_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data=f"generate_with_count:{scene_count}")])

            else:

                keyboard.append([InlineKeyboardButton(f"–ü–µ—Ä–≤—ã–µ 3 —Å—Ü–µ–Ω—ã (3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)", callback_data="generate_with_count:3")])

                keyboard.append([InlineKeyboardButton(f"–í—Å–µ —Å—Ü–µ–Ω—ã ({scene_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", callback_data=f"generate_with_count:{scene_count}")])

            

            keyboard.append([InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_count_after_text")])

            keyboard.append([InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")])

            keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="reset")])

            

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                f"–°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤! –ù–∞–π–¥–µ–Ω–æ {scene_count} —Å—Ü–µ–Ω.\n\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

                reply_markup=reply_markup

            )

            state['last_scenes'] = scenes

        else:

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" - —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏

            keyboard = [

                [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate_images")],

                [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data="create_video_from_script")],

                [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")],

                [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="reset")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                "–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",

                reply_markup=reply_markup

            )

        state['last_script'] = gpt_reply

        if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

            scenes = await extract_scenes_from_script(gpt_reply, user_format)

            state['last_scenes'] = scenes

        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç

    elif step == 'custom_image_count':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'image_gen_model'

                # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

                keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(

                    f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'custom_image_count_simple':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'custom_format':

        custom_format = update.message.text.strip()

        if len(custom_format) > 50:

            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")

            return

        USER_STATE[user_id]['format'] = custom_format

        USER_STATE[user_id]['step'] = STEP_STYLE

        keyboard = [

            [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

        keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(

            f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {custom_format}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

            reply_markup=reply_markup

        )

    elif step == 'custom_style':

        custom_style = update.message.text.strip()

        if len(custom_style) > 50:

            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")

            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        USER_STATE[user_id]['style'] = custom_style

        USER_STATE[user_id]['step'] = 'image_gen_model'

        keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(

            f'–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {custom_style}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

            reply_markup=reply_markup

        )

    elif step == 'custom_image_prompt':

        user_prompt = update.message.text.strip()

        if not is_prompt_safe(user_prompt):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        USER_STATE[user_id]['step'] = STEP_DONE

        await send_images(update, context, state, prompt_type='user', user_prompt=user_prompt)

    elif step == 'simple_image_count_selection':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

    elif step == 'custom_image_style':

        custom_style = update.message.text.strip()

        if not is_prompt_safe(custom_style):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        USER_STATE[user_id]['image_gen_style'] = custom_style

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['step'] = 'image_count_simple'

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {custom_style}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã

            USER_STATE[user_id]['step'] = STEP_TOPIC

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞

            format_tips = get_format_tips(user_format)

            message_text = f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {custom_style}\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è:\n\n{format_tips}"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                message_text,

                reply_markup=reply_markup

            )

    elif step == 'image_count_simple':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_prompt_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

    elif step == 'custom_image_count_simple':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

                tips = """ÔøΩÔøΩ –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'simple_image_prompt':

        user_prompt = update.message.text.strip()

        if not is_prompt_safe(user_prompt):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        USER_STATE[user_id]['topic'] = user_prompt

        USER_STATE[user_id]['step'] = STEP_DONE

        state = USER_STATE[user_id]

        

        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')

        await send_images(update, context, state, prompt_type='user', user_prompt=user_prompt)

    

    elif step == STEP_VIDEO_GENERATION:

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        video_prompt = update.message.text.strip()

        if not is_prompt_safe(video_prompt):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é

        state['video_prompt'] = video_prompt

        await show_prompt_review(update, context, state)

    

    elif step == 'waiting_for_video_prompt':

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        video_prompt = update.message.text.strip()

        

        if not video_prompt:

            await update.message.reply_text(

                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"

                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")

                ]])

            )

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        state['video_prompt'] = video_prompt

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤

        await show_prompt_review(update, context, state)

    

    elif step == 'waiting_for_image':

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        if update.message.photo:

            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            file = await context.bot.get_file(photo.file_id)

            image_url = file.file_path

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

            state['selected_image_url'] = image_url

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ

            state['step'] = 'waiting_for_video_prompt'

            

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç

            await update.message.reply_text(

                "üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"

                "üìù **–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"

                "üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:**\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –∞–Ω–∏–º–∞—Ü–∏—é\"\n"

                "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏\"\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã\"\n"

                "‚Ä¢ \"–°–æ–∑–¥–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω—É—é —Å—Ü–µ–Ω—É\"\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è\"\n\n"

                "üé¨ **–ü–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ**\n\n"

                "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")

                ]])

            )

        else:

            await update.message.reply_text(

                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"

                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")

                ]])

            )

    elif step == 'custom_simple_image_count':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == STEP_DONE:

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ STEP_DONE, 

        # —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ

        user_text = update.message.text.strip()

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        if user_text.lower() in ['–µ—â–µ', '–µ—â—ë', '—Å–Ω–æ–≤–∞', '–ø–æ–≤—Ç–æ—Ä–∏', '–µ—â–µ —Ä–∞–∑', '–µ—â—ë —Ä–∞–∑']:

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞

            USER_STATE[user_id] = {'step': 'main_menu'}

            await show_format_selection(update, context)

        else:

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã

            keyboard = [

                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_more")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ' –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",

                reply_markup=reply_markup

            )

    elif step == 'custom_count_after_text':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                state = USER_STATE[user_id]

                

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

                if 'last_scenes' in state:

                    scenes = state['last_scenes'][:count]

                    await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')

                    await send_images(update, context, state, prompt_type='auto', scenes=scenes)

                else:

                    await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')

                    await send_images(update, context, state, prompt_type='auto')

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'custom_scene_count':

        try:

            count = int(update.message.text.strip())

            total_scenes = state.get('total_scenes_count', 0)

            generated_count = state.get('generated_scenes_count', 0)

            remaining_count = total_scenes - generated_count

            

            if 1 <= count <= remaining_count:

                # –ë–µ—Ä–µ–º —Å—Ü–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

                all_scenes = state.get('last_scenes', [])

                scenes_to_generate = all_scenes[generated_count:generated_count + count]

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω

                state['image_count'] = len(scenes_to_generate)

                

                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã send_images –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª–∞ –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã

                state['generated_scenes_count'] = generated_count

                USER_STATE[user_id] = state

                

                await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {count} —Å—Ü–µ–Ω...')

                await send_images(update, context, state, prompt_type='auto', scenes=scenes_to_generate)

            else:

                await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {remaining_count}:")

        except ValueError:

            total_scenes = state.get('total_scenes_count', 0)

            generated_count = state.get('generated_scenes_count', 0)

            remaining_count = total_scenes - generated_count

            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {remaining_count} (—Å—Ü–µ–Ω—ã {generated_count + 1}-{total_scenes}):")

    elif step == 'select_image_for_edit':

        try:

            image_index = int(update.message.text.strip()) - 1

            last_images = state.get('last_images', [])

            

            if 0 <= image_index < len(last_images):

                selected_image_url = last_images[image_index]

                USER_STATE[user_id]['selected_image_url'] = selected_image_url

                USER_STATE[user_id]['step'] = 'enter_edit_prompt'

                

                await update.message.reply_text(

                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{image_index + 1}\n\n"

                    "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"

                    "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

                    "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

                    "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

                    "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

                    "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

                    "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\""

                )

            else:

                await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(last_images)}:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

    elif step == 'upload_image_for_edit':

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if update.message.photo:

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            file = await context.bot.get_file(photo.file_id)

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['selected_image_url'] = file.file_path

            USER_STATE[user_id]['step'] = 'enter_edit_prompt'

            

            await update.message.reply_text(

                "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"

                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n"

                "üîÑ –í–∞—à –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"

                "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

                "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

                "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

                "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

                "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

                "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

            )

        else:

            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    

    elif step == 'enter_edit_prompt':

        edit_prompt = update.message.text.strip()

        selected_image_url = state.get('selected_image_url')

        

        if not selected_image_url:

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /edit_image")

            return

        

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è FLUX –∏ —É–ª—É—á—à–∞–µ–º –µ–≥–æ

        try:

            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

            translation_response = client.chat.completions.create(

                model="gpt-4o-mini",

                messages=[

                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —É–ª—É—á—à–∏ –µ–≥–æ –¥–ª—è FLUX.1 Kontext Pro. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ—á–Ω—ã–π —Å–º—ã—Å–ª. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º."},

                    {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –∏ —É–ª—É—á—à–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edit_prompt}"}

                ],

                max_tokens=200,

                temperature=0.1

            )

            english_prompt = translation_response.choices[0].message.content.strip()

            

            await update.message.reply_text(f"üîÑ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {english_prompt}")

            

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}")

            english_prompt = edit_prompt  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è

            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")

        

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

        await edit_image_with_flux(update, context, state, selected_image_url, english_prompt)

        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        USER_STATE[user_id]['step'] = None

        USER_STATE[user_id].pop('selected_image_url', None)

    else:

        if update.message.photo:

            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            await update.message.reply_text('üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.')

        else:

            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.')



async def show_prompt_review(update, context, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Ä–µ—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        video_type = state.get('video_type', 'text_to_video')

        video_prompt = state.get('video_prompt', '')

        english_prompt = state.get('english_prompt', '')

        

        if not english_prompt:

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–µ—Ä–µ–≤–æ–¥–∏–º

            try:

                import openai

                client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

                translation_response = client.chat.completions.create(

                    model="gpt-4o-mini",

                    messages=[

                        {"role": "system", "content": "Translate the user's request from Russian to English. Keep the exact meaning and do not add extra details. If the original is short, keep it short."},

                        {"role": "user", "content": f"Translate this prompt: {video_prompt}"}

                    ],

                    max_tokens=150,

                    temperature=0.1

                )

                english_prompt = translation_response.choices[0].message.content.strip()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                state['english_prompt'] = english_prompt

                

                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

                logging.info(f"Original Russian prompt: {video_prompt}")

                logging.info(f"Translated English prompt: {english_prompt}")

                

            except Exception as e:

                logging.error(f"Translation failed: {e}, using original prompt")

                english_prompt = video_prompt

                state['english_prompt'] = english_prompt

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞

        if video_type == 'text_to_video':

            prompt_text = f"üìù **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {video_prompt}\nüåê **–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {english_prompt}"

        else:  # image_to_video

            prompt_text = f"üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** –∑–∞–≥—Ä—É–∂–µ–Ω–æ\nüìù **–ü—Ä–æ–º–ø—Ç:** {video_prompt}\nüåê **–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {english_prompt}"

        

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º

        keyboard = [

            [

                InlineKeyboardButton("‚úÖ –î–∞, —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="enhance_prompt"),

                InlineKeyboardButton("‚ùå –ù–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="generate_as_is")

            ]

        ]

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                f"üé¨ **–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫ –ø—Ä–æ–º–ø—Ç—É?**\n\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–º—ã—Å–µ–ª.",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        else:

            await update.message.reply_text(

                f"üé¨ **–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫ –ø—Ä–æ–º–ø—Ç—É?**\n\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–º—ã—Å–µ–ª.",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞

        state['current_step'] = STEP_PROMPT_REVIEW

        state['enhancement_attempt'] = 1  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è

        

    except Exception as e:

        logging.error(f"Error in show_prompt_review: {e}")

        # Fallback –∫ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        await generate_video(update, context, state)



async def enhance_prompt_with_gpt(original_prompt, english_prompt, attempt=1):

    """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT"""

    try:

        import openai

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

        system_content = f"""You are an expert at creating video generation prompts. 

The user has provided a simple prompt that was translated from Russian to English.

Your task is to enhance it for better video generation results while maintaining the core concept.



Original Russian: {original_prompt}

Current English: {english_prompt}



Enhance the English prompt by adding visual details, scene context, and cinematic elements.

Make it more descriptive and specific for AI video models.

This is attempt #{attempt} - if this is a retry, make it different from previous attempts.



Focus on:

- Visual elements and composition

- Movement and action details

- Scene atmosphere and mood

- Camera angles and perspectives



Keep the enhancement reasonable and don't add completely new elements not implied by the original."""

        

        response = client.chat.completions.create(

            model="gpt-4o-mini",

            messages=[

                {"role": "system", "content": system_content},

                {"role": "user", "content": f"Enhance this prompt for video generation: {english_prompt}"}

            ],

            max_tokens=200,

            temperature=0.7

        )

        

        enhanced_prompt = response.choices[0].message.content.strip()

        logging.info(f"Enhanced prompt (attempt {attempt}): {enhanced_prompt}")

        

        return enhanced_prompt

        

    except Exception as e:

        logging.error(f"Error enhancing prompt: {e}")

        return english_prompt  # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É



async def show_enhanced_prompt(update, context, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    try:

        video_prompt = state.get('video_prompt', '')

        english_prompt = state.get('english_prompt', '')

        enhancement_attempt = state.get('enhancement_attempt', 1)

        

        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç

        enhanced_prompt = await enhance_prompt_with_gpt(video_prompt, english_prompt, enhancement_attempt)

        state['enhanced_prompt'] = enhanced_prompt

        state['enhancement_attempt'] = enhancement_attempt  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞

        prompt_text = f"üìù **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {video_prompt}\nüåê **–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {english_prompt}\n‚ú® **–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {enhanced_prompt}"

        

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º

        keyboard = [

            [

                InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π", callback_data="use_enhanced"),

                InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="show_another_enhancement")

            ],

            [

                InlineKeyboardButton("‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É", callback_data="use_simple")

            ]

        ]

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                f"üîß **–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è?**",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        else:

            await update.message.reply_text(

                f"üîß **–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è?**",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞

        state['current_step'] = STEP_PROMPT_ENHANCEMENT

        

    except Exception as e:

        logging.error(f"Error in show_enhanced_prompt: {e}")

        # Fallback –∫ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        await generate_video(update, context, state)



async def generate_video(update, context, state):

    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Replicate API"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ user_id

    if hasattr(update, 'callback_query') and update.callback_query:

        chat_id = update.callback_query.message.chat_id

        user_id = update.callback_query.from_user.id

    elif hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        user_id = update.message.from_user.id

    else:

        # Fallback

        chat_id = None

        user_id = None

    

    if not chat_id or not user_id:

        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –∏–ª–∏ user_id")

        return

    

    try:

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        video_type = state.get('video_type', 'text_to_video')

        video_quality = state.get('video_quality', '480p')

        video_duration = state.get('video_duration', 5)

        video_prompt = state.get('video_prompt', '')

        

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤)

        english_prompt = state.get('english_prompt', video_prompt)

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏

        if video_type == 'text_to_video':

            # –î–ª—è text-to-video –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            if not video_prompt:

                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω, —ç—Ç–æ –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–≥–æ –≤–≤–µ—Å—Ç–∏

                logging.error(f"video_prompt –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è text-to-video. State: {state}")

                raise Exception("–ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

            if 'enhanced_prompt' in state:

                english_prompt = state['enhanced_prompt']

                logging.info(f"Using enhanced prompt: {english_prompt}")

            elif english_prompt != video_prompt:

                logging.info(f"Using translated prompt: {english_prompt}")

            else:

                logging.info(f"Using original prompt: {english_prompt}")

            

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è text-to-video —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

            input_data = {

                "prompt": english_prompt,

                "duration": video_duration,

                "resolution": video_quality,

                "aspect_ratio": state.get('aspect_ratio', '16:9'),

                "camera_fixed": False,

                "fps": 24

            }

        else:

            # –î–ª—è image-to-video –Ω—É–∂–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ò –ø—Ä–æ–º–ø—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

            if 'selected_image_url' not in state:

                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å

                logging.error(f"selected_image_url –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è image-to-video. State: {state}")

                raise Exception("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è image-to-video

            if not video_prompt:

                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω, —ç—Ç–æ –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–≥–æ –≤–≤–µ—Å—Ç–∏

                logging.error(f"video_prompt –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è image-to-video. State: {state}")

                raise Exception("–ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

            if 'enhanced_prompt' in state:

                english_prompt = state['enhanced_prompt']

                logging.info(f"Using enhanced prompt for image-to-video: {english_prompt}")

            elif english_prompt != video_prompt:

                logging.info(f"Using translated prompt for image-to-video: {english_prompt}")

            else:

                logging.info(f"Using original prompt for image-to-video: {english_prompt}")

            

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è image-to-video —Å –ø—Ä–æ–º–ø—Ç–æ–º

            input_data = {

                "image": state['selected_image_url'],

                "prompt": english_prompt,  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è image-to-video

                "duration": video_duration,

                "resolution": video_quality,

                "aspect_ratio": state.get('aspect_ratio', '16:9'),

                "camera_fixed": False,

                "fps": 24

            }

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        if video_type == 'text_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

            prompt_text = f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {video_prompt}\nüåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {english_prompt}"

        elif video_type == 'image_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è image-to-video

            prompt_text = f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\nüìù –ü—Ä–æ–º–ø—Ç: {video_prompt}\nüåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {english_prompt}"

        else:

            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

            if video_type == 'image_to_video':

                prompt_text = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"

            else:

                prompt_text = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        size_warning = ""

        if video_quality == "1080p" and video_duration > 5:

            size_warning = "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í–∏–¥–µ–æ 1080p –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 5 —Å–µ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.\n"

        elif video_duration > 10:

            size_warning = "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –î–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram (50 –ú–ë).\n"

        

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        cost_info = "\nüí∞ **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate (–ø–ª–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"

        

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                f"üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"

                f"{prompt_text}\n"

                f"‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"

                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫\n\n"

                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã.{size_warning}{cost_info}",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", callback_data="waiting")

                ]])

            )

        else:

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)

            await update.message.reply_text(

                f"üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"

                f"{prompt_text}\n"

                f"‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"

                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫\n\n"

                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã.{size_warning}{cost_info}"

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã Replicate –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

        try:

            logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Replicate API...")

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

            test_output = replicate.run(

                "replicate/hello-world",

                input={"text": "test"}

            )

            logging.info("Replicate API –¥–æ—Å—Ç—É–ø–µ–Ω")

        except Exception as credit_check_error:

            error_str = str(credit_check_error).lower()

            if "insufficient credit" in error_str or "insufficient_credit" in error_str:

                logging.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤

                keyboard = [

                    [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://replicate.com/account/billing")],

                    [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="üí≥ **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ**\n\n"

                         "‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ Replicate –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã\n\n"

                         "üí° **–†–µ—à–µ–Ω–∏—è:**\n"

                         "‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing\n"

                         "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n"

                         "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ\n\n"

                         "üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**\n"

                         "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"

                         "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n"

                         "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"

                         "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate",

                    reply_markup=reply_markup,

                    parse_mode='Markdown'

                )

                

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                state['step'] = None

                state.pop('video_type', None)

                state.pop('video_quality', None)

                state.pop('video_duration', None)

                state.pop('video_prompt', None)

                return

            else:

                logging.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Replicate API: {credit_check_error}")

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        

        # –í—ã–∑—ã–≤–∞–µ–º Replicate API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        import replicate

        

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        logging.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Replicate API:")

        logging.info(f"   –ú–æ–¥–µ–ª—å: bytedance/seedance-1-pro")

        logging.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {input_data}")

        logging.info(f"   –¢–∏–ø –≤–∏–¥–µ–æ: {video_type}")

        logging.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}")

        logging.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration}")

        logging.info(f"   Aspect ratio: {state.get('aspect_ratio', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        minimal_input = {"prompt": english_prompt}

        if video_type == 'image_to_video':

            minimal_input["image"] = state['selected_image_url']

        

        logging.info(f"üîç –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {minimal_input}")

        

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        logging.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")

        logging.info(f"   duration: {video_duration} (—Ç–∏–ø: {type(video_duration)})")

        logging.info(f"   resolution: {video_quality} (—Ç–∏–ø: {type(video_quality)})")

        logging.info(f"   aspect_ratio: {state.get('aspect_ratio', '–Ω–µ —É–∫–∞–∑–∞–Ω')} (—Ç–∏–ø: {type(state.get('aspect_ratio'))})")

        logging.info(f"   camera_fixed: False (—Ç–∏–ø: {type(False)})")

        logging.info(f"   fps: 24 (—Ç–∏–ø: {type(24)})")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–∏–ø–∞–º

        if not isinstance(video_duration, int):

            logging.warning(f"‚ö†Ô∏è duration –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int, –ø–æ–ª—É—á–µ–Ω: {type(video_duration)}")

        if not isinstance(video_quality, str):

            logging.warning(f"‚ö†Ô∏è resolution –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω: {type(video_quality)}")

        if state.get('aspect_ratio') and not isinstance(state.get('aspect_ratio'), str):

            logging.warning(f"‚ö†Ô∏è aspect_ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω: {type(state.get('aspect_ratio'))}")

        

        try:

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Bytedance Seedance 1.0 Pro

            logging.info(f"üöÄ –í—ã–∑—ã–≤–∞–µ–º API —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

            output = replicate.run(

                "bytedance/seedance-1-pro",

                input=input_data

            )

            

            # –ï—Å–ª–∏ output - —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            if hasattr(output, '__await__'):

                logging.info("–ü–æ–ª—É—á–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–∂–∏–¥–∞–µ–º...")

                output = await output

                

        except Exception as replicate_error:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Replicate API: {replicate_error}")

            

            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

            logging.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

            try:

                output = replicate.run(

                    "bytedance/seedance-1-pro",

                    input=minimal_input

                )

                logging.info(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏!")

                

                # –ï—Å–ª–∏ output - —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                if hasattr(output, '__await__'):

                    logging.info("–ü–æ–ª—É—á–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–∂–∏–¥–∞–µ–º...")

                    output = await output

                    

            except Exception as minimal_error:

                logging.error(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {minimal_error}")

                raise Exception(f"–û—à–∏–±–∫–∞ API Replicate: {str(replicate_error)}")

        

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Replicate API

        # output –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º FileOutput

        logging.info(f"üé¨ Replicate API –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")

        logging.info(f"   –¢–∏–ø: {type(output)}")

        logging.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {output}")

        logging.info(f"   –î–ª–∏–Ω–∞ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫): {len(output) if isinstance(output, list) else 'N/A'}")

        

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞

        if hasattr(output, '__dict__'):

            logging.info(f"   –ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {output.__dict__}")

        if hasattr(output, 'url'):

            logging.info(f"   –ú–µ—Ç–æ–¥ .url(): {output.url}")

        if hasattr(output, 'file_path'):

            logging.info(f"   –ú–µ—Ç–æ–¥ .file_path: {output.file_path}")

        

        if output:

            # –ï—Å–ª–∏ output - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

            if isinstance(output, list) and len(output) > 0:

                video_url = output[0]

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ —Å–ø–∏—Å–∫–∞: {video_url}")

            # –ï—Å–ª–∏ output - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–ø—Ä—è–º–æ–π URL)

            elif isinstance(output, str):

                video_url = output

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL —Å—Ç—Ä–æ–∫–æ–π: {video_url}")

            # –ï—Å–ª–∏ output - —ç—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput

            elif hasattr(output, 'url'):

                video_url = output.url

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ –æ–±—ä–µ–∫—Ç–∞.url: {video_url}")

            # –ï—Å–ª–∏ output - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º file_path

            elif hasattr(output, 'file_path'):

                video_url = output.file_path

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ –æ–±—ä–µ–∫—Ç–∞.file_path: {video_url}")

            else:

                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É

                video_url = str(output)

                logging.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É: {video_url}")

        else:

            raise Exception("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π URL

        if not video_url or not isinstance(video_url, str):

            raise Exception(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {video_url}")

        

        logging.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞

        file_extension = video_url.split('.')[-1].lower() if '.' in video_url else ''

        logging.info(f"üé¨ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:")

        logging.info(f"   URL: {video_url}")

        logging.info(f"   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}")

        logging.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç 'gif' –≤ URL: {'gif' in video_url.lower()}")

        logging.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç 'mp4' –≤ URL: {'mp4' in video_url.lower()}")

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ

        video_extensions = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv', 'm4v']

        is_video_file = file_extension in video_extensions

        logging.info(f"   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {is_video_file}")

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç 'gif', —Ç–æ —ç—Ç–æ –Ω–µ –≤–∏–¥–µ–æ

        if 'gif' in video_url.lower():

            is_video_file = False

            logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω GIF —Ñ–∞–π–ª –≤ URL! API –≤–µ—Ä–Ω—É–ª GIF –≤–º–µ—Å—Ç–æ MP4!")

        elif 'mp4' in video_url.lower():

            logging.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω MP4 —Ñ–∞–π–ª –≤ URL")

        else:

            logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        try:

            logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")

            head_response = requests.head(video_url, timeout=30)

            if head_response.status_code != 200:

                logging.warning(f"–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {head_response.status_code})")

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞

            else:

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞

                content_type = head_response.headers.get('content-type', 'unknown')

                content_length = head_response.headers.get('content-length')

                

                logging.info(f"üîç HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:")

                logging.info(f"   Content-Type: {content_type}")

                logging.info(f"   Content-Length: {content_length}")

                

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Å–µ—Ä–≤–µ—Ä –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞

                if 'gif' in content_type.lower():

                    logging.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ GIF —Ñ–∞–π–ª!")

                elif 'mp4' in content_type.lower() or 'video' in content_type.lower():

                    logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")

                else:

                    logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Content-Type: {content_type}")

                

                if content_length:

                    file_size_mb = int(content_length) / (1024 * 1024)

                    logging.info(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë")

                    

                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö

                    if file_size_mb > 50:

                        logging.warning(f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram: {file_size_mb:.1f} –ú–ë")

                    elif file_size_mb > 20:

                        logging.info(f"–§–∞–π–ª –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë, –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

        except Exception as check_error:

            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª: {check_error}")

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π

        try:

            test_response = requests.get(video_url, timeout=10, stream=False)

            if test_response.status_code != 200:

                logging.error(f"–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: {test_response.status_code})")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"‚ö†Ô∏è **–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"

                         f"–°—Ç–∞—Ç—É—Å: {test_response.status_code}\n"

                         f"–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"

                         f"üîó **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Å—ã–ª–∫—É:** {video_url}\n\n"

                         f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"

                         f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä\n"

                         f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n"

                         f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ",

                    reply_markup=InlineKeyboardMarkup([[

                        InlineKeyboardButton("üîó –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=video_url)

                    ]])

                )

                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        except Exception as test_error:

            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {test_error}")

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        try:

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

            test_msg = await context.bot.send_message(

                chat_id=chat_id,

                text="üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞...",

                disable_notification=True

            )

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ

            await context.bot.delete_message(chat_id=chat_id, message_id=test_msg.message_id)

            logging.info("–ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

        except Exception as chat_error:

            logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —á–∞—Ç—É: {chat_error}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

            await context.bot.send_message(

                chat_id=chat_id,

                text=f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —á–∞—Ç—É**\n\n"

                     f"–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"

                     f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:** {video_url}\n\n"

                     f"üí° **–†–µ—à–µ–Ω–∏—è:**\n"

                     f"‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞\n"

                     f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä\n"

                     f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)

                ]])

            )

            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

            

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        if video_type == 'text_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞

            prompt_caption = f"üìù {english_prompt}"

        elif video_type == 'image_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞

            prompt_caption = f"üñºÔ∏è {english_prompt}"

        else:

            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

            if video_type == 'image_to_video':

                prompt_caption = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

            else:

                prompt_caption = "üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ"

        

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback –º–µ—Ç–æ–¥–∞–º–∏

        video_sent = False

        video_error = None

        doc_error = None

        local_error = None

        anim_error = None

        

        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞

        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Telegram:")

        logging.info(f"   URL: {video_url}")

        logging.info(f"   –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")

        logging.info(f"   Content-Type: {content_type if 'content_type' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        logging.info(f"   –†–∞–∑–º–µ—Ä: {file_size_mb if 'file_size_mb' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'} –ú–ë")

        logging.info(f"   –ú–µ—Ç–æ–¥: send_video")

        

        try:

            await context.bot.send_video(

                chat_id=chat_id,

                video=video_url,

                caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                        f"{prompt_caption}\n"

                        f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"

                        f"‚ú® Bytedance Seedance 1.0 Pro",

                supports_streaming=True,

                has_spoiler=False

            )

            video_sent = True

            logging.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞")

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

            await context.bot.send_message(

                chat_id=chat_id,

                text=f"üé¨ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"

                     f"üîó **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**\n\n"

                     f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å!\n\n"

                     f"üí° **–ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:**\n"

                     f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' –Ω–∏–∂–µ\n"

                     f"‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"

                     f"‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ\n\n"

                     f"‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** ~30 –º–∏–Ω—É—Ç",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=video_url)

                ]])

            )

            

        except Exception as e:

            video_error = e

            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ: {video_error}")

            logging.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(video_error).__name__}")

            logging.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(video_error)}")

            

            # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞

            try:

                await context.bot.send_document(

                    chat_id=chat_id,

                    document=video_url,

                    caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                            f"{prompt_caption}\n"

                            f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å | üìÅ MP4\n"

                            f"‚ú® Bytedance Seedance 1.0 Pro"

                )

                video_sent = True

                logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (MP4)")

                

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"üé¨ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"

                         f"üîó **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**\n\n"

                         f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å!\n\n"

                         f"üí° **–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è:**\n"

                         f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' –Ω–∏–∂–µ\n"

                         f"‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"

                         f"‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ\n\n"

                         f"‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** ~30 –º–∏–Ω—É—Ç",

                    reply_markup=InlineKeyboardMarkup([[

                        InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=video_url)

                    ]])

                )

                

            except Exception as e:

                doc_error = e

                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {doc_error}")

            

                # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

                try:

                    logging.info("–ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å...")

                    

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                    import tempfile

                    import requests

                    

                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

                    head_response = requests.head(video_url, timeout=30)

                    if head_response.status_code == 200:

                        content_length = head_response.headers.get('content-length')

                        if content_length:

                            file_size_mb = int(content_length) / (1024 * 1024)

                            logging.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë")

                            

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã Telegram

                            if file_size_mb > 50:

                                logging.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.1f} –ú–ë")

                                # –í–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

                                await context.bot.send_message(

                                    chat_id=chat_id,

                                    text=f"‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!**\n\n"

                                         f"–†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"

                                         f"–õ–∏–º–∏—Ç Telegram: 50 –ú–ë\n\n"

                                         f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"

                                         f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 480p –≤–º–µ—Å—Ç–æ 1080p\n"

                                         f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5-10 —Å–µ–∫—É–Ω–¥\n"

                                         f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"

                                         f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:** {video_url}",

                                    reply_markup=InlineKeyboardMarkup([[

                                        InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)

                                    ]])

                                )

                                video_sent = True

                                logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ")

                                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

                            elif file_size_mb > 20:

                                logging.info(f"–§–∞–π–ª –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë), –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

                    

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º

                    response = requests.get(video_url, timeout=60, stream=True)

                    if response.status_code == 200:

                        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:

                            total_size = 0

                            for chunk in response.iter_content(chunk_size=8192):

                                if chunk:

                                    temp_file.write(chunk)

                                    total_size += len(chunk)

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏

                                    if total_size > 50 * 1024 * 1024:  # 50 –ú–ë

                                        raise Exception("–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (50 –ú–ë)")

                            

                            temp_file_path = temp_file.name

                            logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {temp_file_path}, —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} –ú–ë")

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä

                        if not os.path.exists(temp_file_path) or os.path.getsize(temp_file_path) == 0:

                            raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            with open(temp_file_path, 'rb') as video_file:

                                await context.bot.send_video(

                                    chat_id=chat_id,

                                    video=video_file,

                                    caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                            f"{prompt_caption}\n"

                                            f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"

                                            f"‚ú® Bytedance Seedance 1.0 Pro",

                                    supports_streaming=True,

                                    has_spoiler=False

                                )

                            video_sent = True

                            logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

                        except Exception as send_error:

                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {send_error}")

                            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç

                            try:

                                with open(temp_file_path, 'rb') as video_file:

                                    await context.bot.send_document(

                                        chat_id=chat_id,

                                        document=video_file,

                                        caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                                f"{prompt_caption}\n"

                                                f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å | üìÅ MP4\n"

                                                f"‚ú® Bytedance Seedance 1.0 Pro",

                                        filename=f"video_{video_quality}_{video_duration}s.mp4"

                                    )

                                video_sent = True

                                logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

                            except Exception as doc_send_error:

                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_send_error}")

                                raise doc_send_error

                        

                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            os.unlink(temp_file_path)

                        except Exception as cleanup_error:

                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                    else:

                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (—Å—Ç–∞—Ç—É—Å: {response.status_code})")

                        

                except Exception as e:

                    local_error = e

                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {local_error}")

                    

                    # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é (–µ—Å–ª–∏ —ç—Ç–æ GIF)

                    if file_extension == 'gif' or 'gif' in video_url.lower():

                        try:

                            await context.bot.send_animation(

                                chat_id=chat_id,

                                animation=video_url,

                                caption=f"üé¨ **–ê–Ω–∏–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!**\n\n"

                                        f"{prompt_caption}\n"

                                        f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"

                                        f"‚ú® Bytedance Seedance 1.0 Pro"

                            )

                            video_sent = True

                            logging.info("–ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

                            

                            # –î–∞–∂–µ –µ—Å–ª–∏ GIF –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MP4

                            await context.bot.send_message(

                                chat_id=chat_id,

                                text=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                     f"‚úÖ GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n"

                                     f"üîó **–°–∫–∞—á–∞–π—Ç–µ MP4 –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**\n\n"

                                     f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å!\n\n"

                                     f"üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"

                                     f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å MP4' –Ω–∏–∂–µ\n"

                                     f"‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"

                                     f"‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ MP4 —Ñ–∞–π–ª\n\n"

                                     f"‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** ~30 –º–∏–Ω—É—Ç",

                                reply_markup=InlineKeyboardMarkup([[

                                    InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å MP4", url=video_url)

                                ]])

                            )

                        except Exception as e:

                            anim_error = e

                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é: {anim_error}")

        

        # –ú–µ—Ç–æ–¥ 5: –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

        if not video_sent:

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

            logging.error("–í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∏—Å—å:")

            if video_error:

                logging.error(f"–û—à–∏–±–∫–∞ send_video: {video_error}")

            if doc_error:

                logging.error(f"–û—à–∏–±–∫–∞ send_document: {doc_error}")

            if local_error:

                logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {local_error}")

            if anim_error:

                logging.error(f"–û—à–∏–±–∫–∞ send_animation: {anim_error}")

            

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

            keyboard = [

                [InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)],

                [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data="video_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫

            error_reasons = []

            

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏

            all_errors = [video_error, doc_error, local_error, anim_error]

            for error in all_errors:

                if error:

                    error_str = str(error).lower()

                    if "too large" in error_str or "file size" in error_str or "large" in error_str:

                        error_reasons.append("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram")

                    if "timeout" in error_str:

                        error_reasons.append("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

                    if "network" in error_str or "connection" in error_str:

                        error_reasons.append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")

                    if "format" in error_str or "unsupported" in error_str:

                        error_reasons.append("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

                    if "bot was blocked" in error_str or "bot was stopped" in error_str:

                        error_reasons.append("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                    if "file" in error_str and "not found" in error_str:

                        error_reasons.append("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")

                    if "bad request" in error_str:

                        error_reasons.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram")

                    if "forbidden" in error_str:

                        error_reasons.append("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

                    if "internal server error" in error_str:

                        error_reasons.append("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

            

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

            error_reasons = list(set(error_reasons))

            

            if not error_reasons:

                error_reasons.append("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")

            

            error_reason = " ‚Ä¢ ".join(error_reasons)

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞

            size_info = ""

            try:

                head_response = requests.head(video_url, timeout=10)

                if head_response.status_code == 200:

                    content_length = head_response.headers.get('content-length')

                    if content_length:

                        file_size_mb = int(content_length) / (1024 * 1024)

                        size_info = f"\nüìè **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size_mb:.1f} –ú–ë"

            except:

                pass

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

            diagnostic_info = f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

            diagnostic_info += f"{prompt_caption}\n"

            diagnostic_info += f"‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"

            diagnostic_info += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫{size_info}\n\n"

            diagnostic_info += f"‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Bytedance Seedance 1.0 Pro\n\n"

            diagnostic_info += f"‚ö†Ô∏è **–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é**\n\n"

            diagnostic_info += f"üîç **–ü—Ä–∏—á–∏–Ω–∞:** {error_reason}\n\n"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö

            if video_error:

                diagnostic_info += f"üìπ **–û—à–∏–±–∫–∞ send_video:** {str(video_error)[:100]}...\n"

            if doc_error:

                diagnostic_info += f"üìÑ **–û—à–∏–±–∫–∞ send_document:** {str(doc_error)[:100]}...\n"

            if local_error:

                diagnostic_info += f"üíæ **–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:** {str(local_error)[:100]}...\n"

            if anim_error:

                diagnostic_info += f"üé≠ **–û—à–∏–±–∫–∞ send_animation:** {str(anim_error)[:100]}...\n"

            

            diagnostic_info += f"\nüí° **–†–µ—à–µ–Ω–∏—è:**\n"

            diagnostic_info += f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ' –Ω–∏–∂–µ\n"

            diagnostic_info += f"‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"

            diagnostic_info += f"üì± **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**\n"

            diagnostic_info += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"

            diagnostic_info += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n\n"

            diagnostic_info += f"üîÑ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:**\n"

            diagnostic_info += f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p –≤–º–µ—Å—Ç–æ 1080p)\n"

            diagnostic_info += f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ\n"

            diagnostic_info += f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ\n\n"

            diagnostic_info += f"üí¨ **–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è:**\n"

            diagnostic_info += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)\n"

            diagnostic_info += f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏\n\n"

            diagnostic_info += f"üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"

            diagnostic_info += f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}\n"

            diagnostic_info += f"‚Ä¢ –¢–∏–ø: {video_type}"

            

            await context.bot.send_message(

                chat_id=chat_id,

                text=diagnostic_info,

                reply_markup=reply_markup,

                parse_mode='Markdown'

            )

            logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

        keyboard = [

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data="video_generation")],

            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        await context.bot.send_message(

            chat_id=chat_id,

            text="üéâ **–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"

                 "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",

            reply_markup=reply_markup

        )

        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        state['step'] = None

        state.pop('video_type', None)

        state.pop('video_quality', None)

        state.pop('video_duration', None)

        state.pop('video_prompt', None)

            

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")

        

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞

        error_str = str(e).lower()

        error_type = "unknown"

        error_solution = ""

        

        if "insufficient credit" in error_str or "insufficient_credit" in error_str:

            error_type = "credit"

            error_solution = """

üí≥ **–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏ Replicate**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ Replicate –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è



üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

"""

        elif "api" in error_str and "token" in error_str:

            error_type = "api"

            error_solution = """

üîë **–ü—Ä–æ–±–ª–µ–º–∞ —Å API —Ç–æ–∫–µ–Ω–æ–º**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Replicate API



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞

‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å Ideogram)

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

"""

        elif "timeout" in error_str or "timed out" in error_str:

            error_type = "timeout"

            error_solution = """

‚è∞ **–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –°–µ—Ä–≤–µ—Ä Replicate –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)

‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ)

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –Ω–µ–ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã

"""

        elif "network" in error_str or "connection" in error_str:

            error_type = "network"

            error_solution = """

üåê **–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Replicate



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è

"""

        else:

            error_type = "unknown"

            error_solution = f"""

‚ùå **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**



**–û–ø–∏—Å–∞–Ω–∏–µ:** {str(e)[:200]}...



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

"""

        

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏

        if error_type == "credit":

            keyboard = [

                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://replicate.com/account/billing")],

                [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

        elif error_type == "api":

            keyboard = [

                [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

        else:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="video_generation")],

                [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏

        if error_type == "credit":

            error_title = "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"

        elif error_type == "api":

            error_title = "üîë –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞"

        elif error_type == "timeout":

            error_title = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"

        elif error_type == "network":

            error_title = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é"

        else:

            error_title = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"

        

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        full_error_message = f"{error_title}\n\n{error_solution}"

        

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                full_error_message,

                reply_markup=reply_markup,

                parse_mode='Markdown'

            )

        else:

            await context.bot.send_message(

                chat_id=chat_id,

                text=full_error_message,

                reply_markup=reply_markup,

                parse_mode='Markdown'

            )

        

        # –ò—Ç–æ–≥–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        logging.info(f"üé¨ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:")

        logging.info(f"   –¢–∏–ø –≤–∏–¥–µ–æ: {video_type}")

        logging.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}")

        logging.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration}")

        logging.info(f"   Aspect ratio: {state.get('aspect_ratio', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        logging.info(f"   URL —Ñ–∞–π–ª–∞: {video_url if 'video_url' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        logging.info(f"   –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension if 'file_extension' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        logging.info(f"   –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {video_sent if 'video_sent' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        if 'video_sent' in locals() and not video_sent:

            logging.error(f"   –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:")

            if 'video_error' in locals() and video_error:

                logging.error(f"     send_video: {video_error}")

            if 'doc_error' in locals() and doc_error:

                logging.error(f"     send_document: {doc_error}")

            if 'local_error' in locals() and local_error:

                logging.error(f"     –ª–æ–∫–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {local_error}")

            if 'anim_error' in locals() and anim_error:

                logging.error(f"     send_animation: {anim_error}")

        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        state['step'] = None

        state.pop('video_type', None)

        state.pop('video_quality', None)

        state.pop('video_duration', None)

        state.pop('video_prompt', None)



# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´



async def show_subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–æ–≤"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = analytics_db.get_user_limits(user_id)

    credits = analytics_db.get_user_credits(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞

    free_generations_left = analytics_db.get_free_generations_left(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("ü™ô –ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n{status_text}"

        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



# –§—É–Ω–∫—Ü–∏—è show_subscription_plans —É–¥–∞–ª–µ–Ω–∞ - –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è



async def show_credit_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤"""

    try:

        from pricing_config import CREDIT_PACKAGES, format_price

    except ImportError:

        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

        CREDIT_PACKAGES = {

            'small': {'name': 'ü™ô –ú–∞–ª—ã–π –ø–∞–∫–µ—Ç', 'credits': 2000, 'price': 14.0, 'currency': 'UAH', 'description': '2000 –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'},

            'medium': {'name': 'ü™ô –°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç', 'credits': 5000, 'price': 30.0, 'currency': 'UAH', 'description': '5000 –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π 14%'},

            'large': {'name': 'ü™ô –ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç', 'credits': 10000, 'price': 50.0, 'currency': 'UAH', 'description': '10000 –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π 29%'}

        }

        

        def format_price(amount, currency):

            return f"‚Ç¥{amount:.2f}" if currency == 'UAH' else f"{amount:.2f}{currency}"

    

    text = "ü™ô **–ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ (pay-per-use):**\n\n"

    text += "üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"

    text += "‚Ä¢ –ü–æ–∫—É–ø–∞–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑\n"

    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"

    text += "‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n\n"

    

    for package_type, package in CREDIT_PACKAGES.items():

        text += f"**{package['name']}**\n"

        text += f"‚Ä¢ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {format_price(package['price'], package['currency'])}\n"

        if package.get('discount_percent', 0) > 0:

            text += f"‚Ä¢ –°–∫–∏–¥–∫–∞ {package['discount_percent']}%\n"

        text += f"‚Ä¢ {package['description']}\n\n"

    

    text += "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:**\n\n"

    text += "üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞ 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):**\n"

    text += "‚Ä¢ Ideogram, Bytedance, Luma: 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ Bria 3.2: 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ Google Imagen 4 Ultra: 16 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ Recraft AI: 20 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

    text += "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):**\n"

    text += "‚Ä¢ FLUX.1 Kontext Pro: 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

    text += "üé¨ **–í–∏–¥–µ–æ (–∑–∞ 1 –≤–∏–¥–µ–æ):**\n"

    text += "‚Ä¢ 480p 5 —Å–µ–∫—É–Ω–¥: 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ 720p 5 —Å–µ–∫—É–Ω–¥: 71 –∫—Ä–µ–¥–∏—Ç\n"

    text += "‚Ä¢ 1080p 5 —Å–µ–∫—É–Ω–¥: 172 –∫—Ä–µ–¥–∏—Ç–∞\n"

    text += "‚Ä¢ 480p 10 —Å–µ–∫—É–Ω–¥: 71 –∫—Ä–µ–¥–∏—Ç\n"

    text += "‚Ä¢ 720p 10 —Å–µ–∫—É–Ω–¥: 138 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ 1080p 10 —Å–µ–∫—É–Ω–¥: 342 –∫—Ä–µ–¥–∏—Ç–∞\n\n"

    text += "üîÑ **–ö—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞!**"

    

    keyboard = []

    for package_type, package in CREDIT_PACKAGES.items():

        keyboard.append([InlineKeyboardButton(

            f"{package['name']} - {format_price(package['price'], package['currency'])}", 

            callback_data=f"buy_credits:{package_type}"

        )])

    

    keyboard.extend([

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription_menu")]

    ])

    

    await update.callback_query.edit_message_text(

        text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



# –§—É–Ω–∫—Ü–∏—è handle_subscription_purchase —É–¥–∞–ª–µ–Ω–∞ - –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è



async def handle_credit_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∫—Ä–µ–¥–∏—Ç–æ–≤"""

    try:

        from pricing_config import get_credit_package_by_type

    except ImportError:

        await update.callback_query.answer("‚ùå –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return

    

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –∏–∑ callback_data

    package_type = update.callback_query.data.split(':')[1]

    package = get_credit_package_by_type(package_type)

    

    if not package:

        await update.callback_query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return

    

    user_id = update.effective_user.id

    

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Betatransfer

    try:

        from betatransfer_api import betatransfer_api

        

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂

        print(f"üîç –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–∞–∫–µ—Ç–∞: {package}")

        payment_result = betatransfer_api.create_payment(

            amount=package['price'],

            currency=package['currency'],

            description=f"–ü–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤: {package['name']} ({package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤)",

            payer_id=str(user_id)

        )

        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result}")

        

        if 'error' in payment_result:

            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result['error']}")

            return

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payment_id –≤ –æ—Ç–≤–µ—Ç–µ

        if 'id' not in payment_result:

            print(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç id: {payment_result}")

            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω ID –ø–ª–∞—Ç–µ–∂–∞")

            return

        

        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã

        payment_url = payment_result.get('urlPayment', payment_result.get('url', ''))

        

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = payment_result.get('order_id', f"order{int(time.time())}")
        payment_record = analytics_db.create_payment(
            user_id=user_id,
            amount=package['price'],
            currency=package['currency'],
            payment_id=payment_result['id'],
            order_id=order_id
        )
        
        if not payment_record:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ

        text = f"ü™ô **–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤**\n\n"

        text += f"üì¶ **–ü–∞–∫–µ—Ç:** {package['name']}\n"

        text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç–æ–≤:** {package['credits']}\n"

        text += f"üí∞ **–°—É–º–º–∞:** ‚ÇΩ{package['price']:.0f}\n"

        text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {package['description']}\n\n"

        text += "üîó **–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:**\n"

        text += f"{payment_url}\n\n"

        text += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'"

        

        keyboard = [

            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],

            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment:{payment_result['id']}")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="credit_packages")]

        ]

        

        await update.callback_query.edit_message_text(

            text,

            reply_markup=InlineKeyboardMarkup(keyboard)

        )

        

    except Exception as e:

        import traceback

        error_traceback = traceback.format_exc()

        print(f"üîç –ü–æ–ª–Ω—ã–π traceback –æ—à–∏–±–∫–∏:")

        print(error_traceback)

        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

        logging.error(f"Traceback: {error_traceback}")

        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")



async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    
    print(f"üîç –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è check_payment_status")
    print(f"üîç callback_data: {update.callback_query.data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data

    payment_id = update.callback_query.data.split(':')[1]

    

    try:

        from betatransfer_api import BetatransferAPI
        betatransfer_api = BetatransferAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = betatransfer_api.get_payment_status(payment_id)

        

        if 'error' in payment_status:

            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {payment_status['error']}")

            return

        

        status = payment_status.get('status', 'unknown')

        

        if status == 'completed' or status == 'success':

            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã

            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
            await activate_payment(update, context, payment_status)

        elif status == 'pending':

            await update.callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        elif status == 'failed':

            await update.callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª")

        else:

            await update.callback_query.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")

            

    except Exception as e:

        import traceback
        error_traceback = traceback.format_exc()
        print(f"üîç –û—à–∏–±–∫–∞ –≤ check_payment_status:")
        print(f"üîç {error_traceback}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logging.error(f"Traceback: {error_traceback}")

        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")



async def activate_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, payment_data: dict):

    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã"""

    user_id = update.effective_user.id

    payment_id = payment_data.get('id')

    amount = payment_data.get('amount', 0)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if isinstance(amount, str):
        try:
            amount = float(amount)
        except ValueError:
            amount = 0.0
    
    print(f"üîç activate_payment –≤—ã–∑–≤–∞–Ω–∞:")
    print(f"üîç user_id: {user_id}")
    print(f"üîç payment_id: {payment_id}")
    print(f"üîç amount: {amount} (—Ç–∏–ø: {type(amount)})")
    print(f"üîç amount –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {amount} (—Ç–∏–ø: {type(amount)})")

    

    try:

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ —Å—É–º–º–µ

        try:

            from pricing_config import CREDIT_PACKAGES

        except ImportError:

            CREDIT_PACKAGES = {

                'small': {'credits': 2000, 'price': 1129.0},

                'medium': {'credits': 5000, 'price': 2420.0},

                'large': {'credits': 10000, 'price': 4030.0}

            }

        

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç –ø–æ —Ü–µ–Ω–µ
        print(f"üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è —Å—É–º–º—ã: {amount}")

        for package in CREDIT_PACKAGES.values():

            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {package['price']} —Ä—É–±")
            print(f"üîç –†–∞–∑–Ω–∏—Ü–∞: {abs(package['price'] - amount)}")
            if abs(package['price'] - amount) < 1.0:  # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1 —Ä—É–±–ª—å

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç—ã

                success = analytics_db.add_credits(

                    user_id=user_id,

                    amount=package['credits'],

                    payment_id=payment_id,

                    description=f"–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"

                )

                

                if success:

                    text = f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"

                    text += f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:** {package['credits']}\n"

                    text += f"üí∞ **–°—É–º–º–∞:** ‚ÇΩ{amount:.0f}\n"

                    text += f"üì¶ **–ü–∞–∫–µ—Ç:** {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

                    text += "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!"

                    

                    keyboard = [

                        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    

                    await update.callback_query.edit_message_text(

                        text,

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                    return

        

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç

        await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤")

        

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")

        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")



async def setup_commands(application):

    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞"""

    commands = [

        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º / –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞"),

        BotCommand("help", "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),

        BotCommand("stats", "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),

        BotCommand("ideogram_tips", "üé® –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram")

    ]

    

    try:

        await application.bot.set_my_commands(commands)

        logging.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")



def main():

    import os

    from dotenv import load_dotenv

    

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    load_dotenv()

    

    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

    if not TOKEN:

        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_env.py –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")

        return

    

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è Replicate –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

    if not os.getenv('REPLICATE_API_TOKEN'):

        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REPLICATE_API_TOKEN")

        print("üí° –î–ª—è Railway –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")

        return

    

    app = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import traceback
        error_traceback = traceback.format_exc()
        print(f"üîç –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:")
        print(f"üîç {error_traceback}")
        logging.error(f"Exception while handling an update: {context.error}")
        logging.error(f"Traceback: {error_traceback}")
    
    app.add_error_handler(error_handler)

    

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    app.add_handler(CommandHandler('start', start))

    app.add_handler(CommandHandler('help', help_command))

    app.add_handler(CommandHandler('stats', stats_command))

    app.add_handler(CommandHandler('my_id', my_id_command))  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

    app.add_handler(CommandHandler('admin_stats', admin_stats_command))

    app.add_handler(CommandHandler('ideogram_tips', ideogram_tips_command))

    app.add_handler(CommandHandler('check_replicate', check_replicate))

    app.add_handler(CommandHandler('test_ideogram', test_ideogram))

    app.add_handler(CommandHandler('test_image_send', test_image_send))

    app.add_handler(CommandHandler('edit_image', edit_image_command))

    app.add_handler(CallbackQueryHandler(button_handler))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.add_handler(MessageHandler(filters.PHOTO, text_handler))

    

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    app.post_init = setup_commands

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –Ω–∞ Railway

    port = int(os.environ.get('PORT', 0))

    

    if port:

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ Railway —Å webhook

        import asyncio

        

        async def start_webhook():

            await app.initialize()

            await app.start()

            

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook

            webhook_url = f"https://web-production-3dd82.up.railway.app/{TOKEN}"

            print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")

            

            try:

                await app.bot.set_webhook(url=webhook_url)

                print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            except Exception as e:

                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

                return

            

            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook

            try:

                await app.updater.start_webhook(

                    listen="0.0.0.0",

                    port=port,

                    url_path=TOKEN,

                    webhook_url=webhook_url

                )

                print("‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            except Exception as e:

                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")

                return

            print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway –Ω–∞ –ø–æ—Ä—Ç—É {port}")

            print(f"üåê Webhook URL: {webhook_url}")

            print(f"üîë Token: {TOKEN[:10]}...")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook

            try:

                webhook_info = await app.bot.get_webhook_info()

                print(f"üìä Webhook —Å—Ç–∞—Ç—É—Å: {webhook_info}")

            except Exception as e:

                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å—Ç–∞—Ç—É—Å–∞: {e}")

            

            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º

            try:

                await asyncio.Event().wait()

            except KeyboardInterrupt:

                pass

        

        asyncio.run(start_webhook())

    else:

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å polling

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å polling")

        app.run_polling()



if __name__ == '__main__':

    main() 