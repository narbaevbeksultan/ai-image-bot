import logging
import asyncio
import concurrent.futures
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaDocument

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

import openai

import os

import replicate

import requests
import aiohttp

from PIL import Image

import io

import tempfile

import time

from datetime import datetime, timedelta

from database import analytics_db

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
THREAD_POOL = concurrent.futures.ThreadPoolExecutor(max_workers=300)

# –°–æ–∑–¥–∞–µ–º –ø—É–ª HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è aiohttp
HTTP_SESSION = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
CONTENT_CREATION_ENABLED = False  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"

# Flask –¥–ª—è callback —Å–µ—Ä–≤–µ—Ä–∞
from flask import Flask, request, jsonify
from betatransfer_api import betatransfer_api
from pricing_config import format_price

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate_single_image_async(idx, prompt, state, send_text=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (idx, success, image_url, caption, error)
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–æ–º–ø—Ç—É
        image_gen_style = state.get('image_gen_style', '')
        selected_model = state.get('image_gen_model', 'Ideogram')
        style_suffix = ''
        
        if image_gen_style and selected_model != 'Ideogram':
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç–∏–ª–∏
            if image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':
                style_suffix = ', photorealistic, ultra-realistic, high detail, 8k, professional photography, sharp focus, natural lighting, cinematic, award-winning photo'
            elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':
                style_suffix = ', illustration, digital art, high detail, artistic, creative, vibrant colors'
            elif image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':
                style_suffix = ', minimalism, clean, simple, high contrast, modern design, geometric shapes'
            elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':
                style_suffix = ', watercolor, painting, soft colors, artistic, flowing, organic'
            elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':
                style_suffix = ', oil painting, canvas texture, brush strokes, artistic, traditional art'
            elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':
                style_suffix = ', pixel art, 8-bit, retro style, digital art'
        elif image_gen_style and selected_model == 'Ideogram':
            # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
            if image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':
                style_suffix = ', photorealistic'
            elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':
                style_suffix = ', illustration'
            elif image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':
                style_suffix = ', minimalism'
            elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':
                style_suffix = ', watercolor'
            elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':
                style_suffix = ', oil painting'
            elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':
                style_suffix = ', pixel art'

        prompt_with_style = f"{prompt}{style_suffix}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Replicate
        user_format = state.get('format', '')
        simple_orientation = state.get('simple_orientation', None)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Ideogram
        replicate_params = {}
        if user_format == '1:1':
            replicate_params['aspect_ratio'] = '1:1'
        elif user_format == '16:9':
            replicate_params['aspect_ratio'] = '16:9'
        elif user_format == '9:16':
            replicate_params['aspect_ratio'] = '9:16'
        elif simple_orientation == 'horizontal':
            replicate_params['aspect_ratio'] = '16:9'
        elif simple_orientation == 'vertical':
            replicate_params['aspect_ratio'] = '9:16'
        elif simple_orientation == 'square':
            replicate_params['aspect_ratio'] = '1:1'
        else:
            replicate_params['aspect_ratio'] = '1:1'
        
        if send_text:
            await send_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx}...')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if selected_model == 'Ideogram':
            try:
                if send_text:
                    await send_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Ideogram...\n\nüí° –°–æ–≤–µ—Ç: Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
                if not os.environ.get('REPLICATE_API_TOKEN'):
                    return (idx, False, None, None, "API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    output = await replicate_run_async(
                        "ideogram-ai/ideogram-v3-turbo",
                        {"prompt": prompt_with_style, **replicate_params},
                        timeout=60
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ v3 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º v2
                    logging.warning(f"Ideogram v3 Turbo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –ø—Ä–æ–±—É–µ–º v2...")
                    try:
                        output = await replicate_run_async(
                            "ideogram-ai/ideogram-v2",
                            {"prompt": prompt_with_style, **replicate_params},
                            timeout=60
                        )
                    except Exception as e2:
                        logging.error(f"Ideogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e2}")
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Ideogram: {e2}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
                image_url = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput
                if hasattr(output, 'url'):
                    if callable(output.url):
                        image_url = output.url()
                    else:
                        image_url = output.url
                elif hasattr(output, '__iter__') and not isinstance(output, str):
                    try:
                        output_list = list(output)
                        if output_list:
                            image_url = output_list[0]
                    except Exception as e:
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                else:
                    image_url = output
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ URL
                if not image_url:
                    return (idx, False, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Ideogram (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if isinstance(image_url, bytes):
                    try:
                        image_url = image_url.decode('utf-8')
                    except UnicodeDecodeError:
                        return (idx, False, None, None, "–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http
                if not isinstance(image_url, str) or not image_url.startswith('http'):
                    return (idx, False, None, None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Ideogram")
                
                caption = f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'
                return (idx, True, image_url, caption, None)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx} —á–µ—Ä–µ–∑ Ideogram: {e}")
                return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Ideogram: {e}")
        
        elif selected_model == 'Bytedance (Seedream-3)':
            try:
                if send_text:
                    await send_text(f"‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Bytedance Seedream-3...\n\n‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏—Ü–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π.\n\nüí° –°–æ–≤–µ—Ç: Bytedance –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
                if not os.environ.get('REPLICATE_API_TOKEN'):
                    return (idx, False, None, None, "API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Bytedance
                try:
                    output = await replicate_run_async(
                        "bytedance/seedream-3",
                        {"prompt": prompt_with_style, **replicate_params},
                        timeout=180
                    )
                except Exception as e:
                    logging.error(f"Bytedance Seedream-3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Bytedance: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
                image_url = None
                
                if hasattr(output, 'url'):
                    if callable(output.url):
                        image_url = output.url()
                    else:
                        image_url = output.url
                elif hasattr(output, '__iter__') and not isinstance(output, str):
                    try:
                        output_list = list(output)
                        if output_list:
                            image_url = output_list[0]
                    except Exception as e:
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                else:
                    image_url = output
                
                if not image_url:
                    return (idx, False, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Bytedance")
                
                if isinstance(image_url, bytes):
                    try:
                        image_url = image_url.decode('utf-8')
                    except UnicodeDecodeError:
                        return (idx, False, None, None, "–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Bytedance")
                
                if not isinstance(image_url, str) or not image_url.startswith('http'):
                    return (idx, False, None, None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Bytedance")
                
                caption = f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'
                return (idx, True, image_url, caption, None)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx} —á–µ—Ä–µ–∑ Bytedance: {e}")
                return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Bytedance: {e}")
        
        elif selected_model == 'Bytedance (Seedream-4)':
            try:
                if send_text:
                    await send_text(f"üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Bytedance Seedream-4...\n\nüí° –°–æ–≤–µ—Ç: Seedream-4 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
                if not os.environ.get('REPLICATE_API_TOKEN'):
                    return (idx, False, None, None, "API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Bytedance Seedream-4
                try:
                    output = await replicate_run_async(
                        "bytedance/seedream-4",
                        {"prompt": prompt_with_style, **replicate_params},
                        timeout=180
                    )
                except Exception as e:
                    logging.error(f"Bytedance Seedream-4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Bytedance Seedream-4: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
                image_url = None
                
                if hasattr(output, 'url'):
                    if callable(output.url):
                        image_url = output.url()
                    else:
                        image_url = output.url
                elif hasattr(output, '__iter__') and not isinstance(output, str):
                    try:
                        output_list = list(output)
                        if output_list:
                            image_url = output_list[0]
                    except Exception as e:
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                else:
                    image_url = output
                
                if not image_url:
                    return (idx, False, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Bytedance Seedream-4")
                
                if isinstance(image_url, bytes):
                    try:
                        image_url = image_url.decode('utf-8')
                    except UnicodeDecodeError:
                        return (idx, False, None, None, "–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Bytedance Seedream-4")
                
                if not isinstance(image_url, str) or not image_url.startswith('http'):
                    return (idx, False, None, None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Bytedance Seedream-4")
                
                caption = f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'
                return (idx, True, image_url, caption, None)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx} —á–µ—Ä–µ–∑ Bytedance Seedream-4: {e}")
                return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Bytedance Seedream-4: {e}")
        
        elif selected_model == 'Google Imagen 4 Ultra':
            try:
                if send_text:
                    await send_text(f"üî¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Google Imagen 4 Ultra...\n\nüí° –°–æ–≤–µ—Ç: Google Imagen –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
                if not os.environ.get('REPLICATE_API_TOKEN'):
                    return (idx, False, None, None, "API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google Imagen
                try:
                    output = await replicate_run_async(
                        "google/imagen-4-ultra",
                        {"prompt": prompt_with_style, **replicate_params},
                        timeout=60
                    )
                except Exception as e:
                    logging.error(f"Google Imagen 4 Ultra –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Google Imagen: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
                image_url = None
                
                if hasattr(output, 'url'):
                    if callable(output.url):
                        image_url = output.url()
                    else:
                        image_url = output.url
                elif hasattr(output, '__iter__') and not isinstance(output, str):
                    try:
                        output_list = list(output)
                        if output_list:
                            image_url = output_list[0]
                    except Exception as e:
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                else:
                    image_url = output
                
                if not image_url:
                    return (idx, False, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Google Imagen")
                
                if isinstance(image_url, bytes):
                    try:
                        image_url = image_url.decode('utf-8')
                    except UnicodeDecodeError:
                        return (idx, False, None, None, "–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Google Imagen")
                
                if not isinstance(image_url, str) or not image_url.startswith('http'):
                    return (idx, False, None, None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Google Imagen")
                
                caption = f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'
                return (idx, True, image_url, caption, None)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx} —á–µ—Ä–µ–∑ Google Imagen: {e}")
                return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Google Imagen: {e}")
        
        elif selected_model == 'Luma Photon':
            try:
                if send_text:
                    await send_text(f"üèóÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Luma Photon...\n\nüí° –°–æ–≤–µ—Ç: Luma Photon –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
                if not os.environ.get('REPLICATE_API_TOKEN'):
                    return (idx, False, None, None, "API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Luma Photon
                luma_params = {
                    "prompt": prompt_with_style,
                    "aspect_ratio": replicate_params.get('aspect_ratio', '1:1')
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Luma Photon
                try:
                    output = await replicate_run_async(
                        "luma/photon",
                        luma_params,
                        timeout=120
                    )
                except Exception as e:
                    logging.error(f"Luma Photon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Luma Photon: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
                image_url = None
                
                if hasattr(output, 'url'):
                    if callable(output.url):
                        image_url = output.url()
                    else:
                        image_url = output.url
                elif hasattr(output, '__iter__') and not isinstance(output, str):
                    try:
                        output_list = list(output)
                        if output_list:
                            image_url = output_list[0]
                    except Exception as e:
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                else:
                    image_url = output
                
                if not image_url:
                    return (idx, False, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Luma Photon")
                
                if isinstance(image_url, bytes):
                    try:
                        image_url = image_url.decode('utf-8')
                    except UnicodeDecodeError:
                        return (idx, False, None, None, "–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Luma Photon")
                
                if not isinstance(image_url, str) or not image_url.startswith('http'):
                    return (idx, False, None, None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Luma Photon")
                
                caption = f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'
                return (idx, True, image_url, caption, None)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx} —á–µ—Ä–µ–∑ Luma Photon: {e}")
                return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Luma Photon: {e}")
        
        elif selected_model == 'Recraft AI':
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
                if not os.environ.get('REPLICATE_API_TOKEN'):
                    return (idx, False, None, None, "API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Recraft AI
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞
                format_type = state.get('format', 'instagrampost')
                size = get_replicate_size_for_model('Recraft AI', format_type)
                
                # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∏–ª–∏ Recraft AI
                image_gen_style = state.get('image_gen_style', '')
                recraft_style = "any"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                if image_gen_style:
                    if image_gen_style == '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º':
                        recraft_style = "line_art"
                    elif image_gen_style == '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è':
                        recraft_style = "engraving"
                    elif image_gen_style == '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º':
                        recraft_style = "any"
                    elif image_gen_style == '–ê–∫–≤–∞—Ä–µ–ª—å':
                        recraft_style = "linocut"
                    elif image_gen_style == '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å':
                        recraft_style = "engraving"
                    elif image_gen_style == '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':
                        recraft_style = "line_circuit"
                
                if send_text:
                    await send_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–µ–∑ Recraft AI...\n\nüí° –°–æ–≤–µ—Ç: Recraft AI –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–∞, –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏\nüé® –°—Ç–∏–ª—å: {recraft_style}\nüìÑ –§–æ—Ä–º–∞—Ç: SVG (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞)")
                
                recraft_params = {
                    "prompt": prompt_with_style,
                    "size": size,
                    "style": recraft_style
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Recraft AI
                try:
                    output = await replicate_run_async(
                        "recraft-ai/recraft-v3-svg",
                        recraft_params,
                        timeout=120
                    )
                except Exception as e:
                    logging.error(f"Recraft AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Recraft AI: {e}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
                image_url = None
                
                
                if hasattr(output, 'url'):
                    if callable(output.url):
                        image_url = output.url()
                    else:
                        image_url = output.url
                elif hasattr(output, '__iter__') and not isinstance(output, str):
                    try:
                        output_list = list(output)
                        if output_list:
                            image_url = output_list[0]
                    except Exception as e:
                        return (idx, False, None, None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                else:
                    image_url = output
                
                if not image_url:
                    return (idx, False, None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Recraft AI")
                
                if isinstance(image_url, bytes):
                    try:
                        image_url = image_url.decode('utf-8')
                    except UnicodeDecodeError:
                        return (idx, False, None, None, "–ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Recraft AI")
                
                if not isinstance(image_url, str) or not image_url.startswith('http'):
                    return (idx, False, None, None, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø URL –æ—Ç Recraft AI")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ SVG
                if send_text:
                    await send_text(f"üé® **Recraft AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª SVG —Ñ–∞–π–ª!**\n\n"
                                  f"üìÑ **–ü–æ—á–µ–º—É –Ω–µ –≤–∏–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?**\n"
                                  f"SVG - —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞, –∫–æ—Ç–æ—Ä—É—é Telegram –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
                                  f"üì• **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n"
                                  f"[–°–∫–∞—á–∞—Ç—å SVG —Ñ–∞–π–ª]({image_url})\n\n"
                                  f"üí° **SVG –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤:**\n"
                                  f"‚Ä¢ Adobe Illustrator\n"
                                  f"‚Ä¢ Inkscape (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
                                  f"‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä–µ\n"
                                  f"‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö", parse_mode='Markdown')
                
                caption = f'–í–∞—Ä–∏–∞–Ω—Ç {idx}'
                return (idx, True, image_url, caption, None)
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx} —á–µ—Ä–µ–∑ Recraft AI: {e}")
                return (idx, False, None, None, f"–û—à–∏–±–∫–∞ Recraft AI: {e}")
        
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return (idx, False, None, None, f"–ú–æ–¥–µ–ª—å {selected_model} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {e}")
        return (idx, False, None, None, f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def init_http_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP —Å–µ—Å—Å–∏—é –¥–ª—è aiohttp"""
    global HTTP_SESSION
    if HTTP_SESSION is None:
        connector = aiohttp.TCPConnector(limit=100, limit_per_host=30)
        timeout = aiohttp.ClientTimeout(total=300)
        HTTP_SESSION = aiohttp.ClientSession(connector=connector, timeout=timeout)
    return HTTP_SESSION

async def close_http_session():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é"""
    global HTTP_SESSION
    if HTTP_SESSION:
        await HTTP_SESSION.close()
        HTTP_SESSION = None

async def replicate_run_async(model: str, input_params: Dict[str, Any], timeout: int = 300) -> Any:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è replicate.run
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
    """
    try:
        loop = asyncio.get_event_loop()
        result = await asyncio.wait_for(
            loop.run_in_executor(
                THREAD_POOL,
                lambda: replicate.run(model, input=input_params)
            ),
            timeout=timeout
        )
        return result
    except asyncio.TimeoutError:
        logging.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ replicate.run –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ replicate.run –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
        raise

async def openai_chat_completion_async(messages: list, model: str = "gpt-4o-mini", max_tokens: int = 800, temperature: float = 0.7) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è OpenAI chat completion
    """
    try:
        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        loop = asyncio.get_event_loop()
        response = await asyncio.wait_for(
            loop.run_in_executor(
                THREAD_POOL,
                lambda: client.chat.completions.create(
                    model=model,
                    messages=messages,
                    max_tokens=max_tokens,
                    temperature=temperature,
                )
            ),
            timeout=30.0
        )
        return response.choices[0].message.content.strip()
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ OpenAI chat completion")
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ OpenAI chat completion: {e}")
        raise

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def analytics_db_add_user_async(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.add_user"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.add_user(user_id, username, first_name, last_name)
    )

async def analytics_db_update_user_activity_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.update_user_activity"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.update_user_activity(user_id)
    )

async def analytics_db_log_action_async(user_id: int, action_type: str, action_data: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.log_action"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.log_action(user_id, action_type, action_data)
    )

async def analytics_db_get_user_limits_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_user_limits"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_user_limits(user_id)
    )

async def analytics_db_get_user_credits_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_user_credits"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_user_credits(user_id)
    )

async def analytics_db_get_free_generations_left_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_free_generations_left"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_free_generations_left(user_id)
    )

async def analytics_db_increment_free_generations_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.increment_free_generations"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.increment_free_generations(user_id)
    )

async def analytics_db_use_credits_async(user_id: int, amount: int, description: str = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.use_credits"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.use_credits(user_id, amount, description)
    )

async def analytics_db_log_generation_async(user_id: int, model_name: str, format_type: str, 
                                          prompt: str, image_count: int, success: bool, 
                                          error_message: str = None, generation_time: float = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.log_generation"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.log_generation(user_id, model_name, format_type, prompt, 
                                          image_count, success, error_message, generation_time)
    )

async def analytics_db_get_user_stats_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_user_stats"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_user_stats(user_id)
    )

async def analytics_db_get_global_stats_async(days: int = 30):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_global_stats"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_global_stats(days)
    )

async def analytics_db_get_daily_stats_async(days: int = 7):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_daily_stats"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_daily_stats(days)
    )

async def analytics_db_get_total_credits_statistics_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_total_credits_statistics"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_total_credits_statistics()
    )

async def analytics_db_get_pending_payments_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_pending_payments"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_pending_payments()
    )

async def analytics_db_get_old_pending_payments_async(hours: int = 24):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_old_pending_payments"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_old_pending_payments(hours)
    )

async def analytics_db_get_credit_transaction_by_payment_id_async(payment_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_credit_transaction_by_payment_id"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_credit_transaction_by_payment_id(payment_id)
    )

async def analytics_db_add_credits_async(user_id: int, amount: int, payment_id: int = None, 
                                        description: str = "–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.add_credits"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.add_credits(user_id, amount, payment_id, description)
    )

async def analytics_db_create_credit_transaction_with_payment_async(user_id: int, amount: int, description: str, payment_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.create_credit_transaction_with_payment"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.create_credit_transaction_with_payment(user_id, amount, description, payment_id)
    )

async def analytics_db_get_payment_by_betatransfer_id_async(betatransfer_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_payment_by_betatransfer_id"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_payment_by_betatransfer_id(betatransfer_id)
    )

async def analytics_db_update_payment_status_async(payment_id: str, status: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.update_payment_status"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.update_payment_status(payment_id, status)
    )

async def analytics_db_get_payment_by_order_id_async(order_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_payment_by_order_id"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_payment_by_order_id(order_id)
    )


async def analytics_db_create_payment_with_credits_async(user_id: int, amount: float, currency: str = "UAH", 
                                                       payment_id: str = None, order_id: str = None, 
                                                       credit_amount: int = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.create_payment_with_credits"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.create_payment_with_credits(user_id, amount, currency, payment_id, order_id, credit_amount)
    )

async def analytics_db_get_user_info_by_id_async(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è analytics_db.get_user_info_by_id"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        THREAD_POOL,
        lambda: analytics_db.get_user_info_by_id(user_id)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_pending_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∑–∞—á–∏—Å–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        print("üîÑ [PAYMENT CHECK] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É pending –ø–ª–∞—Ç–µ–∂–µ–π...")
        logging.info("üîÑ [PAYMENT CHECK] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É pending –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        pending_payments = await analytics_db_get_pending_payments_async()
        
        if not pending_payments:
            print("‚úÖ [PAYMENT CHECK] Pending –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            logging.info("‚úÖ [PAYMENT CHECK] Pending –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return
        
        print(f"üîç [PAYMENT CHECK] –ù–∞–π–¥–µ–Ω–æ {len(pending_payments)} pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        logging.info(f"üîç [PAYMENT CHECK] –ù–∞–π–¥–µ–Ω–æ {len(pending_payments)} pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        for i, payment in enumerate(pending_payments, 1):
            payment_id = payment.get('betatransfer_id')
            user_id = payment.get('user_id')
            order_id = payment.get('order_id')
            amount = payment.get('amount', 0)
            currency = payment.get('currency', 'UAH')
            credit_amount = payment.get('credit_amount', 0)
            
            print(f"üìã [PAYMENT {i}/{len(pending_payments)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂: {order_id} (ID: {payment_id})")
            logging.info(f"üìã [PAYMENT {i}/{len(pending_payments)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂: {order_id} (ID: {payment_id})")
            
            if not payment_id:
                print(f"‚ö†Ô∏è [PAYMENT {i}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç–µ–∂ {order_id} - –Ω–µ—Ç Betatransfer ID")
                logging.warning(f"‚ö†Ô∏è [PAYMENT {i}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç–µ–∂ {order_id} - –Ω–µ—Ç Betatransfer ID")
                continue
            
            try:
                print(f"üåê [PAYMENT {i}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É Betatransfer API –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}...")
                logging.info(f"üåê [PAYMENT {i}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É Betatransfer API –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Betatransfer API –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                loop = asyncio.get_event_loop()
                status_result = await loop.run_in_executor(
                    THREAD_POOL,
                    lambda: betatransfer_api.get_payment_status(payment_id)
                )
                
                if 'error' in status_result:
                    print(f"‚ùå [PAYMENT {i}] –û—à–∏–±–∫–∞ API Betatransfer: {status_result['error']}")
                    logging.error(f"‚ùå [PAYMENT {i}] –û—à–∏–±–∫–∞ API Betatransfer: {status_result['error']}")
                    continue
                
                payment_status = status_result.get('status')
                print(f"üìä [PAYMENT {i}] –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_status}")
                logging.info(f"üìä [PAYMENT {i}] –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_status}")
                
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                if payment_status == 'success':
                    print(f"‚úÖ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—É–º–º–∞: {amount} {currency}, –ö—Ä–µ–¥–∏—Ç—ã: {credit_amount}")
                    logging.info(f"‚úÖ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—É–º–º–∞: {amount} {currency}, –ö—Ä–µ–¥–∏—Ç—ã: {credit_amount}")
                    
                    if credit_amount and credit_amount > 0:
                        print(f"üîç [PAYMENT {i}] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂...")
                        logging.info(f"üîç [PAYMENT {i}] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
                        # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —ç—Ç–∏–º payment_id
                        existing_transaction = await analytics_db_get_credit_transaction_by_payment_id_async(payment_id)
                        
                        if not existing_transaction:
                            print(f"üí∞ [PAYMENT {i}] –ó–∞—á–∏—Å–ª—è–µ–º {credit_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                            logging.info(f"üí∞ [PAYMENT {i}] –ó–∞—á–∏—Å–ª—è–µ–º {credit_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                            
                            # –ö—Ä–µ–¥–∏—Ç—ã –µ—â–µ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã, –∑–∞—á–∏—Å–ª—è–µ–º
                            await analytics_db_add_credits_async(user_id, credit_amount)
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–ª–∞—Ç–µ–∂—É
                            await analytics_db_create_credit_transaction_with_payment_async(user_id, credit_amount, f"–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø–ª–∞—Ç–µ–∂ {payment_id})", payment_id)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                            await analytics_db_update_payment_status_async(payment_id, 'success')
                            
                            print(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                            logging.info(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            notification_message = (
                                f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"
                                f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ:** {credit_amount:,} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                                f"üí∞ **–°—É–º–º–∞:** {payment.get('amount')} {payment.get('currency', 'KGS')}\n"
                                f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
                            )
                            
                            await send_telegram_notification(user_id, notification_message)
                            print(f"üéâ [PAYMENT {i}] –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤")
                            logging.info(f"üéâ [PAYMENT {i}] –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤")
                        else:
                            print(f"‚ÑπÔ∏è [PAYMENT {i}] –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ –ø–ª–∞—Ç–µ–∂ {payment_id}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å")
                            logging.info(f"‚ÑπÔ∏è [PAYMENT {i}] –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ –ø–ª–∞—Ç–µ–∂ {payment_id}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å")
                            
                            # –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                            await analytics_db_update_payment_status_async(payment_id, 'success')
                
                elif payment_status == 'failed':
                    print(f"‚ùå [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ")
                    logging.info(f"‚ùå [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    await analytics_db_update_payment_status_async(payment_id, 'failed')
                
                elif payment_status == 'error':
                    print(f"‚ö†Ô∏è [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    logging.info(f"‚ö†Ô∏è [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    await analytics_db_update_payment_status_async(payment_id, 'error')
                    
                    print(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                    logging.info(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
                    error_message = (
                        f"‚ùå **–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                        f"üí∞ **–°—É–º–º–∞:** {payment.get('amount')} {payment.get('currency', 'KGS')}\n"
                        f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                    await send_telegram_notification(user_id, error_message)
                
                elif payment_status == 'not_paid_timeout':
                    print(f"‚è∞ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∏—Å—Ç–µ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                    logging.info(f"‚è∞ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∏—Å—Ç–µ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    await analytics_db_update_payment_status_async(payment_id, 'timeout')
                    
                    print(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                    logging.info(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                    timeout_message = (
                        f"‚è∞ **–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ**\n\n"
                        f"üí∞ **–°—É–º–º–∞:** {payment.get('amount')} {payment.get('currency', 'KGS')}\n"
                        f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                        f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–æ –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è.\n\n"
                        f"üîß **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                        f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @aiimagebotmanager\n"
                        f"‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ\n"
                        f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
                        f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `/my_id`)\n"
                        f"‚Ä¢ –ú—ã –∑–∞—á–∏—Å–ª–∏–º –∫—Ä–µ–¥–∏—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n"
                        f"‚ùå **–ù–ï —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂** - —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–≤–æ–π–Ω–æ–π –æ–ø–ª–∞—Ç–µ!"
                    )
                    await send_telegram_notification(user_id, timeout_message)
                
                elif payment_status == 'not_paid':
                    print(f"‚è≥ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (not_paid)")
                    logging.info(f"‚è≥ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (not_paid)")
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—Å—Ç–∞–≤–∞–ª—Å—è –≤ pending
                    await analytics_db_update_payment_status_async(payment_id, 'manual_review')
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                    not_paid_message = (
                        f"‚è≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                        f"üí∞ **–°—É–º–º–∞:** {payment.get('amount')} {payment.get('currency', 'KGS')}\n"
                        f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                        f"–í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∞ –±–∞–Ω–∫–∞, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ —Ö–æ–ª–¥. –ß—Ç–æ–±—ã –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–ª–∞—Ç–µ–∂, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @aiimagebotmanager –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ:\n"
                        f"‚Ä¢ –°–∫—Ä–∏–Ω/—á–µ–∫ –æ–ø–ª–∞—Ç—ã\n"
                        f"‚Ä¢ –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
                        f"‚Ä¢ –í–∞—à ID (–∫–æ–º–∞–Ω–¥–∞ `/my_id`)\n"
                        f"‚Ä¢ –°—É–º–º—É –∏ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã\n\n"
                        f"–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–µ–º –¥–∏—Å–ø—É—Ç. –ö—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é."
                    )
                    await send_telegram_notification(user_id, not_paid_message)
                elif payment_status == 'cancelled' or payment_status == 'canceled' or payment_status == 'cancel':
                    print(f"üö´ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
                    logging.info(f"üö´ [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    await analytics_db_update_payment_status_async(payment_id, 'cancelled')
                    
                    print(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                    logging.info(f"üì± [PAYMENT {i}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞
                    cancelled_message = (
                        f"üö´ **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                        f"üí∞ **–°—É–º–º–∞:** {payment.get('amount')} {payment.get('currency', 'KGS')}\n"
                        f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {payment_id}\n\n"
                        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
                    )
                    await send_telegram_notification(user_id, cancelled_message)
                
                else:
                    print(f"‚ÑπÔ∏è [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {payment_status}")
                    logging.info(f"‚ÑπÔ∏è [PAYMENT {i}] –ü–ª–∞—Ç–µ–∂ {payment_id} –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {payment_status}")
                
            except Exception as e:
                print(f"üí• [PAYMENT {i}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                logging.error(f"üí• [PAYMENT {i}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                continue
        
        print(f"‚úÖ [PAYMENT CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π")
        logging.info(f"‚úÖ [PAYMENT CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π")
                
    except Exception as e:
        print(f"üí• [PAYMENT CHECK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        logging.error(f"üí• [PAYMENT CHECK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def start_payment_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üöÄ [PAYMENT POLLING] –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
    logging.info("üöÄ [PAYMENT POLLING] –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    while True:
        try:
            print("‚è∞ [PAYMENT POLLING] –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π...")
            logging.info("‚è∞ [PAYMENT POLLING] –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π...")
            
            await check_pending_payments()
            
            print("üò¥ [PAYMENT POLLING] –û–∂–∏–¥–∞–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            logging.info("üò¥ [PAYMENT POLLING] –û–∂–∏–¥–∞–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            
            # –ñ–¥–µ–º 45 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(45)
        except Exception as e:
            print(f"üí• [PAYMENT POLLING] –û—à–∏–±–∫–∞ –≤ payment polling: {e}")
            logging.error(f"üí• [PAYMENT POLLING] –û—à–∏–±–∫–∞ –≤ payment polling: {e}")
            
            print("üò¥ [PAYMENT POLLING] –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
            logging.info("üò¥ [PAYMENT POLLING] –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(15)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è callback
flask_app = Flask(__name__)

async def send_telegram_notification(user_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logging.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': user_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        loop = asyncio.get_event_loop()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
        session = await init_http_session()
        async with session.post(url, data=data) as response:
            if response.status == 200:
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            else:
                response_text = await response.text()
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status} - {response_text}")
                return False
        
        
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

@flask_app.route('/payment/ca', methods=['POST'])
async def payment_callback():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Betatransfer
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback (—Ñ–æ—Ä–º–∞—Ç: application/x-www-form-urlencoded)
        callback_data = request.form.to_dict()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
        
        if not callback_data:
            logging.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
            return jsonify({"error": "Empty callback data"}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ API –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(
            THREAD_POOL,
            lambda: betatransfer_api.process_callback(callback_data)
        )
        
        if result.get("status") == "error":
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {result.get('error')}")
            return jsonify({"error": result.get("error")}), 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = result.get("payment_info", {})
        payment_id = payment_info.get("payment_id")
        status = payment_info.get("status")
        amount = payment_info.get("amount")
        order_id = payment_info.get("order_id")
        currency = payment_info.get("currency", "KGS")
        
        logging.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        if status == "completed":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –±–∞–∑—ã –ø–æ betatransfer_id
            payment_record = await analytics_db_get_payment_by_betatransfer_id_async(payment_id)
            if payment_record:
                user_id = payment_record.get("user_id")
                credit_amount = payment_record.get("credit_amount")
                
                # –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await analytics_db_add_credits_async(user_id, credit_amount)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                await analytics_db_update_payment_status_async(payment_id, "completed")
                
                logging.info(f"–ö—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {credit_amount}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                             f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {credit_amount}\n"
                             f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                             f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            else:
                logging.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif status == "cancelled" or status == "canceled" or status == "cancel":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –±–∞–∑—ã –ø–æ betatransfer_id
            payment_record = await analytics_db_get_payment_by_betatransfer_id_async(payment_id)
            if payment_record:
                user_id = payment_record.get("user_id")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                await analytics_db_update_payment_status_async(payment_id, "cancelled")
                
                logging.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"üö´ **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                             f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                             f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                             f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            else:
                logging.error(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Betatransfer)
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@flask_app.route('/payment/su', methods=['GET'])
def payment_success():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return jsonify({
        "status": "success",
        "message": "Payment completed successfully"
    })

@flask_app.route('/payment/fai', methods=['GET'])
def payment_fail():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return jsonify({
        "status": "failed",
        "message": "Payment failed"
    })

@flask_app.route('/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({"status": "healthy"})

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(

    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',

    level=logging.INFO

)



# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

USER_STATE = {}



# –ù–æ–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞

STEP_FORMAT = 'format'

STEP_STYLE = 'style'

STEP_TOPIC = 'topic'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_DONE = 'done'    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É

STEP_IMAGE_COUNT = 'image_count'

STEP_IMAGE_MODEL = 'image_model'

STEP_IMAGE_GENERATION = 'image_generation'

STEP_IMAGE_EDIT = 'image_edit'

STEP_VIDEO_QUALITY = 'video_quality'

STEP_VIDEO_DURATION = 'video_duration'

STEP_VIDEO_GENERATION = 'video_generation'

STEP_PROMPT_REVIEW = 'prompt_review'  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, —É–ª—É—á—à–∞—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç

STEP_PROMPT_ENHANCEMENT = 'prompt_enhancement'  # –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞



FORMATS = ['Instagram Reels', 'TikTok', 'YouTube Shorts', 'Instagram Post', 'Instagram Stories', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']

STYLES = ['üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ', 'üòÑ –õ–µ–≥–∫–æ', 'üî• –ü—Ä–æ–¥–∞—é—â–µ', 'üí° –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', 'üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π']



# –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

IMAGE_GEN_STYLES = [

    '–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º',

    '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',

    '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',

    '–ê–∫–≤–∞—Ä–µ–ª—å',

    '–ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',

    '–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'

]



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

IMAGE_GEN_MODELS = [

    'Ideogram',

    'Bytedance (Seedream-3)',

    'Bytedance (Seedream-4)',

    'Google Imagen 4 Ultra',

    'Luma Photon',

    'Recraft AI'

]



# –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

MODEL_TIPS = {

    'Ideogram': """‚ö° Ideogram v3 turbo
üìå –ß—Ç–æ –≤–∞–∂–Ω–æ:
–†–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, —á–µ—Ç–∫–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏.
–•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç —Å—Ç–∏–ª–∏ ("poster", "magazine cover", "synthwave").
–ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö.

üëâ –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: "cyberpunk poster of a samurai, bold typography saying Neo Tokyo".
–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞–π –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º (1‚Äì4 —Å–ª–æ–≤–∞).
–õ—É—á—à–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∏–ª—å –ø–æ—Å—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (synthwave, minimalism, retro-futurism).""",

    'Bytedance (Seedream-3)': """‚ö° Bytedance Seedream-3
üìå –ß—Ç–æ –≤–∞–∂–Ω–æ:
–ù–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.
–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.

üëâ –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤, –ø–µ–π–∑–∞–∂–µ–π –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω.
–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.

‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏—Ü–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π.""",

    'Bytedance (Seedream-4)': """üöÄ Bytedance Seedream-4
üìå –ß—Ç–æ –≤–∞–∂–Ω–æ:
4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.

üëâ –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–Ω–æ–≥–æ–æ–±—ä–µ–∫—Ç–Ω—ã–µ —Å—Ü–µ–Ω—ã.
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.""",

    'Google Imagen 4 Ultra': """üî¨ Google Imagen 4 Ultra
üìå –ß—Ç–æ –≤–∞–∂–Ω–æ:
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è.
–û—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã.
–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π.

üëâ –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è.
–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏ –Ω–∞—É—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.""",

    'Luma Photon': """üèóÔ∏è Luma Photon
üìå –ß—Ç–æ –≤–∞–∂–Ω–æ:
–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.
–•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

üëâ –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
–ú–æ–∂–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏.
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç-–∞—Ä—Ç–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.""",

    'Recraft AI': """üé® Recraft AI
üìå –ß—Ç–æ –≤–∞–∂–Ω–æ:
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –¥–∏–∑–∞–π–Ω–µ, –≤–µ–∫—Ç–æ—Ä–∞—Ö –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö.
–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω–æ–º.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SVG –∏ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É.

üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:
‚Ä¢ any - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
‚Ä¢ line_art - –ª–∏–Ω–µ–π–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ engraving - –≥—Ä–∞–≤—é—Ä–∞
‚Ä¢ linocut - –ª–∏–Ω–æ–≥—Ä–∞–≤—é—Ä–∞  
‚Ä¢ line_circuit - —Å—Ö–µ–º–∞—Ç–∏—á–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞

üëâ –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–∏–∑–∞–π–Ω–∞: "logo", "brand", "vector".
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –∏ –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
–°—Ç–∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞–ø–ø—è—Ç—Å—è –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."""

}



# –ú–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

VIDEO_GEN_MODELS = [

    'Bytedance Seedance 1.0 Pro'

]



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–∫—Ä–∞—Ç–∫–∏–µ)

MODEL_DESCRIPTIONS = {

    'Ideogram': '—Ç–µ–∫—Å—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø—ã',

    'Bytedance (Seedream-3)': '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',

    'Bytedance (Seedream-4)': '4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',

    'Google Imagen 4 Ultra': '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',

    'Luma Photon': '–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å',

    'Recraft AI': '–¥–∏–∑–∞–π–Ω –∏ –≤–µ–∫—Ç–æ—Ä—ã'

}



# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ

VIDEO_MODEL_DESCRIPTIONS = {

            'Bytedance Seedance 1.0 Pro': 'text-to-video + image-to-video, 480p/720p/1080p, aspect_ratio'

}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



async def credits_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    try:
        stats = await analytics_db_get_total_credits_statistics_async()
        stats_text = f"""ü™ô **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–†–ï–î–ò–¢–û–í –ë–û–¢–ê**
üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏: {stats['total_users']}
‚Ä¢ ü™ô –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_purchased']:,}
‚Ä¢ üí∏ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_used']:,}
‚Ä¢ üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_balance']:,}
üí° **–î–õ–Ø –ü–û–ü–û–õ–ù–ï–ù–ò–Ø REPLICATE/OPENAI:**
üî• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: **{stats['total_purchased']:,}**
üí∞ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å—É–º–º—É: **—Å–æ–º{stats['completed_revenue']:,.2f}**"""
        await update.message.reply_text(stats_text, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = update.effective_user

    await analytics_db_add_user_async(

        user_id=user.id,

        username=user.username,

        first_name=user.first_name,

        last_name=user.last_name

    )

    await analytics_db_update_user_activity_async(user.id)

    await analytics_db_log_action_async(user.id, "start_command")

    

    welcome_text = """

üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!



–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.



üí° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –º–æ–¥–µ–ª—å

‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å

‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"

üîÑ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å - –Ω–∞–ø–∏—à–∏—Ç–µ /start

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - /stats

"""

    

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    if CONTENT_CREATION_ENABLED:
        keyboard.append([InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")])

    keyboard.append([InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")])
    keyboard.append([InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")])
    keyboard.append([InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")])
    keyboard.append([InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")])
    keyboard.append([InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")])
    keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")])
    keyboard.append([InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")])

    

    await update.message.reply_text(

        welcome_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )

    USER_STATE[update.effective_user.id] = {'step': 'main_menu'}



def get_image_size_for_format(format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

        if simple_orientation == 'vertical':

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'horizontal':

            return "1792x1024"  # 16:9 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif simple_orientation == 'square':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return "1024x1024"

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_format(format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è Replicate –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    elif format_type == 'instagrampost':

        # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤

        return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        return "1024x1024"



def get_replicate_size_for_model(model_name, format_type):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    if model_name == 'Bytedance (Seedream-3)':

        # Bytedance –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "small", "regular", "big"

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    elif model_name == 'Bytedance (Seedream-4)':

        # Bytedance Seedream-4 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "big"  # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        else:

            return "regular"  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

    

    elif model_name == 'Ideogram':

        # Ideogram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Google Imagen 4 Ultra':

        # Google Imagen –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    elif model_name == 'Luma Photon':

        # Luma Photon –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    


    elif model_name == 'Recraft AI':

        # Recraft AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

            return "1024x1792"  # 9:16 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        elif format_type == 'instagrampost':

            return "1024x1024"  # 1:1 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω

        else:

            return "1024x1024"

    

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        return get_replicate_size_for_format(format_type)



def get_replicate_params_for_model(model_name, format_type, simple_orientation=None):

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower().replace(' ', '')

    

    # –í—Å–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç aspect_ratio 9:16

    if format_type in ['instagramstories', 'instagramreels', 'tiktok', 'youtubeshorts']:

        return {"aspect_ratio": "9:16"}

    

    # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    elif format_type == 'instagrampost':

        return {"aspect_ratio": "1:1"}

    

    # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

    elif format_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        if simple_orientation == 'vertical':

            return {"aspect_ratio": "9:16"}

        elif simple_orientation == 'horizontal':

            return {"aspect_ratio": "16:9"}

        elif simple_orientation == 'square':

            return {"aspect_ratio": "1:1"}

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            return {"aspect_ratio": "1:1"}

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    else:

        return {"aspect_ratio": "1:1"}



# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ —Å–ª–æ–≤ '–¥–µ—Ç–∏', '–¥–µ—Ç–µ–π', '–¥–µ—Ç—Å–∫')

BANNED_WORDS = [

    '–æ–±–Ω–∞–∂', '—ç—Ä–æ—Ç', '—Å–µ–∫—Å', 'genital', 'nude', 'naked', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω', 'sex', 'porn', 'anus', 'vagina', 'penis', 'ass', 'fuck', 'masturb', '—Å—É–∏—Ü–∏–¥', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', 'violence', 'kill', 'murder', 'blood', 'gore', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—É–±–∏–π—Å—Ç–≤–æ', '—É–±–∏–π—Ü–∞', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', 'rape', 'pedoph', 'pedo', 'child', 'suicide', 'suicidal', 'hang', '–ø–æ–≤–µ—Å', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', '—Ä–∞—Å—á–ª–µ–Ω', '—É–±–∏–π', '–Ω–∞—Å–∏–ª–∏–µ', '–Ω–∞—Å–∏–ª—å–Ω–∏–∫', '–Ω–∞—Å–∏–ª', '—É–±–∏–π—Ü–∞', '—É–±–∏–π—Å—Ç–≤–æ', '—Ä–∞—Å—á–ª–µ–Ω', '—Ä–∞—Å—Å—Ç—Ä–µ–ª', 'blood', 'gore', 'kill', 'murder', 'violence', 'rape', 'suicide', 'child', 'porn', 'nude', 'naked', 'sex', 'fuck', 'masturb', 'penis', 'vagina', 'anus', 'ass', 'genital', '—ç—Ä–æ—Ç', '–æ–±–Ω–∞–∂', '–∏–Ω—Ç–∏–º', '–ø–æ—Ä–Ω'

]



def get_format_tips(format_type):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""

    format_type = format_type.lower()

    

    if format_type in ['instagram reels', 'tiktok', 'youtube shorts']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ –ª—é–¥—è—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Ç—É—Ä–±–∞–∑–∞ —Å —Ä—ã–±–∞–ª–∫–æ–π", "—Å–ø–æ—Ä—Ç–∑–∞–ª —Å —Ç—Ä–µ–Ω–∏—Ä—É—é—â–∏–º–∏—Å—è", "–∫–∞—Ñ–µ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Ç—É—Ä–±–∞–∑–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ, –±–∞–Ω—è —Å –ø–∞—Ä–æ–º"

‚ùå –ü–ª–æ—Ö–æ: "–æ—Ç–¥—ã—Ö" """

    

    elif format_type in ['instagram post']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ —Å—Ç–∏–ª–µ –∏ –¥–∏–∑–∞–π–Ω–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å—Ç–∏–ª—å–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∑–∞–ª", "—É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—É—Ä–±–∞–∑–∞ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –¥–æ–º–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞" """

    

    elif format_type in ['instagram stories']:

        return """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è Stories:

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É)

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "–∫–∞–∫—Ä —Ç—É—Ä–±–∞–∑—ã", "—Å–ø–æ—Ä—Ç–∑–∞–ª"



‚úÖ –•–æ—Ä–æ—à–æ: "–∫–∞–¥—Ä —Ç—É—Ä–±–∞–∑—ã —Å –º–µ—Å—Ç–æ–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ùå –ü–ª–æ—Ö–æ: "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥" """

    

    else:

        return """üí° –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:

‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω", "—É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"



‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"

‚ùå –ü–ª–æ—Ö–æ: "–∫—Ä–∞—Å–∏–≤–æ" """



async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = await analytics_db_get_user_limits_async(user_id)

    credits = await analytics_db_get_user_credits_async(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    free_generations_left = await analytics_db_get_free_generations_left_async(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    if CONTENT_CREATION_ENABLED:
        keyboard.append([InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")])

    keyboard.append([InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")])
    keyboard.append([InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_generation")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")])
    keyboard.append([InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")])
    keyboard.append([InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")])
    keyboard.append([InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")])
    keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")])
    keyboard.append([InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")])

    

    await update.callback_query.edit_message_text(

        f"üé® AI Image Generator\n\n{status_text}"

        "üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (3 —Ä–∞–∑–∞)\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (3 —Ä–∞–∑–∞)\n\n"

        "üí∞ **–ü–ª–∞—Ç–Ω–æ (—Ç—Ä–µ–±—É—é—Ç –∫—Ä–µ–¥–∏—Ç—ã):**\n"

        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (4+ —Ä–∞–∑) - –æ—Ç 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

        "‚Ä¢ üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ - –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

        "ü™ô **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!**",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –∏–ª–∏ "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   ‚ö° Ideogram v3 turbo
   –ú–æ–¥–µ–ª—å –¥–ª—è —è—Ä–∫–∏—Ö –ø–æ—Å—Ç–µ—Ä–æ–≤, –∞—Ä—Ç-—Ä–∞–±–æ—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–µ–º–æ–≤, –∞—Ñ–∏—à –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ Instagram-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.

   üì∏ Bytedance Seedream 3
   –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ. –°–∏–ª—å–Ω–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª—é–¥–µ–π, –æ–¥–µ–∂–¥—ã, –ª–∞–π—Ñ—Å—Ç–∞–π–ª-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
   ‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏—Ü–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π

   üöÄ Bytedance Seedream 4
   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –°–æ–∑–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–æ–π –∏ —Å–ª–æ–∂–Ω—ã–º–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º–∏.

   üñº Google Imagen 4 Ultra
   –ú–æ–¥–µ–ª—å –¥–ª—è –≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏–∑–º–∞. –î–µ–ª–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, —Å–æ—á–Ω—ã–µ –∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
   ‚ú® –í–∞–∂–Ω–æ: —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π.

   üåå Luma Photon
   –ó–∞—Ç–æ—á–µ–Ω–∞ –ø–æ–¥ 3D-—Ä–µ–Ω–¥–µ—Ä—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –∫–∏–Ω–æ—à–Ω—ã–µ —Å—Ü–µ–Ω—ã.
   –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ ‚Äî –µ—ë —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞.

   ‚úíÔ∏è Recraft v3 SVG
   –ú–æ–¥–µ–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏. –î–µ–ª–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø—ã, –∏–∫–æ–Ω–∫–∏ –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG.



3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üîÑ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:

‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ —á–∞—Ç –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é —Ä—è–¥–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

‚Ä¢ –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –∫ –Ω–∞—á–∞–ª—É

"""

    

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    if CONTENT_CREATION_ENABLED:
        keyboard.append([InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="main_menu")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

    

    await update.callback_query.edit_message_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""

    about_text = """

‚ÑπÔ∏è –û –±–æ—Ç–µ AI Image Generator:



ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤



üé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏:

‚Ä¢ FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

‚Ä¢ Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

‚Ä¢ Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

‚Ä¢ Bytedance (Seedream-4) (4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)

‚Ä¢ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

‚Ä¢ Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)


‚Ä¢ Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



üì± –§–æ—Ä–º–∞—Ç—ã:

‚Ä¢ Instagram –ø–æ—Å—Ç—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ 1:1)

‚Ä¢ Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ Instagram Reels (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ TikTok (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 9:16)

‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã



üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π

‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="main_menu")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        about_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [

        [InlineKeyboardButton("üì± Instagram Reels", callback_data="format:Instagram Reels")],

        [InlineKeyboardButton("üéµ TikTok", callback_data="format:TikTok")],

        [InlineKeyboardButton("üì∫ YouTube Shorts", callback_data="format:YouTube Shorts")],

        [InlineKeyboardButton("üì∏ Instagram Post", callback_data="format:Instagram Post")],

        [InlineKeyboardButton("üì± Instagram Stories", callback_data="format:Instagram Stories")],

        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="format:–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")],

        [InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="format:custom")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def show_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""

    keyboard = [


        [InlineKeyboardButton("üì± Ideogram (–ª–∏–¥–µ—Ä –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö: –±–∞–Ω–Ω–µ—Ä—ã, –ø–æ—Å—Ç–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏)", callback_data="image_gen_model:Ideogram")],

        [InlineKeyboardButton("‚ö° Bytedance Seedream-3 (–Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è)", callback_data="image_gen_model:Bytedance (Seedream-3)")],

        [InlineKeyboardButton("üöÄ Bytedance Seedream-4 (4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)", callback_data="image_gen_model:Bytedance (Seedream-4)")],

        [InlineKeyboardButton("üî¨ Google Imagen 4 Ultra (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)", callback_data="image_gen_model:Google Imagen 4 Ultra")],

        [InlineKeyboardButton("üèóÔ∏è Luma Photon (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="image_gen_model:Luma Photon")],


        [InlineKeyboardButton("üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, –±—Ä–µ–Ω–¥-–¥–∏–∑–∞–π–Ω, SVG)", callback_data="image_gen_model:Recraft AI")],

        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:



1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" –∏–ª–∏ "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"



2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:

   üì± Instagram Reels - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –≤ Instagram

   üéµ TikTok - –¥–ª—è –≤–∏–¥–µ–æ –≤ TikTok

   üì∫ YouTube Shorts - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube

   üì∏ Instagram Post - –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Instagram

   üì± Instagram Stories - –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –≤ Instagram

   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

   üìÑ –î—Ä—É–≥–æ–µ - –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç



3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

   üé® FLUX.1 Kontext Pro (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

   üì± Ideogram (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏)

   ‚ö° Bytedance (Seedream-3) (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å)

   üöÄ Bytedance (Seedream-4) (4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)

   üî¨ Google Imagen 4 Ultra (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã)

   üèóÔ∏è Luma Photon (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞)

   üé® Recraft AI (–¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä—ã, UI)



4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:

   üí° –ü—Ä–∏–º–µ—Ä—ã: "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞–¥ –ø–ª–∞–Ω–µ—Ç–æ–π"



5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ



üí° –°–æ–≤–µ—Ç: –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!



üñºÔ∏è –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":

‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

‚Ä¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (1-10)

‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ

‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞



‚ö†Ô∏è **–í–∞–∂–Ω–æ –æ FLUX.1 Kontext Pro:**

‚Ä¢ –ò–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚Ä¢ –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π

‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "–∂–µ–Ω—â–∏–Ω–∞" –≤–º–µ—Å—Ç–æ "–∫—Ä–∞—Å–∏–≤–∞—è", "–¥–µ–≤—É—à–∫–∞" –≤–º–µ—Å—Ç–æ "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è"

‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å Ideogram, Bytedance (Seedream-3/4) –∏–ª–∏ Google Imagen



üé® **–°–æ–≤–µ—Ç—ã –ø–æ Ideogram:**

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ, —á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑

‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ

‚Ä¢ –î–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen





"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="main_menu")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        help_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def check_replicate(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Replicate API"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Replicate

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            loop = asyncio.get_event_loop()
            output = await replicate_run_async(
                    "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
                {"prompt": "test"},
                timeout=30
            )

            await update.message.reply_text("‚úÖ Replicate API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

            elif "api" in error_msg.lower() or "token" in error_msg.lower():

                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞ Replicate")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Replicate: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate: {e}")



async def test_ideogram(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Ideogram API"""

    try:

        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Ideogram v3 Turbo...")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        api_token = os.environ.get('REPLICATE_API_TOKEN')

        if not api_token:

            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ideogram v3 Turbo

        try:


            loop = asyncio.get_event_loop()
            output = await replicate_run_async(
                    "ideogram-ai/ideogram-v3-turbo",
                {"prompt": "simple test image"},
                timeout=30
            )

            

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API

            image_url = None

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ output –æ–±—ä–µ–∫—Ç–æ–º FileOutput

            if hasattr(output, 'url'):

                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ URL

                image_url = output.url()

                await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω URL –∏–∑ FileOutput: {image_url[:50]}...")

            elif hasattr(output, '__iter__') and not isinstance(output, str):

                # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)

                try:

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

                    output_list = list(output)

                    if output_list:

                        image_url = output_list[0]

                except Exception as e:

                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

                    return

            else:

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

                image_url = output

            

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è URL, –Ω–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

            if isinstance(image_url, bytes):

                try:

                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8 (–¥–ª—è URL)

                    image_url = image_url.decode('utf-8')

                except UnicodeDecodeError:

                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Ideogram")

                    return

            

            if image_url:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

                if image_url.startswith(('http://', 'https://')):

                    await update.message.reply_text("‚úÖ Ideogram v3 Turbo —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

                else:

                    await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Ideogram")

            else:

                await update.message.reply_text("‚ùå Ideogram v3 Turbo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                

        except asyncio.TimeoutError:

            await update.message.reply_text("‚ùå Ideogram v3 Turbo: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        except Exception as e:

            error_msg = str(e)

            if "insufficient_credit" in error_msg.lower():

                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Ideogram")

            else:

                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Ideogram: {error_msg}")

                

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Ideogram: {e}")



async def test_seedream4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Bytedance Seedream-4 API"""
    try:
        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Bytedance Seedream-4...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
        api_token = os.environ.get('REPLICATE_API_TOKEN')
        if not api_token:
            await update.message.reply_text("‚ùå API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Bytedance Seedream-4
        try:
            loop = asyncio.get_event_loop()
            output = await replicate_run_async(
                "bytedance/seedream-4",
                {"prompt": "simple test image, high quality"},
                timeout=30
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API
            image_url = None
            
            if hasattr(output, 'url'):
                image_url = output.url()
            elif hasattr(output, '__iter__') and not isinstance(output, str):
                try:
                    output_list = list(output)
                    if output_list:
                        image_url = output_list[0]
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
                    return
            else:
                image_url = output
            
            if not image_url:
                await update.message.reply_text("‚ùå Bytedance Seedream-4 –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return
            
            if isinstance(image_url, bytes):
                await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ URL –æ—Ç Bytedance Seedream-4")
                return
            
            if not isinstance(image_url, str) or not image_url.startswith('http'):
                await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π URL –æ—Ç Bytedance Seedream-4")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await update.message.reply_photo(
                photo=image_url,
                caption="‚úÖ Bytedance Seedream-4 —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
            )
            
        except asyncio.TimeoutError:
            await update.message.reply_text("‚ùå Bytedance Seedream-4: —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫)\n\n–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        except Exception as error:
            error_msg = str(error)
            if "insufficient credits" in error_msg.lower():
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è Bytedance Seedream-4")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Bytedance Seedream-4: {error_msg}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Bytedance Seedream-4: {e}")

async def test_image_send(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω Replicate

        if not os.environ.get('REPLICATE_API_TOKEN'):

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Ideogram
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        loop = asyncio.get_event_loop()
        output = await replicate_run_async(
                "ideogram-ai/ideogram-v3-turbo",
            {"prompt": "A simple test image of a red apple on a white background, professional photography"},
            timeout=30
        )

        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        if hasattr(output, 'url'):

            image_url = output.url()

        elif hasattr(output, '__getitem__'):

            image_url = output[0] if output else None

        elif isinstance(output, (list, tuple)) and len(output) > 0:

            image_url = output[0]

        else:

            image_url = str(output) if output else None

        

        if not image_url:

            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            return

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        await update.message.reply_photo(

            photo=image_url,

            caption="‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"

        )

        

    except Exception as e:

        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        await asyncio.wait_for(
            analytics_db_update_user_activity_async(user_id),
            timeout=5.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout updating user activity for {user_id}")

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        await asyncio.wait_for(
            analytics_db_log_action_async(user_id, "stats_command"),
            timeout=5.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout logging action for {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        user_stats = await asyncio.wait_for(
            analytics_db_get_user_stats_async(user_id),
            timeout=10.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout getting user stats for {user_id}")
        await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    

    if not user_stats:

        await update.message.reply_text(

            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

        )

        return

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {(user_stats['first_seen'].strftime('%Y-%m-%d') if hasattr(user_stats.get('first_seen'), 'strftime') else str(user_stats.get('first_seen'))[:10])}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(user_stats['last_activity'].strftime('%Y-%m-%d') if hasattr(user_stats.get('last_activity'), 'strftime') else str(user_stats.get('last_activity'))[:10])}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

    if user_stats['models_stats']:

        for model, count, avg_time, successful in user_stats['models_stats'][:5]:

            success_rate = (successful / count * 100) if count > 0 else 0

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

    if user_stats['formats_stats']:

        for format_type, count in user_stats['formats_stats'][:5]:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_simple_images")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = update.effective_user.id

    await update.message.reply_text(f"üÜî –í–∞—à ID –≤ Telegram: {user_id}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    user_id = update.effective_user.id

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º

    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    

    if user_id not in admin_ids:

        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        return

    

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        await asyncio.wait_for(
            analytics_db_update_user_activity_async(user_id),
            timeout=5.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout updating user activity for {user_id}")

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        await asyncio.wait_for(
            analytics_db_log_action_async(user_id, "admin_stats_command"),
            timeout=5.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout logging action for {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        global_stats = await asyncio.wait_for(
            analytics_db_get_global_stats_async(30),
            timeout=10.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout getting global stats for admin {user_id}")
        await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        daily_stats = await asyncio.wait_for(
            analytics_db_get_daily_stats_async(7),
            timeout=10.0
        )
    except asyncio.TimeoutError:
        logging.error(f"Timeout getting daily stats for admin {user_id}")
        await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    

    stats_text = f"""

üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (30 –¥–Ω–µ–π):**



üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**

‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {global_stats['active_users_30d']}



üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {global_stats['total_generations']}

‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: {global_stats['generations_30d']}

‚Ä¢ –û—à–∏–±–æ–∫: {global_stats['total_errors']}

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {global_stats['avg_generation_time']:.1f}—Å



üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**

"""

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏

    if global_stats['popular_models']:

        for model, count in global_stats['popular_models']:

            stats_text += f"‚Ä¢ {model}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüì± **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

    if global_stats['popular_formats']:

        for format_type, count in global_stats['popular_formats']:

            stats_text += f"‚Ä¢ {format_type}: {count}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    stats_text += "\nüìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    if daily_stats:

        for date, generations, users, avg_time in daily_stats:

            avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

            stats_text += f"‚Ä¢ {date}: {generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {avg_time_str}\n"

    else:

        stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    

    keyboard = [

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        stats_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def model_tips_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram"""

    tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Bytedance (Seedream-4)** - –¥–ª—è 4K –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

    

    keyboard = [

        [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="main_menu")],

        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

    ]

    

    await update.message.reply_text(

        tips_text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



async def edit_image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro"""

    user_id = update.effective_user.id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    USER_STATE[user_id]['step'] = 'upload_image_for_edit'

    

    await update.message.reply_text(

        "üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX.1 Kontext Pro\n\n"

        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"

        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\n\n"

        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

        "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

        "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

        "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

        "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

    )



def is_prompt_safe(prompt):

    prompt_lower = prompt.lower()

    for word in BANNED_WORDS:

        if word in prompt_lower:

            return False

    return True



def improve_prompt_for_ideogram(prompt):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å Ideogram

    Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    """

    if not prompt:

        return prompt

    

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±–∏–≤–∞—Ç—å Ideogram

    prompt = prompt.strip()

    

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –µ–≥–æ

    words = prompt.split()

    if len(words) > 15:

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

        important_words = []

        for word in words:

            if len(word) > 3 and word.lower() not in ['very', 'really', 'quite', 'rather', 'somewhat', 'rather', 'quite', 'very', 'really', 'extremely', 'incredibly', 'amazingly', 'wonderfully', 'beautifully', 'gorgeously', 'stunningly', 'magnificently', 'exquisitely', 'elegantly', 'gracefully', 'perfectly', 'absolutely', 'completely', 'totally', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly', 'completely', 'fully', 'entirely', 'wholly', 'thoroughly']:

                important_words.append(word)

            if len(important_words) >= 10:

                break

        prompt = ' '.join(important_words)

    

    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞

    words = prompt.split()

    unique_words = []

    for word in words:

        if word.lower() not in [w.lower() for w in unique_words]:

            unique_words.append(word)

    

    return ' '.join(unique_words)



async def extract_scenes_from_script(script_text, format_type=None):

    """

    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º —Å–∫–æ–±–∫–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    """

    import re

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    frame_count = None

    frame_patterns = [

        r'(\d+)\s*–∫–∞–¥—Ä[–∞–æ–≤]*',

        r'(\d+)\s*—Å—Ü–µ–Ω[–∞—ã]*',

        r'(\d+)\s*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏[–π—è]*',

        r'(\d+)\s*—Ñ–æ—Ç–æ',

        r'(\d+)\s*–∫–∞—Ä—Ç–∏–Ω[–∞–æ–∫]*'

    ]

    

    for pattern in frame_patterns:

        match = re.search(pattern, script_text.lower())

        if match:

            frame_count = int(match.group(1))

            break

    

    # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if not frame_count and '[' in script_text and ']' in script_text:

        # –ò—â–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            frame_count = len(frame_matches)

    

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

    if frame_count:

        prompt = (

            f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

            f"–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤. –í—ã–¥–µ–ª–∏ —Ä–æ–≤–Ω–æ {frame_count} –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

            f"–í–ê–ñ–ù–û: "

            f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

            f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

            f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

            f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, —Ä–æ–≤–Ω–æ {frame_count} –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

        )

    else:

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É

        if format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

            if '[' in script_text and ']' in script_text:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ò–∑–≤–ª–µ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ [–ö–∞–¥—Ä X: –û–ø–∏—Å–∞–Ω–∏–µ] –∏ —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫). –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

            else:

                prompt = (

                    f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è {format_type.title()} –≤–∏–¥–µ–æ:\n{script_text}\n"

                    "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                    f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

                )

        else:

            prompt = (

                f"–í–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:\n{script_text}\n"

                "–í—ã–¥–µ–ª–∏ —Å—Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ü–µ–Ω—ã. "

                f"–í–ê–ñ–ù–û: "

                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–ª–æ–≤–µ–∫), —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø–æ–ª –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ "

                f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "

                f"- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫) "

                f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."

            )

    

    try:

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        loop = asyncio.get_event_loop()
        messages = [
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏."},
                    {"role": "user", "content": prompt}
        ]
        scenes_text = await openai_chat_completion_async(messages, "gpt-4o-mini", 700, 0.5)

        scenes = [s for s in scenes_text.split('\n') if s.strip()]

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

        if frame_count:

            scenes = scenes[:frame_count]

    except Exception as e:

        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        scenes = []

        

        # –ò—â–µ–º –∫–∞–¥—Ä—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö

        frame_matches = re.findall(r'\[.*?\]', script_text)

        if frame_matches:

            for match in frame_matches:

                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞

                scene_text = re.sub(r'^\[–ö–∞–¥—Ä\s*\d+:\s*', '', match)

                scene_text = re.sub(r'^\[', '', scene_text)

                scene_text = re.sub(r'\]$', '', scene_text)

                if scene_text.strip():

                    scenes.append(scene_text.strip())

        

        # –ï—Å–ª–∏ –∫–∞–¥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

        if not scenes:

            sentences = re.split(r'[.!?]+', script_text)

            for sentence in sentences:

                sentence = sentence.strip()

                if len(sentence) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

                    scenes.append(sentence)

        

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω

        if frame_count:

            scenes = scenes[:frame_count]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–¥—Ä–æ–≤

    if frame_count:

        scenes = scenes[:frame_count]

    # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã

    # elif format_type and format_type.lower() in ['tiktok', 'instagram reels', 'youtube shorts']:

    #     # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∫–∞–¥—Ä–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ

    #     scenes = scenes[:3]

    

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram –∞–ª—å–±–æ–º–∞)

    scenes = scenes[:10]

    

    return scenes



def enhance_prompts_with_character_context(prompts, topic):

    """

    –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ª—é–¥–∏

    """

    if not prompts:

        return prompts

    

    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    # –£–±–∏—Ä–∞–µ–º '–æ–Ω–∞' –∏ '–æ–Ω' –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

    character_keywords = {

        '–∂–µ–Ω—â–∏–Ω–∞': ['woman', 'female', 'lady', 'girl'],

        '–¥–µ–≤—É—à–∫–∞': ['girl', 'young woman', 'female'],

        '–±—Ä—é–Ω–µ—Ç–∫–∞': ['brunette woman', 'brunette girl', 'dark-haired woman'],

        '–±–ª–æ–Ω–¥–∏–Ω–∫–∞': ['blonde woman', 'blonde girl', 'blonde female'],

        '–º—É–∂—á–∏–Ω–∞': ['man', 'male', 'guy'],

        '–ø–∞—Ä–µ–Ω—å': ['young man', 'guy', 'male']

    }

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–¥–µ–π

    has_people_in_topic = any(keyword in topic.lower() for keyword in character_keywords.keys())

    has_people_in_prompts = any(any(keyword in prompt.lower() for keyword in character_keywords.keys()) for prompt in prompts)

    

    # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –∏ –ø—Ä–æ–º–ø—Ç–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª—é–¥–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ

    if not has_people_in_topic and not has_people_in_prompts:

        return prompts

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

    main_character = None

    for keyword, english_terms in character_keywords.items():

        if any(keyword in prompt.lower() for prompt in prompts):

            main_character = english_terms[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

            break

    

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–ø—Ç–∞–º

    if main_character:

        enhanced_prompts = []

        for i, prompt in enumerate(prompts):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ

            has_character = any(term in prompt.lower() for terms in character_keywords.values() for term in terms)

            

            if not has_character and any(word in prompt.lower() for word in ['—Å–º–æ—Ç—Ä–∏—Ç', 'looks', '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', 'looking at camera']):

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –ø—Ä–æ–º–ø—Ç–∞–º —Å –≤–∑–≥–ª—è–¥–æ–º

                enhanced_prompt = f"{main_character}, {prompt}"

            elif not has_character and i > 0:

                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                enhanced_prompt = f"{main_character}, {prompt}"

            else:

                enhanced_prompt = prompt

            

            enhanced_prompts.append(enhanced_prompt)

        

        return enhanced_prompts

    

    return prompts




async def edit_image_with_flux(update, context, state, original_image_url, edit_prompt):

    """

    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro

    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        chat_id = None

        send_text = None

        send_media = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    user_id = None
    generation_type = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    if hasattr(update, 'message') and update.message:
        user_id = update.message.from_user.id
    elif hasattr(update, 'callback_query') and update.callback_query:
        user_id = update.callback_query.from_user.id

    if user_id:
        logging.info(f"DEBUG: –ù–∞–π–¥–µ–Ω user_id={user_id}")
        free_generations_left = await analytics_db_get_free_generations_left_async(user_id)
        user_credits = await analytics_db_get_user_credits_async(user_id)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–õ–ò –∑–∞ –∫—Ä–µ–¥–∏—Ç—ã
        logging.info(f"DEBUG: free_generations_left={free_generations_left}, user_credits['balance']={user_credits['balance']}")
        if free_generations_left > 0:
            # –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generation_type = "free"
            logging.info(f"DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω generation_type=free –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        elif user_credits['balance'] >= 12:  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FLUX
            # –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞ –∫—Ä–µ–¥–∏—Ç—ã
            generation_type = "credits"
            logging.info(f"DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω generation_type=credits –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –Ω–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –Ω–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
            keyboard = [
                [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            if CONTENT_CREATION_ENABLED:
                keyboard.append([InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")])
            
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå **–î–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!**\n\n"
                     "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ:**\n"
                     "‚Ä¢ –ó–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (3 —Ä–∞–∑–∞)\n"
                     "‚Ä¢ –ó–∞ –∫—Ä–µ–¥–∏—Ç—ã (12 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n\n"
                     "üí° **–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"
                     "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (3 —Ä–∞–∑–∞)\n"
                     "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (3 —Ä–∞–∑–∞)\n\n"
                     "üí∞ **–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã:**\n"
                     "‚Ä¢ –ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n"
                     "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return None
    else:
        logging.warning(f"DEBUG: user_id –Ω–µ –Ω–∞–π–¥–µ–Ω! update.message={hasattr(update, 'message')}, update.callback_query={hasattr(update, 'callback_query')}")

    try:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            await context.bot.send_message(

                chat_id=chat_id,

                text="üé® –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é FLUX.1 Kontext Pro...",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω

        if not os.environ.get('REPLICATE_API_TOKEN'):

            logging.error("API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω Replicate –Ω–µ –Ω–∞–π–¥–µ–Ω",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–±–∞

        if not original_image_url or not edit_prompt:

            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            if send_text:

                keyboard = [

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",

                    reply_markup=InlineKeyboardMarkup(keyboard)

                )

            return None

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º input_image –¥–ª—è Replicate API
        input_image = None
        
        if original_image_url.startswith(('http://', 'https://')):
            # –≠—Ç–æ URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {original_image_url}")
            input_image = original_image_url
        else:
            # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å - —Å–æ–∑–¥–∞–µ–º data URI
            logging.info(f"–°–æ–∑–¥–∞–µ–º data URI –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {original_image_url}")
            try:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                loop = asyncio.get_event_loop()
                image_data = await loop.run_in_executor(
                    THREAD_POOL,
                    lambda: open(original_image_url, 'rb').read()
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                if original_image_url.lower().endswith('.png'):
                    mime_type = 'image/png'
                elif original_image_url.lower().endswith('.jpg') or original_image_url.lower().endswith('.jpeg'):
                    mime_type = 'image/jpeg'
                else:
                    mime_type = 'image/jpeg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –°–æ–∑–¥–∞–µ–º data URI
                import base64
                encoded = base64.b64encode(image_data).decode()
                input_image = f"data:{mime_type};base64,{encoded}"
                
                logging.info(f"–°–æ–∑–¥–∞–Ω data URI, —Ä–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ data URI: {e}")
                if send_text:
                    keyboard = [
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)[:100]}...",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                return None

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FLUX.1 Kontext Pro
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ FLUX —Å –ø—Ä–æ–º–ø—Ç–æ–º: {edit_prompt}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            output = await replicate_run_async(
                "black-forest-labs/flux-kontext-pro",
                {
                    "input_image": input_image,
                    "prompt": edit_prompt,
                    "output_format": "jpg"
                },
                timeout=60
            )

            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç FLUX: {output}")
            logging.info(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(output)}")

        except Exception as replicate_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Replicate FLUX: {replicate_error}")
            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ Replicate: {type(replicate_error).__name__}")

            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ FLUX: {str(replicate_error)}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        edited_image_url = None

        if hasattr(output, 'url'):
            if callable(output.url):
                edited_image_url = output.url()
            else:
                edited_image_url = output.url()
        elif isinstance(output, list) and len(output) > 0:
            edited_image_url = output[0]
        elif isinstance(output, str):
            edited_image_url = output
        elif hasattr(output, '__getitem__'):
            edited_image_url = output[0] if output else None

        logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π URL: {edited_image_url}")

        if not edited_image_url:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ FLUX")

            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç FLUX",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
        if not edited_image_url.startswith('http'):
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_image_url}")

            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            return None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {edited_image_url}")
            logging.info(f"–¢–∏–ø URL: {type(edited_image_url)}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            loop = asyncio.get_event_loop()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç
            session = await init_http_session()
            async with session.get(edited_image_url) as edited_response:
                if edited_response.status != 200:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status}")
                    if send_text:
                        keyboard = [
                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await send_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status}", reply_markup=reply_markup)
                    return
                
                edited_image_data = await edited_response.read()

            logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status}")

            if edited_response.status == 200:
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(edited_image_data)} –±–∞–π—Ç")

                # –°–ü–ò–°–´–í–ê–ï–ú –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ –ò–õ–ò –ö–†–ï–î–ò–¢–´
                logging.info(f"DEBUG: user_id={user_id}, generation_type={generation_type}")
                if user_id and generation_type:
                    if generation_type == "free":
                        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                        logging.info(f"DEBUG: –°–ø–∏—Å—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        if await analytics_db_increment_free_generations_async(user_id):
                            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    elif generation_type == "credits":
                        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                        logging.info(f"DEBUG: –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        if await analytics_db_use_credits_async(user_id, 12, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FLUX.1 Kontext Pro"):
                            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª 12 –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logging.warning(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å - user_id={user_id}, generation_type={generation_type}")

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL
                    logging.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL...")
                    logging.info(f"URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {edited_image_url}")
                    logging.info(f"Chat ID: {chat_id}")

                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=edited_image_url,
                        caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"
                    )

                    logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ URL")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    if send_text:
                        keyboard = [
                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )

                except Exception as send_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL: {send_error}")
                    logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(send_error).__name__}")

                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
                    try:
                        logging.info("–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª...")

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
                        loop = asyncio.get_event_loop()
                        session = await init_http_session()
                        async with session.get(edited_image_url) as response:
                            if response.status == 200:
                                edited_image_data = await response.read()
                                logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(edited_image_data)} –±–∞–π—Ç")
                                
                                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                                temp_edited_path = await loop.run_in_executor(
                                    THREAD_POOL,
                                    lambda: tempfile.NamedTemporaryFile(delete=False, suffix='.jpg').name
                                )
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                                await loop.run_in_executor(
                                    THREAD_POOL,
                                    lambda: open(temp_edited_path, 'wb').write(edited_image_data)
                                )

                                logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_edited_path}")

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                                loop = asyncio.get_event_loop()
                                edited_data = await loop.run_in_executor(
                                    THREAD_POOL,
                                    lambda: open(temp_edited_path, 'rb').read()
                                )

                                await context.bot.send_photo(
                                    chat_id=chat_id,
                                    photo=edited_data,
                                    caption=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {edit_prompt}"
                                )

                                logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")

                                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                try:
                                    os.unlink(temp_edited_path)
                                    logging.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                                except Exception as cleanup_error:
                                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                                if send_text:
                                    keyboard = [
                                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                                    ]
                                    await context.bot.send_message(
                                        chat_id=chat_id,
                                        text="‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",
                                        reply_markup=InlineKeyboardMarkup(keyboard)
                                    )
                            else:
                                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
                                if send_text:
                                    keyboard = [
                                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                                    ]
                                    await context.bot.send_message(
                                        chat_id=chat_id,
                                        text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}",
                                        reply_markup=InlineKeyboardMarkup(keyboard)
                                    )

                    except Exception as file_send_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {file_send_error}")
                        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞: {type(file_send_error).__name__}")
                        if send_text:
                            keyboard = [
                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                            ]
                            await context.bot.send_message(
                                chat_id=chat_id,
                                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                reply_markup=InlineKeyboardMarkup(keyboard)
                            )

            else:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edited_response.status}")

                if send_text:
                    keyboard = [
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å: {edited_response.status})",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )

        except requests.exceptions.Timeout:
            logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        except Exception as e:
            logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        return edited_image_url

    except Exception as e:
        error_msg = str(e)

        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ edit_image_with_flux: {e}")
        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

        if "insufficient_credit" in error_msg.lower():
            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate –¥–ª—è FLUX.1 Kontext Pro\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        elif "api" in error_msg.lower() or "token" in error_msg.lower():
            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û—à–∏–±–∫–∞ API Replicate\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        else:
            if send_text:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_msg}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        return None



async def send_images(update, context, state, prompt_type='auto', user_prompt=None, scenes=None):

    """

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 2-3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–æ–º–ø—Ç–∞–º —á–µ—Ä–µ–∑ GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    prompt_type: 'auto' ‚Äî –ø—Ä–æ–º–ø—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, 'user' ‚Äî –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.

    user_prompt: –µ—Å–ª–∏ prompt_type == 'user', –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç.

    """



    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    if hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        send_text = update.message.reply_text

        send_media = update.message.reply_media_group

    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:

        chat_id = update.callback_query.message.chat_id

        send_text = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)

        send_media = lambda media, **kwargs: context.bot.send_media_group(chat_id=chat_id, media=media, **kwargs)

    else:

        # fallback

        chat_id = None

        send_text = None

        send_media = None

    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if not send_text:
        logging.error("send_text is None, cannot send messages")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    await analytics_db_update_user_activity_async(user_id)

    await analytics_db_log_action_async(user_id, "start_generation", f"format:{state.get('format', 'unknown')}, model:{state.get('image_gen_model', 'unknown')}")

    

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    start_time = time.time()

    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    images = []

    prompts = []

    processed_count = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API —Ç–æ–∫–µ–Ω–æ–≤

    if not os.getenv('REPLICATE_API_TOKEN'):

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text("‚ùå –û—à–∏–±–∫–∞: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.", reply_markup=reply_markup)

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Replicate

    try:

        import replicate

        replicate_client = replicate.Client(api_token=os.getenv('REPLICATE_API_TOKEN'))

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞

        try:

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            loop = asyncio.get_event_loop()
            test_response = await replicate_run_async(
                    "replicate/hello-world",
                {"text": "test"},
                timeout=30
            )

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç API —Ä–∞–±–æ—Ç–∞–µ—Ç

        except Exception as e:

            error_msg = str(e).lower()

            if "insufficient_credit" in error_msg or "insufficient credit" in error_msg or "billing" in error_msg:

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await send_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

                return

            elif "unauthorized" in error_msg or "invalid" in error_msg:

                if send_text:

                    keyboard = [

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await send_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Replicate API\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

                return

    except Exception as e:

        if send_text:

            keyboard = [

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Replicate API: {str(e)[:100]}...\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    free_generations_left = await analytics_db_get_free_generations_left_async(user_id)
    user_credits = await analytics_db_get_user_credits_async(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    selected_model = state.get('image_gen_model', 'Ideogram')
    try:
        from pricing_config import get_generation_cost
        generation_cost = get_generation_cost(selected_model, state.get('format', ''))
    except ImportError:
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        generation_cost = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –∫—Ä–µ–¥–∏—Ç–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    can_generate = False
    if free_generations_left > 0:
        can_generate = True
        generation_type = "free"
    elif user_credits['balance'] >= generation_cost:
        can_generate = True
        generation_type = "credits"
    else:
        can_generate = False
        generation_type = "none"
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not can_generate:
        if send_text:
            keyboard = [
                [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = "‚ùå **–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã!**\n\n"
            text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: **{free_generations_left}**\n"
            text += f"ü™ô –ö—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: **{user_credits['balance']}**\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: **{generation_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤**\n\n"
            text += "üí≥ **–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!**"
            
            await send_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    user_format = state.get('format', '').lower()

    image_count = state.get('image_count', 'default')

    

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏)

    logging.info(f"–û—Ç–ª–∞–¥–∫–∞: format='{user_format}', image_count='{image_count}', prompt_type='{prompt_type}', user_prompt='{user_prompt}'")

    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    

    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if scenes:

        max_scenes = len(scenes)

    elif image_count == 'all_scenes':

        max_scenes = 7

    elif image_count == 'auto':

        max_scenes = 2  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–∞—á–µ

    elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and image_count == 'default':

        max_scenes = 2  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2

    elif user_format in ['instagram stories'] and image_count == 'default':

        max_scenes = 1  # –î–ª—è Instagram Stories –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    elif user_format in ['instagram post'] and image_count == 'default':

        max_scenes = 2  # –î–ª—è –ø–æ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    elif isinstance(image_count, int):

        max_scenes = min(image_count, 10)  # –º–∞–∫—Å–∏–º—É–º 10

    else:

        max_scenes = 2  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤



    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ 10 (–ª–∏–º–∏—Ç Telegram)

    # –ù–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –µ–≥–æ

    if isinstance(image_count, int):

        max_scenes = min(image_count, 10)  # –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10

    else:

        max_scenes = min(max_scenes, 10)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10

    

    if prompt_type == 'auto':

        # –ï—Å–ª–∏ scenes –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫–∏

        if scenes:

            prompts = scenes[:max_scenes]

        else:

            # –°–æ–∑–¥–∞—ë–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            topic = state.get('topic', '')

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            selected_model = state.get('image_gen_model', 'Ideogram')

            

            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

            if selected_model == 'Ideogram':

                # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã

                # Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

                prompts = []

                

                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤

                if max_scenes >= 1:

                    prompts.append(f"{topic}")

                if max_scenes >= 2:

                    prompts.append(f"{topic}, professional design")

                if max_scenes >= 3:

                    prompts.append(f"{topic}, modern style")

                

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤

                prompts = prompts[:max_scenes]

            elif selected_model == 'Bytedance (Seedream-3)':

                # –î–ª—è Bytedance Seedream-3 - –Ω–∞—Ç–∏–≤–Ω–∞—è 2K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–∞—è

                prompts = [

                    f"{topic}, high quality, professional, detailed composition, architectural design, modern aesthetic",

                    f"{topic}, premium quality, well balanced, sharp focus, clean design, sophisticated style",

                    f"{topic}, excellent quality, clear details, professional result, contemporary design, elegant composition"

                ][:max_scenes]

            elif selected_model == 'Bytedance (Seedream-4)':

                # –î–ª—è Bytedance Seedream-4 - 4K –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å

                prompts = [

                    f"{topic}, ultra high quality, 4K resolution, professional photography, detailed composition, modern aesthetic",

                    f"{topic}, premium quality, sharp focus, clean design, sophisticated style, high resolution",

                    f"{topic}, excellent quality, clear details, professional result, contemporary design, elegant composition, 4K"

                ][:max_scenes]

            elif selected_model == 'Google Imagen 4 Ultra':

                # –î–ª—è Google Imagen 4 Ultra - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏

                prompts = [

                    f"{topic}, photorealistic, ultra high quality, maximum detail, 8k resolution, professional photography, studio lighting",

                    f"{topic}, hyperrealistic, intricate details, perfect composition, cinematic quality, premium photography",

                    f"{topic}, ultra detailed, professional grade, perfect lighting, high end photography, masterpiece quality"

                ][:max_scenes]

            elif selected_model == 'Luma Photon':

                # –î–ª—è Luma Photon - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

                prompts = [

                    f"{topic}, high quality, detailed, cinematic lighting, creative composition, professional result",

                    f"{topic}, artistic style, excellent quality, creative vision, detailed composition, premium quality",

                    f"{topic}, creative approach, high resolution, professional lighting, detailed result, artistic quality"

                ][:max_scenes]


            elif selected_model == 'Recraft AI':

                # –î–ª—è Recraft AI - –¥–∏–∑–∞–π–Ω, –≤–µ–∫—Ç–æ—Ä, –ª–æ–≥–æ—Ç–∏–ø—ã, SVG

                prompts = [

                    f"{topic}, SVG design, logo style, brand identity, clean composition, professional design, modern aesthetic, vector graphics",

                    f"{topic}, design elements, brand graphics, modern logo concept, clean art style, professional branding, scalable design",

                    f"{topic}, design system, brand design, graphic elements, logo style, professional identity, clean design, vector art"

                ][:max_scenes]

            else:

                # –î–ª—è Ideogram –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤

                image_prompts = (

                    f"–¢–µ–º–∞: {topic}\n"

                    f"–°–æ–∑–¥–∞–π {max_scenes} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. "

                    f"–í–ê–ñ–ù–û: "

                    f"- –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å {topic} "

                    f"- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —ç–ª–µ–º–µ–Ω—Ç—ã {topic} "

                    f"- –ò—Å–ø–æ–ª—å–∑—É–π: professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting "

                    f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–º–µ "

                    f"- –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã {topic} "

                    f"–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º: "

                    f"- –¢—É—Ä–±–∞–∑–∞: 'wooden cabin resort, forest landscape, professional photography', 'russian bathhouse, steam room, traditional design' "

                    f"- –°–ø–æ—Ä—Ç–∑–∞–ª: 'modern gym interior, fitness equipment, professional lighting', 'weight training area, cardio machines, clean design' "

                    f"- –ö–∞—Ñ–µ: 'cozy cafe interior, coffee shop, modern design', 'outdoor seating, garden cafe, comfortable atmosphere' "

                    f"- –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–º–µ –µ—Å—Ç—å –ª—é–¥–∏: 'beautiful brunette woman in elegant dress', 'attractive woman with long hair', 'gorgeous woman looking at camera' "

                    f"–û—Ç–≤–µ—Ç –≤—ã–¥–∞–π —Å–ø–∏—Å–∫–æ–º, –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫."

                )

                

                try:

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    messages = [
                                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–º—É –∏ –≤–∫–ª—é—á–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª—é–¥–µ–π –≤ –ø—Ä–æ–º–ø—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ç–µ–º–µ."},
                                {"role": "user", "content": image_prompts}
                    ]
                    raw_prompts = await openai_chat_completion_async(messages, "gpt-4o-mini", 800, 0.7)

                    prompts = [p.strip() for p in raw_prompts.split('\n') if p.strip() and not p.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.'))]

                    prompts = prompts[:max_scenes]

                    

                    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã

                    enhanced_prompts = []

                    for prompt in prompts:

                        if len(prompt.split()) < 8:  # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π

                            enhanced_prompt = f"{prompt}, professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting"

                        else:

                            enhanced_prompt = prompt

                        enhanced_prompts.append(enhanced_prompt)

                    prompts = enhanced_prompts

                    

                except Exception as e:

                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

                    prompts = [

                        f"{topic}, professional photography, ultra high quality, 8k resolution, sharp focus, natural lighting",

                        f"{topic}, modern design, contemporary style, professional environment, high quality photography"

                    ][:max_scenes]

    elif prompt_type == 'user' and user_prompt:

        prompts = [user_prompt] * min(3, max_scenes)

    else:

        prompts = [state.get('topic', '')] * min(3, max_scenes)

    

    # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    topic = state.get('topic', '')

    prompts = enhance_prompts_with_character_context(prompts, topic)

    

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

    safe_prompts = []

    blocked_prompts = []

    for prompt in prompts:

        if is_prompt_safe(prompt):

            safe_prompts.append(prompt)

        else:

            blocked_prompts.append(prompt)

    if not safe_prompts:

        if send_text:

            msg = "–í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É."

            if blocked_prompts:

                msg += "\n–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–º–ø—Ç—ã:\n" + "\n".join(blocked_prompts)

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await send_text(msg, reply_markup=reply_markup)

        return

    if blocked_prompts and send_text:

        msg = "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –Ω–µ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n" + "\n".join(blocked_prompts)

        await send_text(msg)

    media = []

    # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    tasks = []
    for idx, prompt in enumerate(safe_prompts, 1):
        if idx > max_scenes:
            break
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        task = generate_single_image_async(idx, prompt, state, send_text)
        tasks.append(task)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if tasks:
        if send_text:
            await send_text(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(tasks)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, Exception):
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result}")
                if send_text:
                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result}")
                continue

            idx, success, image_url, caption, error = result

            if success and image_url:
                # –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                images.append(image_url)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª SVG
                if image_url.lower().endswith('.svg'):
                    # SVG —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    media.append(InputMediaDocument(media=image_url, caption=caption))
                else:
                    # –û–±—ã—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                    media.append(InputMediaPhoto(media=image_url, caption=caption))
                
                processed_count += 1

                # –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
                print(f"   –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç media: {media[-1].media}")
                print(f"   –¥–ª–∏–Ω–∞ media[-1].media: {len(str(media[-1].media)) if media[-1].media else 'None'}")
            else:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {error}")
                if send_text:
                    await send_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {error}")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ - –æ–Ω –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –≤—ã—à–µ
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if media and send_media:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã –∏–∑ {len(media)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≥—Ä—É–ø–ø—É
            await send_media(media=media)
            logging.info("–ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as group_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã: {group_error}")
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
            for i, item in enumerate(media):
                try:
                    if isinstance(item, InputMediaDocument):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (SVG —Ñ–∞–π–ª—ã)
                        if hasattr(update, 'message') and update.message:
                            await update.message.reply_document(document=item.media, caption=item.caption)
                        else:
                            await context.bot.send_document(chat_id=chat_id, document=item.media, caption=item.caption)
                        logging.info(f"SVG –¥–æ–∫—É–º–µ–Ω—Ç {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ (–æ–±—ã—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                        if hasattr(update, 'message') and update.message:
                            await update.message.reply_photo(photo=item.media, caption=item.caption)
                        else:
                            await context.bot.send_photo(chat_id=chat_id, photo=item.media, caption=item.caption)
                        logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ")
                except Exception as photo_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {photo_error}")

    elif processed_count == 0 and send_text:

        keyboard = [

            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", callback_data="help_filters")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    generation_time = time.time() - start_time

    selected_model = state.get('image_gen_model', 'Ideogram')

    format_type = state.get('format', 'unknown')

    

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

    if processed_count > 0:

        await analytics_db_log_generation_async(

            user_id=user_id,

            model_name=selected_model,

            format_type=format_type,

            prompt=state.get('topic', 'unknown'),

            image_count=processed_count,

            success=True,

            generation_time=generation_time

        )

        await analytics_db_log_action_async(user_id, "generation_success", f"count:{processed_count}, time:{generation_time:.1f}s")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if generation_type == "free":
            # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            free_generations_used = 0
            for i in range(processed_count):
                if await analytics_db_get_free_generations_left_async(user_id) > 0:
                    if await analytics_db_increment_free_generations_async(user_id):
                        free_generations_used += 1
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {free_generations_used}")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        break
                else:
                    # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã
                    generation_type = "credits"
                    break
    
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã, —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
            if generation_type == "credits":
                remaining_count = processed_count - free_generations_used
                if remaining_count > 0:
                    total_cost = generation_cost * remaining_count
                    if await analytics_db_use_credits_async(user_id, total_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {remaining_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ {selected_model}"):
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {total_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {remaining_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {free_generations_used} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
        
        elif generation_type == "credits":
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            total_cost = generation_cost * processed_count
            if await analytics_db_use_credits_async(user_id, total_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ {selected_model}"):
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {total_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


    else:


        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        await analytics_db_log_generation_async(

            user_id=user_id,

            model_name=selected_model,

            format_type=format_type,

            prompt=state.get('topic', 'unknown'),

            image_count=0,

            success=False,

            error_message="No images generated",

            generation_time=generation_time

        )

        await analytics_db_log_action_async(user_id, "generation_failed", f"time:{generation_time:.1f}s")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if images:

        state['last_generated_images'] = images

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    state['last_prompt_type'] = prompt_type

    state['last_user_prompt'] = user_prompt

    state['last_settings'] = {

        'model': state.get('image_gen_model', 'Ideogram'),

        'style': state.get('image_gen_style', ''),

        'count': state.get('image_count', 2)

    }

    USER_STATE[user_id] = state

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    if scenes:

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã

        if 'last_scenes' not in state:

            state['last_scenes'] = scenes

            state['total_scenes_count'] = len(scenes)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ

        if 'generated_scenes_count' not in state:

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            state['generated_scenes_count'] = len(scenes[:max_scenes]) if isinstance(max_scenes, int) else len(scenes)

        else:

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

            current_generated = state.get('generated_scenes_count', 0)

            new_scenes_count = len(scenes[:max_scenes]) if isinstance(max_scenes, int) else len(scenes)

            state['generated_scenes_count'] = current_generated + new_scenes_count

    

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    user_format = state.get('format', '').lower()

    if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

        # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        last_settings = state.get('last_settings', {})

        settings_text = f"({last_settings.get('model', 'Ideogram')}, {last_settings.get('style', '')}, {last_settings.get('count', 2)} —à—Ç.)"

        

        keyboard = [

            [InlineKeyboardButton(f"üîÑ –° —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ {settings_text}", callback_data="more_images_same_settings")],

            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change_settings")],

            [InlineKeyboardButton("üìù –¢–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if send_text:
            try:
                await send_text("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?", reply_markup=reply_markup)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–∏—Ö
                try:
                    await send_text("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?")
                except Exception as e2:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

    else:

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        generated_count = state.get('generated_scenes_count', 0)

        total_count = state.get('total_scenes_count', 0)

        

        keyboard = []

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ

        keyboard.append([InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë (—Ç–µ –∂–µ —Å—Ü–µ–Ω—ã)", callback_data="more_images")])

        

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

        if total_count > generated_count:

            remaining_count = total_count - generated_count

            start_scene = generated_count + 1

            end_scene = total_count

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—ã {start_scene}-{end_scene}", callback_data="generate_remaining_scenes")])

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã 1-{total_count}", callback_data="generate_all_scenes")])

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        keyboard.append([InlineKeyboardButton("üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω", callback_data="select_scene_count")])

        

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard.extend([

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="create_video_from_images")],

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data="create_video_from_script")],

        ])

        

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        keyboard.extend([

            [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset")],

        ])

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        if send_text:
            try:
                await send_text("–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?", reply_markup=reply_markup)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–∏—Ö
                try:
                    await send_text("–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?")
                except Exception as e2:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")



async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query

    await query.answer()

    user_id = query.from_user.id

    state = USER_STATE.get(user_id, {})

    data = query.data



    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if data == "user_stats":

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                analytics_db_update_user_activity_async(user_id),
                timeout=5.0
            )
        except asyncio.TimeoutError:
            logging.error(f"Timeout updating user activity for {user_id}")

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                analytics_db_log_action_async(user_id, "view_stats_button"),
                timeout=5.0
            )
        except asyncio.TimeoutError:
            logging.error(f"Timeout logging action for {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            user_stats = await asyncio.wait_for(
                analytics_db_get_user_stats_async(user_id),
                timeout=10.0
            )
        except asyncio.TimeoutError:
            logging.error(f"Timeout getting user stats for {user_id}")
            await query.edit_message_text(
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return

        

        if not user_stats:

            await query.edit_message_text(

                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",

                reply_markup=InlineKeyboardMarkup([[


                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")

                ]])

            )

            return

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        stats_text = f"""

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**



üé® **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_stats['total_generations']}

‚Ä¢ –û—à–∏–±–æ–∫: {user_stats['total_errors']}

‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {(user_stats['first_seen'].strftime('%Y-%m-%d') if hasattr(user_stats.get('first_seen'), 'strftime') else str(user_stats.get('first_seen'))[:10])}

‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(user_stats['last_activity'].strftime('%Y-%m-%d') if hasattr(user_stats.get('last_activity'), 'strftime') else str(user_stats.get('last_activity'))[:10])}



üìà **–ü–æ –º–æ–¥–µ–ª—è–º:**

"""

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º

        if user_stats['models_stats']:

            for model, count, avg_time, successful in user_stats['models_stats'][:5]:

                success_rate = (successful / count * 100) if count > 0 else 0

                avg_time_str = f"{avg_time:.1f}—Å" if avg_time else "N/A"

                stats_text += f"‚Ä¢ {model}: {count} ({success_rate:.0f}% —É—Å–ø–µ—à–Ω–æ, {avg_time_str})\n"

        else:

            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        

        stats_text += "\nüì± **–ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:**\n"

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º

        if user_stats['formats_stats']:

            for format_type, count in user_stats['formats_stats'][:5]:

                stats_text += f"‚Ä¢ {format_type}: {count}\n"

        else:

            stats_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        

        keyboard = [


            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        

        await query.edit_message_text(

            stats_text,

            reply_markup=InlineKeyboardMarkup(keyboard)

        )

        return



    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    if data == "help_filters":

        help_filters_text = (

            "üö´ **–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π**\n\n"

            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:\n\n"

            "‚ùå **–ß—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è:**\n"

            "‚Ä¢ –°–ª–æ–≤–∞ —Ç–∏–ø–∞ '—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è', '–∫—Ä–∞—Å–∏–≤–∞—è', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è'\n"

            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—è –≤–∑–≥–ª—è–¥–æ–≤: '—Å–º–æ—Ç—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É', '–ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π –≤–∑–≥–ª—è–¥'\n"

            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏\n\n"

            "‚úÖ **–ö–∞–∫ —Ä–µ—à–∏—Ç—å:**\n"

            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: '–∂–µ–Ω—â–∏–Ω–∞' –≤–º–µ—Å—Ç–æ '–∫—Ä–∞—Å–∏–≤–∞—è'\n"

            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å: Ideogram, Bytedance, Google Imagen\n"

            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'\n"

            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏'\n\n"

            "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"

            "‚Ä¢ –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ideogram –∏–ª–∏ Bytedance (Seedream-3/4)\n"

            "‚Ä¢ –î–ª—è –ø–µ–π–∑–∞–∂–µ–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–¥—Ö–æ–¥—è—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏"

        )

        keyboard = [

            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_filters_text, reply_markup=reply_markup)

    elif data == "model_tips":

        tips_text = """

üé® **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Ideogram**



## –ü–æ—á–µ–º—É Ideogram –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é?



### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

1. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã** - Ideogram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏, —á–µ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

2. **–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏** - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–æ–≥—É—Ç "–∑–∞–±–∏–≤–∞—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

3. **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏** - Ideogram —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö



## ‚úÖ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:



### 1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è**

```

‚ùå –ü–ª–æ—Ö–æ: "–û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–Ω–∏—Å—Ç—ã–º–∏ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏, –æ–¥–µ—Ç–∞—è –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ"

‚úÖ –•–æ—Ä–æ—à–æ: "–¥–µ–≤—É—à–∫–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø–ª–∞—Ç—å–µ"

```



### 2. **–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**

```

‚ùå –ü–ª–æ—Ö–æ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º, –±–∞—Å—Å–µ–π–Ω–æ–º, –≥–∞—Ä–∞–∂–æ–º"

‚úÖ –•–æ—Ä–æ—à–æ: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"

```



### 3. **–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑**

- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 3-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

- –£–±–∏—Ä–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ

- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏



## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:



### –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤:

- "–∂–µ–Ω—â–∏–Ω–∞ —Å —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"

- "–º—É–∂—á–∏–Ω–∞ –≤ –∫–æ—Å—Ç—é–º–µ"

- "–¥–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ"



### –î–ª—è –ø–µ–π–∑–∞–∂–µ–π:

- "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂"

- "–≥–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞"

- "–ª–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞"



## ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Ideogram:



1. **–ù–µ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bytedance –∏–ª–∏ Google Imagen

2. **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥

3. **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏



## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:



–ï—Å–ª–∏ Ideogram –Ω–µ –¥–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

- **Bytedance (Seedream-3)** - –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

- **Bytedance (Seedream-4)** - –¥–ª—è 4K –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

- **Google Imagen 4 Ultra** - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏

- **Luma Photon** - –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π



üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏!

"""

        keyboard = [

            [InlineKeyboardButton("üé® –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="main_menu")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(tips_text, reply_markup=reply_markup)

    elif data == "help_image_edit":

        help_image_edit_text = (

            "üì§ **–ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å FLUX**\n\n"

            "FLUX.1 Kontext Pro - —ç—Ç–æ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç.\n\n"

            "üé® **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**\n"

            "‚Ä¢ **–°–º–µ–Ω–∞ —Å—Ç–∏–ª—è**: '–ø—Ä–µ–≤—Ä–∞—Ç–∏ –≤ –∞–∫–≤–∞—Ä–µ–ª—å–Ω—É—é –∂–∏–≤–æ–ø–∏—Å—å', '—Å–¥–µ–ª–∞–π –≤ —Å—Ç–∏–ª–µ –º–∞—Å–ª—è–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏'\n"

            "‚Ä¢ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤**: '–∏–∑–º–µ–Ω–∏ –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –±–æ–±', '–∑–∞–º–µ–Ω–∏ –∫—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ –Ω–∞ —Å–∏–Ω–µ–µ'\n"

            "‚Ä¢ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**: '–∑–∞–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç \"—Å—Ç–∞—Ä—ã–π\" –Ω–∞ \"–Ω–æ–≤—ã–π\"'\n"

            "‚Ä¢ **–°–º–µ–Ω–∞ —Ñ–æ–Ω–∞**: '—Å–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –ø–ª—è–∂–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ç–æ–º –∂–µ –ø–æ–ª–æ–∂–µ–Ω–∏–∏'\n"

            "‚Ä¢ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏**: '–∏–∑–º–µ–Ω–∏ —Å—Ç–∏–ª—å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –ª–∏—Ü–æ —á–µ–ª–æ–≤–µ–∫–∞'\n\n"

            "üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**\n"

            "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã: '–∫–æ—Ä–æ—Ç–∫–∞—è —á–µ—Ä–Ω–∞—è –ø—Ä–∏—á–µ—Å–∫–∞' –≤–º–µ—Å—Ç–æ '–¥—Ä—É–≥–∞—è –ø—Ä–∏—á–µ—Å–∫–∞'\n"

            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: '—Å–æ—Ö—Ä–∞–Ω–∏ –ª–∏—Ü–æ, –∏–∑–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–µ–∂–¥—É'\n"

            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞: '—Å–∏–Ω–µ–µ –ø–ª–∞—Ç—å–µ' –≤–º–µ—Å—Ç–æ '–¥—Ä—É–≥–æ–µ –ø–ª–∞—Ç—å–µ'\n"

            "‚Ä¢ –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏: '–∑–∞–º–µ–Ω–∏ \"—Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç\" –Ω–∞ \"–Ω–æ–≤—ã–π\"'\n\n"

            "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"

            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"

            "‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –ª–æ–≥–æ—Ç–∏–ø—ã –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"

            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB"

        )

        keyboard = [

            [InlineKeyboardButton("üì§ –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_image")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_image_edit_text, reply_markup=reply_markup)

    elif data == "retry_generation":

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

        current_step = state.get('step', '')

        if current_step in ['custom_image_prompt', 'simple_image_prompt']:

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É

            if current_step == 'custom_image_prompt':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")

            elif current_step == 'simple_image_prompt':

                await query.edit_message_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")

        else:

            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            await show_main_menu(update, context)

    elif data == "create_content":

        await show_format_selection(update, context)

    elif data == "create_simple_images":
    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        USER_STATE[user_id] = {'step': 'simple_orientation', 'format': '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
    
        keyboard = [
            [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],
            [InlineKeyboardButton("üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)", callback_data="simple_orientation:horizontal")],
            [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]
        ]
        keyboard.extend([
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    elif data == "edit_image":

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        USER_STATE[user_id] = {'step': 'upload_image_for_edit'}

        keyboard = [

            [InlineKeyboardButton("‚ùì –ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="help_image_edit")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        help_text = """üì§ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å FLUX**



–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.



üí° **–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:**

‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å (–∞–∫–≤–∞—Ä–µ–ª—å, –º–∞—Å–ª–æ, —ç—Å–∫–∏–∑)

‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–∏—á–µ—Å–∫–∞, –æ–¥–µ–∂–¥–∞, —Ü–≤–µ—Ç–∞)

‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö

‚Ä¢ –°–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ–±—ä–µ–∫—Ç—ã

‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π



üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

2. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å

3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é



‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**

‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB

‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG

‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ø–æ–¥—Ö–æ–¥—è—â–∏–º" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        

        await query.edit_message_text(help_text, reply_markup=reply_markup)

    elif data == "how_to_use":

        await show_how_to_use(update, context)

    elif data == "about_bot":

        await show_about_bot(update, context)

    elif data == "support":

        await show_support(update, context)

    elif data == "main_menu":

        await show_main_menu(update, context)

    elif data == "format_selection":

        await show_format_selection(update, context)

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–†–ï–î–ò–¢–û–í

    elif data == "subscription_menu":

        await show_subscription_menu(update, context)

    elif data == "credit_packages":

        await show_credit_packages(update, context)

    elif data.startswith("buy_credits:"):

        asyncio.create_task(handle_credit_purchase_async(update, context))

    elif data.startswith("check_payment:"):

        asyncio.create_task(check_payment_status_async(update, context))

    elif data.startswith('format:'):

        selected_format = data.split(':', 1)[1]

        if selected_format == 'custom':

            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä—É—á–Ω—É—é

            USER_STATE[user_id] = {'step': 'custom_format'}

            await query.edit_message_text(

                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Facebook Post, Twitter, LinkedIn –∏ —Ç.–¥.):",

                reply_markup=InlineKeyboardMarkup([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ])

            )

        elif selected_format == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é

            USER_STATE[user_id] = {'step': 'simple_image_orientation', 'format': selected_format}

            keyboard = [

                [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

                [InlineKeyboardButton("üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)", callback_data="simple_orientation:horizontal")],

                [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected_format}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

                reply_markup=reply_markup

            )

        else:

            USER_STATE[user_id] = {'step': STEP_STYLE, 'format': selected_format}

            keyboard = [

                [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

            keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {selected_format}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

                reply_markup=reply_markup

            )

    elif data.startswith('style:'):

        selected_style = data.split(':', 1)[1]

        if selected_style == 'custom':

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            current_format = state.get('format', '')

            USER_STATE[user_id] = {'step': 'custom_style', 'format': current_format}

            await query.edit_message_text(

                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–µ–ª–æ–≤–æ–π, –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ —Ç.–¥.):",

                reply_markup=InlineKeyboardMarkup([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ])

            )

            return

        else:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

            USER_STATE[user_id]['style'] = selected_style

            USER_STATE[user_id]['step'] = 'image_gen_model'

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {selected_style}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

                reply_markup=reply_markup

            )

    elif data == "style_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

        keyboard = [

            [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

        keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

            reply_markup=reply_markup

        )

    elif data.startswith('image_count:'):

        count_type = data.split(':', 1)[1]

        if count_type == 'default':

            user_format = state.get('format', '').lower()

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

                USER_STATE[user_id]['image_count'] = 'auto'  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞

            elif user_format in ['instagram stories']:

                USER_STATE[user_id]['image_count'] = 1  # –î–ª—è Instagram Stories 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            elif user_format in ['instagram post']:

                USER_STATE[user_id]['image_count'] = 2  # –î–ª—è –ø–æ—Å—Ç–æ–≤ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            else:

                USER_STATE[user_id]['image_count'] = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['step'] = 'image_gen_model'  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="image_count_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                reply_markup=reply_markup

            )

            return

        elif count_type == 'custom':

            USER_STATE[user_id]['step'] = 'custom_image_count'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

    elif data == "image_count_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        user_format = state.get('format', '').lower()

        if user_format in ['reels']:

            default_text = "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ —Ç–µ–∫—Å—Ç–µ"

        elif user_format in ['tiktok']:

            default_text = "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ —Ç–µ–∫—Å—Ç–µ"

        elif user_format in ['instagram stories']:

            default_text = "1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

        elif user_format in ['–ø–æ—Å—Ç']:

            default_text = "2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        else:

            default_text = "2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        keyboard = [

            [InlineKeyboardButton(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_text})", callback_data="image_count:default")],

            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count:custom")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–°—Ç–∏–ª—å: {state.get('style', '')}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

            reply_markup=reply_markup

        )

    elif data.startswith('simple_orientation:'):

        orientation = data.split(':', 1)[1]

        USER_STATE[user_id]['simple_orientation'] = orientation

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        USER_STATE[user_id]['step'] = 'image_gen_model'

        keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_orientation_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        if orientation == "vertical":
            orientation_text = "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)"
        elif orientation == "horizontal":
            orientation_text = "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)"
        else:
            orientation_text = "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)"

        await query.edit_message_text(

            f'–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞: {orientation_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

            reply_markup=reply_markup

        )

    elif data == "simple_orientation_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

        keyboard = [

            [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

            [InlineKeyboardButton("üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)", callback_data="simple_orientation:horizontal")],

            [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

            reply_markup=reply_markup

        )

    elif data.startswith('simple_orientation:'):
        orientation = data.split(':', 1)[1]
        USER_STATE[user_id]['simple_orientation'] = orientation
        USER_STATE[user_id]['step'] = 'image_gen_model'
        await show_model_selection(update, context)
        return

    elif data.startswith('image_gen_model:'):

        selected_model = data.split(':', 1)[1]

        USER_STATE[user_id]['image_gen_model'] = selected_model

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

        model_tips = ""

        if selected_model in MODEL_TIPS:

            model_tips = f"\n\n{MODEL_TIPS[selected_model]}"

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

            USER_STATE[user_id]['step'] = 'image_gen_style'

            keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

            keyboard.append([InlineKeyboardButton("üéØ –¢–æ–ª—å–∫–æ –º–æ–π –ø—Ä–æ–º–ø—Ç", callback_data="skip_style")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {selected_model}{model_tips}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å (—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –∞–∫–≤–∞—Ä–µ–ª—å –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üéØ –¢–æ–ª—å–∫–æ –º–æ–π –ø—Ä–æ–º–ø—Ç¬ª. –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É. –•–æ—Ç–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ü–æ–ø—Ä–æ—Å–∏—Ç–µ ChatGPT —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            USER_STATE[user_id]['step'] = 'image_gen_style'

            keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

            keyboard.append([InlineKeyboardButton("üéØ –¢–æ–ª—å–∫–æ –º–æ–π –ø—Ä–æ–º–ø—Ç", callback_data="skip_style")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {selected_model}{model_tips}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å (—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –∞–∫–≤–∞—Ä–µ–ª—å –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üéØ –¢–æ–ª—å–∫–æ –º–æ–π –ø—Ä–æ–º–ø—Ç¬ª. –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É. –•–æ—Ç–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ü–æ–ø—Ä–æ—Å–∏—Ç–µ ChatGPT —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",

                reply_markup=reply_markup

            )

        return

    elif data == "model_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="simple_orientation:vertical")],

                [InlineKeyboardButton("üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)", callback_data="simple_orientation:horizontal")],

                [InlineKeyboardButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (1:1)", callback_data="simple_orientation:square")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è

            keyboard = [

                [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

            ]

            keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f'–§–æ—Ä–º–∞—Ç: {state.get("format", "")}\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

                reply_markup=reply_markup

            )

    elif data.startswith('image_gen_style:'):

        selected_img_style = data.split(':', 1)[1]

        USER_STATE[user_id]['image_gen_style'] = selected_img_style

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['step'] = 'image_count_simple'

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {selected_img_style}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã

            USER_STATE[user_id]['step'] = STEP_TOPIC

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞

            format_tips = get_format_tips(user_format)

            message_text = f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω: {selected_img_style}\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è:\n\n{format_tips}"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                message_text,

                reply_markup=reply_markup

            )

        return

    elif data == "style_gen_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        keyboard = [[InlineKeyboardButton(style, callback_data=f"image_gen_style:{style}")] for style in IMAGE_GEN_STYLES]

        keyboard.append([InlineKeyboardButton("üéØ –¢–æ–ª—å–∫–æ –º–æ–π –ø—Ä–æ–º–ø—Ç", callback_data="skip_style")])

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="model_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–ú–æ–¥–µ–ª—å: {state.get('image_gen_model', '')}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å (—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –∞–∫–≤–∞—Ä–µ–ª—å –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üéØ –¢–æ–ª—å–∫–æ –º–æ–π –ø—Ä–æ–º–ø—Ç¬ª. –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É. –•–æ—Ç–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ü–æ–ø—Ä–æ—Å–∏—Ç–µ ChatGPT —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",

            reply_markup=reply_markup

        )

    elif data.startswith('image_count_simple:'):

        count_data = data.split(':', 1)[1]

        if count_data == 'custom':

            USER_STATE[user_id]['step'] = 'custom_image_count_simple'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

        else:

            try:

                count = int(count_data)

                if 1 <= count <= 10:

                    USER_STATE[user_id]['image_count'] = count

                    USER_STATE[user_id]['step'] = 'simple_image_prompt'

                    state = USER_STATE[user_id]

                    

                    keyboard = [

                        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    

                    tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                    

                    await query.edit_message_text(

                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                        reply_markup=reply_markup

                    )

                else:

                    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10:")

            except ValueError:

                await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    elif data == "custom_image_count_simple":

        USER_STATE[user_id]['step'] = 'custom_image_count_simple'

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ç 1 –¥–æ 10):")

        return

    elif data == "more_images":

        user_format = state.get('format', '').lower()

        if user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_scenes' in state:

            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ —Å—Ü–µ–Ω –∑–∞–Ω–æ–≤–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

            state['generated_scenes_count'] = 0

            USER_STATE[user_id] = state

            

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º –∂–µ —Å—Ü–µ–Ω–∞–º...')

            asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=state['last_scenes']))

        elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_script' in state:

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞–º...')

            scenes = await extract_scenes_from_script(state['last_script'], user_format)

            state['last_scenes'] = scenes

            asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=scenes))

        else:

            asyncio.create_task(send_images_async(update, context, state, prompt_type=state.get('last_prompt_type', 'auto'), user_prompt=state.get('last_user_prompt')))

    elif data == "more_images_same_settings":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            await update.callback_query.edit_message_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...')

            asyncio.create_task(send_images_async(update, context, state, prompt_type=state.get('last_prompt_type', 'user'), user_prompt=state.get('last_user_prompt')))

        else:

            # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

            asyncio.create_task(send_images_async(update, context, state, prompt_type=state.get('last_prompt_type', 'auto'), user_prompt=state.get('last_user_prompt')))

    elif data == "change_settings":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            USER_STATE[user_id]['step'] = 'image_gen_model'

            keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

            await show_main_menu(update, context)

    elif data == "reset":

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        USER_STATE[user_id] = {'step': 'main_menu'}

        await show_format_selection(update, context)

    elif data == "custom_image_prompt":

        USER_STATE[user_id]['step'] = 'custom_image_prompt'

        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")

    elif data == "edit_image":

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await edit_image_command(update, context)



    elif data == "back_to_main":

        await show_main_menu(update, context)

    elif data == "skip_style":

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–∏–ª—å - –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø—Ä–æ–º–ø—Ç—É
        USER_STATE[user_id]['image_gen_style'] = ''

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        user_format = state.get('format', '').lower()

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['step'] = 'image_count_simple'

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(

                f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –¢–æ–ª—å–∫–æ –≤–∞—à –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –¥–æ–±–∞–≤–æ–∫)\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

                reply_markup=reply_markup

            )

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã

            USER_STATE[user_id]['step'] = STEP_TOPIC

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞

            format_tips = get_format_tips(user_format)

            message_text = f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –¢–æ–ª—å–∫–æ –≤–∞—à –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –¥–æ–±–∞–≤–æ–∫)\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è:\n\n{format_tips}"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

            keyboard = [

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                message_text,

                reply_markup=reply_markup

            )

    elif data == "generate_images":

        try:

            user_format = state.get('format', '').lower()

            state = USER_STATE.get(user_id, {})

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_scenes' in state:

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=state['last_scenes']))

            elif user_format in ['instagram reels', 'tiktok', 'youtube shorts'] and 'last_script' in state:

                scenes = await extract_scenes_from_script(state['last_script'], user_format)

                state['last_scenes'] = scenes

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=scenes))

            else:

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto'))

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            USER_STATE[user_id] = {'step': STEP_FORMAT}

    elif data.startswith('generate_with_count:'):

        try:

            count = int(data.split(':', 1)[1])

            user_format = state.get('format', '').lower()

            state = USER_STATE.get(user_id, {})

            

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            state['image_count'] = count

            USER_STATE[user_id] = state

            

            if 'last_scenes' in state:

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ü–µ–Ω—ã –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                scenes = state['last_scenes'][:count]

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=scenes))

            else:

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto'))

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

            USER_STATE[user_id] = {'step': STEP_FORMAT}

    elif data.startswith('simple_image_count:'):

        count_data = data.split(':', 1)[1]

        if count_data == 'custom':

            USER_STATE[user_id]['step'] = 'custom_simple_image_count'

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

            return

        else:

            try:

                count = int(count_data)

                if 1 <= count <= 10:

                    USER_STATE[user_id]['image_count'] = count

                    USER_STATE[user_id]['step'] = 'simple_image_prompt'

                    state = USER_STATE[user_id]

                    

                    keyboard = [

                        [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    

                    tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                    

                    await query.edit_message_text(

                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                        reply_markup=reply_markup

                    )

                else:

                    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10:")

            except ValueError:

                await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    elif data == "simple_image_prompt_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        USER_STATE[user_id]['step'] = 'simple_image_prompt'

        keyboard = [

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

        

        await query.edit_message_text(

            f"–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

            reply_markup=reply_markup

        )

    elif data == "simple_image_count_back":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        USER_STATE[user_id]['step'] = 'image_count_simple'

        keyboard = [

            [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="simple_image_count:1")],

            [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="simple_image_count:2")],

            [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="simple_image_count:3")],

            [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="simple_image_count:4")],

            [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="simple_image_count:5")],

            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="simple_image_count:custom")]

        ]

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {state.get('image_gen_style', '')}\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",

            reply_markup=reply_markup

        )

    elif data == "custom_count_after_text":

        USER_STATE[user_id]['step'] = 'custom_count_after_text'

        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")

    elif data == "generate_remaining_scenes":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ü–µ–Ω

        try:

            user_format = state.get('format', '').lower()

            if 'last_scenes' in state and 'generated_scenes_count' in state:

                generated_count = state.get('generated_scenes_count', 0)

                total_scenes = state.get('last_scenes', [])

                

                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ü–µ–Ω—ã

                remaining_scenes = total_scenes[generated_count:]

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ü–µ–Ω

                state['image_count'] = len(remaining_scenes)

                

                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã send_images –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª–∞ –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã

                state['generated_scenes_count'] = generated_count

                USER_STATE[user_id] = state

                

                await query.edit_message_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {len(remaining_scenes)} —Å—Ü–µ–Ω...')

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=remaining_scenes))

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    elif data == "generate_all_scenes":

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ü–µ–Ω

        try:

            user_format = state.get('format', '').lower()

            if 'last_scenes' in state:

                all_scenes = state.get('last_scenes', [])

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Å–µ—Ö —Å—Ü–µ–Ω

                state['image_count'] = len(all_scenes)

                

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã –∑–∞–Ω–æ–≤–æ

                state['generated_scenes_count'] = 0

                USER_STATE[user_id] = state

                

                await query.edit_message_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö {len(all_scenes)} —Å—Ü–µ–Ω...')

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=all_scenes))

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    elif data == "generate_more":

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        USER_STATE[user_id] = {'step': 'main_menu'}

        await show_format_selection(update, context)

    elif data == "select_scene_count":

        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω

        try:

            user_format = state.get('format', '').lower()

            if 'last_scenes' in state:

                total_scenes = state.get('last_scenes', [])

                generated_count = state.get('generated_scenes_count', 0)

                

                keyboard = []

                

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ü–µ–Ω

                remaining_count = len(total_scenes) - generated_count

                if remaining_count > 0:

                    for i in range(1, min(remaining_count + 1, 6)):  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫

                        start_scene = generated_count + 1

                        end_scene = generated_count + i

                        if i == 1:

                            scene_text = f"–°—Ü–µ–Ω–∞ {start_scene}"

                        else:

                            scene_text = f"–°—Ü–µ–Ω—ã {start_scene}-{end_scene}"

                        keyboard.append([InlineKeyboardButton(scene_text, callback_data=f"generate_scenes_count:{i}")])

                

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω

                keyboard.append([InlineKeyboardButton(f"–í—Å–µ —Å—Ü–µ–Ω—ã 1-{len(total_scenes)}", callback_data=f"generate_scenes_count:{len(total_scenes)}")])

                

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

                keyboard.append([InlineKeyboardButton("üî¢ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_scene_count")])

                

                # –ù–∞–≤–∏–≥–∞—Ü–∏—è

                keyboard.extend([

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")],

                ])

                

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(

                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"

                    f"–í—Å–µ–≥–æ —Å—Ü–µ–Ω: {len(total_scenes)}\n"

                    f"–£–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ü–µ–Ω—ã 1-{generated_count}\n"

                    f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Å—Ü–µ–Ω—ã {generated_count + 1}-{len(total_scenes)}",

                    reply_markup=reply_markup

                )

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: {e}")

    elif data.startswith('generate_scenes_count:'):

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω

        try:

            count = int(data.split(':', 1)[1])

            user_format = state.get('format', '').lower()

            

            if 'last_scenes' in state:

                all_scenes = state.get('last_scenes', [])

                generated_count = state.get('generated_scenes_count', 0)

                

                # –ë–µ—Ä–µ–º —Å—Ü–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

                scenes_to_generate = all_scenes[generated_count:generated_count + count]

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω

                state['image_count'] = len(scenes_to_generate)

                

                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã send_images –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª–∞ –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã

                state['generated_scenes_count'] = generated_count

                USER_STATE[user_id] = state

                

                await query.edit_message_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {len(scenes_to_generate)} —Å—Ü–µ–Ω...')

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=scenes_to_generate))

            else:

                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã")

        except Exception as e:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)

    elif data == "custom_scene_count":

        # –ó–∞–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω

        USER_STATE[user_id]['step'] = 'custom_scene_count'

        total_scenes = state.get('total_scenes_count', 0)

        generated_count = state.get('generated_scenes_count', 0)

        remaining_count = total_scenes - generated_count

        

        await query.edit_message_text(

            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Ç 1 –¥–æ {remaining_count}):\n"

            f"–í—Å–µ–≥–æ —Å—Ü–µ–Ω: {total_scenes}\n"

            f"–£–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ü–µ–Ω—ã 1-{generated_count}\n"

            f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Å—Ü–µ–Ω—ã {generated_count + 1}-{total_scenes}"

        )

    elif data == "back_to_main_options":

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–ø—Ü–∏—è–º –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        user_format = state.get('format', '').lower()

        generated_count = state.get('generated_scenes_count', 0)

        total_count = state.get('total_scenes_count', 0)

        

        keyboard = []

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ

        keyboard.append([InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë (—Ç–µ –∂–µ —Å—Ü–µ–Ω—ã)", callback_data="more_images")])

        

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

        if total_count > generated_count:

            remaining_count = total_count - generated_count

            start_scene = generated_count + 1

            end_scene = total_count

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—ã {start_scene}-{end_scene}", callback_data="generate_remaining_scenes")])

            keyboard.append([InlineKeyboardButton(f"üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã 1-{total_count}", callback_data="generate_all_scenes")])

        

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        keyboard.append([InlineKeyboardButton("üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω", callback_data="select_scene_count")])

        

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard.extend([

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="create_video_from_images")],

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data="create_video_from_script")],

        ])

        

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        keyboard.extend([

            [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", callback_data="custom_image_prompt")],

            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset")],

        ])

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("–•–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?", reply_markup=reply_markup)



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø—Ä–æ–±–∞

    elif data == "video_generation":

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        keyboard = [

            [InlineKeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="video_text_to_video")],

            [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="video_image_to_video")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ**\n\n"

            "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (Bytedance Seedance 1 Pro) –ª–∏—Ü–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è.\n\n"

            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—Ü–æ:\n"

            "‚Ä¢ —Å–¥–µ–ª–∞–π—Ç–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è;\n"

            "‚Ä¢ –ï—Å–ª–∏ –ª–∏—Ü–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è, –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–º–ø—Ç–∞ —É–∫–∞–∂–∏—Ç–µ: ¬´–Ω–µ –º–µ–Ω—è–π –ª–∏—Ü–æ¬ª –∏ –æ–ø–∏—à–∏—Ç–µ, —á—å—ë –ª–∏—Ü–æ –Ω–µ –º–µ–Ω—è—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: ¬´–ª–∏—Ü–∞ –Ω–µ –º–µ–Ω—è–π¬ª, –∏–ª–∏ ¬´–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏—Ü–∞¬ª –∏ —Ç.–¥.;\n\n"

            "–¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞.\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "create_video_from_script":

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é (text-to-video)

        state['video_type'] = 'text_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "create_video_from_images":

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (image-to-video)

        state['video_type'] = 'image_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé¨ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data.startswith("video_quality:"):

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ

        quality = data.split(":")[1]

        state['video_quality'] = quality

        state['step'] = STEP_VIDEO_DURATION

        

        keyboard = [

            [InlineKeyboardButton("‚è±Ô∏è 5 —Å–µ–∫—É–Ω–¥", callback_data="video_duration:5")],

            [InlineKeyboardButton("‚è±Ô∏è 10 —Å–µ–∫—É–Ω–¥", callback_data="video_duration:10")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_video_quality")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"üé¨ **–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {quality}**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )


    elif data == "back_to_video_quality":
        state['step'] = STEP_VIDEO_QUALITY
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],
            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],
            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("video_duration:"):

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ

        duration = int(data.split(":")[1])

        state['video_duration'] = duration

        state['step'] = 'waiting_for_aspect_ratio'

        

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω

        keyboard = [

            [InlineKeyboardButton("üì± Instagram Stories/Reels (9:16)", callback_data="aspect_ratio:9:16")],

            [InlineKeyboardButton("üì∑ Instagram Post (1:1)", callback_data="aspect_ratio:1:1")],

            [InlineKeyboardButton("üñ•Ô∏è YouTube/–û–±—ã—á–Ω–æ–µ (16:9)", callback_data="aspect_ratio:16:9")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {duration} —Å–µ–∫**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏—é —Å—Ç–æ—Ä–æ–Ω –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data.startswith("aspect_ratio:"):

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω

        aspect_ratio = data.split(":")[1] + ":" + data.split(":")[2]  # –ü–æ–ª—É—á–∞–µ–º "9:16", "1:1", "16:9"

        state['aspect_ratio'] = aspect_ratio

        state['step'] = STEP_VIDEO_GENERATION

        

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ

        if state.get('video_type') == 'text_to_video':

            await query.edit_message_text(

                "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É**\n\n"

                "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –≤–∏–¥–µ–æ:\n\n"

                "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

                "‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —Å —Ü–≤–µ—Ç—É—â–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏\n"

                "‚Ä¢ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –ª–µ—Ç–∏—Ç —Å—Ä–µ–¥–∏ –∑–≤–µ–∑–¥\n"

                "‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂ —Å –Ω–µ–±–æ—Å–∫—Ä–µ–±–∞–º–∏\n\n"

                "üåê **–í–∞—à –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ**",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")

                ]])

            )

        else:

            # –î–ª—è image-to-video –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            state['step'] = 'waiting_for_image'

            await query.edit_message_text(

                "üñºÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"

                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"

                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")

                ]])

            )



    elif data == "video_text_to_video":

        # –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        state['video_type'] = 'text_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "video_image_to_video":

        # –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        state['video_type'] = 'image_to_video'

        state['step'] = STEP_VIDEO_QUALITY

        keyboard = [

            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ (480p)", callback_data="video_quality:480p")],

            [InlineKeyboardButton("üîÑ –°—Ä–µ–¥–Ω–µ–µ (720p)", callback_data="video_quality:720p")],

            [InlineKeyboardButton("‚≠ê –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (1080p)", callback_data="video_quality:1080p")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(

            "üñºÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"

            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",

            reply_markup=reply_markup

        )



    elif data == "waiting":

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        await query.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")



    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤

    elif data == "enhance_prompt":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç

        await show_enhanced_prompt(update, context, state)

        return

        

    elif data == "generate_as_is":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_video_async(update, context, state))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé¨ **–í–∏–¥–µ–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
        )

        return

        

    elif data == "use_enhanced":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_video_async(update, context, state))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé¨ **–í–∏–¥–µ–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
        )

        return

        

    elif data == "show_another_enhancement":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è

        enhancement_attempt = state.get('enhancement_attempt', 1) + 1

        if enhancement_attempt <= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏

            state['enhancement_attempt'] = enhancement_attempt

            await show_enhanced_prompt(update, context, state)

        else:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

            keyboard = [

                [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="use_enhanced")],

                [InlineKeyboardButton("‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É", callback_data="use_simple")]

            ]

            state['enhancement_attempt'] = enhancement_attempt  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

            await query.edit_message_text(

                "üîÑ **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è**\n\n"

                "–í—ã –º–æ–∂–µ—Ç–µ:\n"

                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"

                "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        return

        

    elif data == "use_simple":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É

        if 'enhanced_prompt' in state:

            del state['enhanced_prompt']  # –£–±–∏—Ä–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_video_async(update, context, state))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé¨ **–í–∏–¥–µ–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
        )

        return





async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Ç–∏–ø={type(update.message).__name__}, —Ñ–æ—Ç–æ={bool(update.message.photo)}, —Ç–µ–∫—Å—Ç={bool(update.message.text)}")

    state = USER_STATE.get(user_id, {})

    step = state.get('step')

    if step == STEP_TOPIC:

        user_format = state.get('format', '').lower()

        

        if user_format == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':

            # –î–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            USER_STATE[user_id]['topic'] = update.message.text

            USER_STATE[user_id]['step'] = 'image_count_simple'

            state = USER_STATE[user_id]

            

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            keyboard = [

                [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_count_simple:1")],

                [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:2")],

                [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:3")],

                [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_count_simple:4")],

                [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_count_simple:5")],

                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="image_count_simple:custom")]

            ]

            keyboard.extend([

                [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_prompt_back")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            

            await update.message.reply_text(

                f'–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "{update.message.text}"\n\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',

                reply_markup=reply_markup

            )

            return

        else:

            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞

            USER_STATE[user_id]['topic'] = update.message.text

            USER_STATE[user_id]['step'] = STEP_DONE

            state = USER_STATE[user_id]

            

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–¥—Ä–∞–º–∏

            if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:

                prompt = (

                    f"–§–æ—Ä–º–∞—Ç: {state.get('format', '')}\n"

                    f"–°—Ç–∏–ª—å: {state.get('style', '')}\n"

                    f"–¢–µ–º–∞: {state.get('topic', '')}\n"

                    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ —Å –∫–∞–¥—Ä–∞–º–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: [–ö–∞–¥—Ä 1: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã] –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ. [–ö–∞–¥—Ä 2: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã] –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ."

                )

            else:

                prompt = (

                    f"–§–æ—Ä–º–∞—Ç: {state.get('format', '')}\n"

                    f"–°—Ç–∏–ª—å: {state.get('style', '')}\n"

                    f"–¢–µ–º–∞: {state.get('topic', '')}\n"

                    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç."

                )

            await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')

        

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_content_async(update, context, state))

    elif step == 'custom_image_count':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'image_gen_model'

                # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

                keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(

                    f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'custom_image_count_simple':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'custom_format':

        custom_format = update.message.text.strip()

        if len(custom_format) > 50:

            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")

            return

        USER_STATE[user_id]['format'] = custom_format

        USER_STATE[user_id]['step'] = STEP_STYLE

        keyboard = [

            [InlineKeyboardButton(style, callback_data=f"style:{style}")] for style in STYLES

        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"

        keyboard.append([InlineKeyboardButton("üìÑ –î—Ä—É–≥–æ–µ", callback_data="style:custom")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="format_selection")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(

            f'–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {custom_format}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:',

            reply_markup=reply_markup

        )

    elif step == 'custom_style':

        custom_style = update.message.text.strip()

        if len(custom_style) > 50:

            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")

            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        USER_STATE[user_id]['style'] = custom_style

        USER_STATE[user_id]['step'] = 'image_gen_model'

        keyboard = [[InlineKeyboardButton(f"{model} ({MODEL_DESCRIPTIONS[model]})", callback_data=f"image_gen_model:{model}")] for model in IMAGE_GEN_MODELS]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        keyboard.extend([

            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_back")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(

            f'–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {custom_style}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:',

            reply_markup=reply_markup

        )

    elif step == 'custom_image_prompt':

        user_prompt = update.message.text.strip()

        if not is_prompt_safe(user_prompt):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        USER_STATE[user_id]['step'] = STEP_DONE

        asyncio.create_task(send_images_async(update, context, state, prompt_type='user', user_prompt=user_prompt))

    elif step == 'simple_image_count_selection':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")


    elif step == 'image_count_simple':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_prompt_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

    elif step == 'custom_image_count_simple':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="style_gen_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

                tips = """ÔøΩÔøΩ –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'simple_image_prompt':

        user_prompt = update.message.text.strip()

        if not is_prompt_safe(user_prompt):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        USER_STATE[user_id]['topic'] = user_prompt

        USER_STATE[user_id]['step'] = STEP_DONE

        state = USER_STATE[user_id]

        

        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')

        asyncio.create_task(send_images_async(update, context, state, prompt_type='user', user_prompt=user_prompt))

    

    elif step == STEP_VIDEO_GENERATION:

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        video_prompt = update.message.text.strip()

        if not is_prompt_safe(video_prompt):

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é

        state['video_prompt'] = video_prompt

        await show_prompt_review(update, context, state)

    

    elif step == 'waiting_for_video_prompt':

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        video_prompt = update.message.text.strip()

        

        if not video_prompt:

            await update.message.reply_text(

                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"

                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_options")

                ]])

            )

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        state['video_prompt'] = video_prompt

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤

        await show_prompt_review(update, context, state)

    

    elif step == 'waiting_for_image':

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        if update.message.photo:

            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            file = await context.bot.get_file(photo.file_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
            image_url = file.file_path

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

            state['selected_image_url'] = image_url

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ

            state['step'] = 'waiting_for_video_prompt'

            

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç

            await update.message.reply_text(

                "üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"

                "üìù **–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"

                "üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:**\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –∞–Ω–∏–º–∞—Ü–∏—é\"\n"

                "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏\"\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã\"\n"

                "‚Ä¢ \"–°–æ–∑–¥–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω—É—é —Å—Ü–µ–Ω—É\"\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è\"\n\n"

                "üé¨ **–ü–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ**\n\n"

                "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")

                ]])

            )

        else:

            await update.message.reply_text(

                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"

                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="video_generation")

                ]])

            )

    elif step == 'custom_simple_image_count':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                USER_STATE[user_id]['step'] = 'simple_image_prompt'

                keyboard = [

                    [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],

                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="simple_image_count_back")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                tips = """üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:

‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –¥–µ—Ç–∞–ª–∏

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞

‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏

‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç



‚úÖ –ü—Ä–∏–º–µ—Ä—ã:

‚Ä¢ "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∞–¥–æ–º, –∑–∞–∫–∞—Ç–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ, –∑–≤–µ–∑–¥—ã, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"

‚Ä¢ "–¶–≤–µ—Ç—É—â–∏–π —Å–∞–¥ —Å —Ä–æ–∑–∞–º–∏, –±–∞–±–æ—á–∫–∏, —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"



‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:

‚Ä¢ "–∫—Ä–∞—Å–∏–≤–æ", "—Ö–æ—Ä–æ—à–æ", "–∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞"

‚Ä¢ –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è

‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""

                

                await update.message.reply_text(

                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:\n\n{tips}",

                    reply_markup=reply_markup

                )

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == STEP_DONE:

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ STEP_DONE, 

        # —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ

        user_text = update.message.text.strip()

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        if user_text.lower() in ['–µ—â–µ', '–µ—â—ë', '—Å–Ω–æ–≤–∞', '–ø–æ–≤—Ç–æ—Ä–∏', '–µ—â–µ —Ä–∞–∑', '–µ—â—ë —Ä–∞–∑']:

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞

            USER_STATE[user_id] = {'step': 'main_menu'}

            await show_format_selection(update, context)

        else:

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã

            keyboard = [

                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_more")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(

                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ' –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",

                reply_markup=reply_markup

            )

    elif step == 'custom_count_after_text':

        try:

            count = int(update.message.text.strip())

            if 1 <= count <= 10:

                USER_STATE[user_id]['image_count'] = count

                state = USER_STATE[user_id]

                

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

                if 'last_scenes' in state:

                    scenes = state['last_scenes'][:count]

                    await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')

                    asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=scenes))

                else:

                    await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')

                    asyncio.create_task(send_images_async(update, context, state, prompt_type='auto'))

            else:

                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

    elif step == 'custom_scene_count':

        try:

            count = int(update.message.text.strip())

            total_scenes = state.get('total_scenes_count', 0)

            generated_count = state.get('generated_scenes_count', 0)

            remaining_count = total_scenes - generated_count

            

            if 1 <= count <= remaining_count:

                # –ë–µ—Ä–µ–º —Å—Ü–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

                all_scenes = state.get('last_scenes', [])

                scenes_to_generate = all_scenes[generated_count:generated_count + count]

                

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω

                state['image_count'] = len(scenes_to_generate)

                

                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã send_images –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª–∞ –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã

                state['generated_scenes_count'] = generated_count

                USER_STATE[user_id] = state

                

                await update.message.reply_text(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {count} —Å—Ü–µ–Ω...')

                asyncio.create_task(send_images_async(update, context, state, prompt_type='auto', scenes=scenes_to_generate))

            else:

                await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {remaining_count}:")

        except ValueError:

            total_scenes = state.get('total_scenes_count', 0)

            generated_count = state.get('generated_scenes_count', 0)

            remaining_count = total_scenes - generated_count

            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {remaining_count} (—Å—Ü–µ–Ω—ã {generated_count + 1}-{total_scenes}):")

    elif step == 'select_image_for_edit':

        try:

            image_index = int(update.message.text.strip()) - 1

            last_images = state.get('last_images', [])

            

            if 0 <= image_index < len(last_images):

                selected_image_url = last_images[image_index]

                USER_STATE[user_id]['selected_image_url'] = selected_image_url

                USER_STATE[user_id]['step'] = 'enter_edit_prompt'

                

                await update.message.reply_text(

                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{image_index + 1}\n\n"

                    "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"

                    "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

                    "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

                    "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

                    "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

                    "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

                    "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\""

                )

            else:

                await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(last_images)}:")

        except ValueError:

            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

    elif step == 'upload_image_for_edit':

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if update.message.photo:

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

                photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                file = await context.bot.get_file(photo.file_id)

                

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
                if not file or not file.file_path:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑."
                    )
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
                USER_STATE[user_id]['selected_image_url'] = file.file_path

                USER_STATE[user_id]['step'] = 'enter_edit_prompt'

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                import traceback
                logging.error(f"Traceback: {traceback.format_exc()}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)[:100]}...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑."
                )
                return

            

            await update.message.reply_text(

                "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"

                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n"

                "üîÑ –í–∞—à –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"

                "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"

                "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ —Å–∏–Ω–∏–π\"\n"

                "‚Ä¢ \"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\"\n"

                "‚Ä¢ \"–°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∞–∫–≤–∞—Ä–µ–ª–∏\"\n"

                "‚Ä¢ \"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç'\"\n"

                "‚Ä¢ \"–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é\"\n\n"

                "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /start"

            )

        else:

            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    

    elif step == 'enter_edit_prompt':

        edit_prompt = update.message.text.strip()

        selected_image_url = state.get('selected_image_url')

        

        if not selected_image_url:

            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /edit_image")

            return

        

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è FLUX –∏ —É–ª—É—á—à–∞–µ–º –µ–≥–æ

        try:

            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            loop = asyncio.get_event_loop()
            messages = [
                        {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —É–ª—É—á—à–∏ –µ–≥–æ –¥–ª—è FLUX.1 Kontext Pro. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ—á–Ω—ã–π —Å–º—ã—Å–ª. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º."},
                        {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –∏ —É–ª—É—á—à–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {edit_prompt}"}
            ]
            english_prompt = await openai_chat_completion_async(messages, "gpt-4o-mini", 200, 0.1)

            

            await update.message.reply_text(f"üîÑ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {english_prompt}")

            

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}")

            english_prompt = edit_prompt  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è

            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")

        

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

        asyncio.create_task(edit_image_with_flux_async(update, context, state, selected_image_url, english_prompt))

        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        USER_STATE[user_id]['step'] = None

        USER_STATE[user_id].pop('selected_image_url', None)

    else:

        if update.message.photo:

            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            await update.message.reply_text('üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.')

        else:

            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.')



async def show_prompt_review(update, context, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Ä–µ—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        video_type = state.get('video_type', 'text_to_video')

        video_prompt = state.get('video_prompt', '')

        english_prompt = state.get('english_prompt', '')

        

        if not english_prompt:

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–µ—Ä–µ–≤–æ–¥–∏–º

            try:

                import openai

                client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                loop = asyncio.get_event_loop()
                messages = [
                            {"role": "system", "content": "Translate the user's request from Russian to English. Keep the exact meaning and do not add extra details. If the original is short, keep it short."},
                            {"role": "user", "content": f"Translate this prompt: {video_prompt}"}
                ]
                english_prompt = await openai_chat_completion_async(messages, "gpt-4o-mini", 150, 0.1)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                state['english_prompt'] = english_prompt

                

                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

                logging.info(f"Original Russian prompt: {video_prompt}")

                logging.info(f"Translated English prompt: {english_prompt}")

                

            except Exception as e:

                logging.error(f"Translation failed: {e}, using original prompt")

                english_prompt = video_prompt

                state['english_prompt'] = english_prompt

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞

        if video_type == 'text_to_video':

            prompt_text = f"üìù **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {video_prompt}\nüåê **–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {english_prompt}"

        else:  # image_to_video

            prompt_text = f"üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** –∑–∞–≥—Ä—É–∂–µ–Ω–æ\nüìù **–ü—Ä–æ–º–ø—Ç:** {video_prompt}\nüåê **–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {english_prompt}"

        

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º

        keyboard = [

            [

                InlineKeyboardButton("‚úÖ –î–∞, —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="enhance_prompt"),

                InlineKeyboardButton("‚ùå –ù–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="generate_as_is")

            ]

        ]

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                f"üé¨ **–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫ –ø—Ä–æ–º–ø—Ç—É?**\n\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–º—ã—Å–µ–ª.",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        else:

            await update.message.reply_text(

                f"üé¨ **–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫ –ø—Ä–æ–º–ø—Ç—É?**\n\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–º—ã—Å–µ–ª.",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞

        state['current_step'] = STEP_PROMPT_REVIEW

        state['enhancement_attempt'] = 1  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è

        

    except Exception as e:

        logging.error(f"Error in show_prompt_review: {e}")

        # Fallback –∫ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_video_async(update, context, state))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé¨ **–í–∏–¥–µ–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
        )



async def enhance_prompt_with_gpt(original_prompt, english_prompt, attempt=1):

    """–£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é GPT"""

    try:

        import openai

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

        system_content = f"""You are an expert at creating video generation prompts. 

The user has provided a simple prompt that was translated from Russian to English.

Your task is to enhance it for better video generation results while maintaining the core concept.



Original Russian: {original_prompt}

Current English: {english_prompt}



Enhance the English prompt by adding visual details, scene context, and cinematic elements.

Make it more descriptive and specific for AI video models.

This is attempt #{attempt} - if this is a retry, make it different from previous attempts.



Focus on:

- Visual elements and composition

- Movement and action details

- Scene atmosphere and mood

- Camera angles and perspectives



Keep the enhancement reasonable and don't add completely new elements not implied by the original."""

        

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        loop = asyncio.get_event_loop()
        response = await asyncio.wait_for(
            loop.run_in_executor(THREAD_POOL, lambda: client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_content},
                    {"role": "user", "content": f"Enhance this prompt for video generation: {english_prompt}"}
                ],
                max_tokens=200,
                temperature=0.7
            )),
            timeout=30.0
        )

        

        enhanced_prompt = response.choices[0].message.content.strip()

        logging.info(f"Enhanced prompt (attempt {attempt}): {enhanced_prompt}")

        

        return enhanced_prompt

        

    except Exception as e:

        logging.error(f"Error enhancing prompt: {e}")

        return english_prompt  # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É



async def show_enhanced_prompt(update, context, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    try:

        video_prompt = state.get('video_prompt', '')

        english_prompt = state.get('english_prompt', '')

        enhancement_attempt = state.get('enhancement_attempt', 1)

        

        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç

        enhanced_prompt = await enhance_prompt_with_gpt(video_prompt, english_prompt, enhancement_attempt)

        state['enhanced_prompt'] = enhanced_prompt

        state['enhancement_attempt'] = enhancement_attempt  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞

        prompt_text = f"üìù **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {video_prompt}\nüåê **–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {english_prompt}\n‚ú® **–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** {enhanced_prompt}"

        

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º

        keyboard = [

            [

                InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π", callback_data="use_enhanced"),

                InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="show_another_enhancement")

            ],

            [

                InlineKeyboardButton("‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É", callback_data="use_simple")

            ]

        ]

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                f"üîß **–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è?**",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        else:

            await update.message.reply_text(

                f"üîß **–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**\n\n"

                f"{prompt_text}\n\n"

                f"‚ùì **–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è?**",

                reply_markup=InlineKeyboardMarkup(keyboard)

            )

        

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞

        state['current_step'] = STEP_PROMPT_ENHANCEMENT

        

    except Exception as e:

        logging.error(f"Error in show_enhanced_prompt: {e}")

        # Fallback –∫ –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_video_async(update, context, state))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        await context.bot.send_message(
            chat_id=chat_id,
            text="üé¨ **–í–∏–¥–µ–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
        )



async def generate_content(update, context, state):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI"""
    user_id = update.effective_user.id
    user_format = state.get('format', '').lower()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–¥—Ä–∞–º–∏
    if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:
        prompt = (
            f"–§–æ—Ä–º–∞—Ç: {state.get('format', '')}\n"
            f"–°—Ç–∏–ª—å: {state.get('style', '')}\n"
            f"–¢–µ–º–∞: {state.get('topic', '')}\n"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ —Å –∫–∞–¥—Ä–∞–º–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: [–ö–∞–¥—Ä 1: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã] –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ. [–ö–∞–¥—Ä 2: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã] –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ."
        )
    else:
        prompt = (
            f"–§–æ—Ä–º–∞—Ç: {state.get('format', '')}\n"
            f"–°—Ç–∏–ª—å: {state.get('style', '')}\n"
            f"–¢–µ–º–∞: {state.get('topic', '')}\n"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç."
        )

    # –°–æ–∑–¥–∞—ë–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    topic = state.get('topic', '')
    style = state.get('style', '')
    format_name = state.get('format', '')
    selected_model = state.get('image_gen_model', 'Ideogram')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
    content_prompt = (
        f"–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {format_name} –Ω–∞ —Ç–µ–º—É '{topic}'. "
        f"–°—Ç–∏–ª—å: {style}. "
        f"–í–ê–ñ–ù–û: "
        f"- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä', '–Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –æ—Ç–¥—ã—Ö', '–∫–∞—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏' "
        f"- –°–æ–∑–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–º–µ–Ω–Ω–æ –ø—Ä–æ {topic} "
        f"- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è "
        f"- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {topic} "
        f"- –°–¥–µ–ª–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–¥–∞—é—â–∏–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º "
        f"- –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ (Reels/TikTok/Shorts): —Å–æ–∑–¥–∞–π –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∫–∞–¥—Ä–∞–º–∏ [–ö–∞–¥—Ä 1: –æ–ø–∏—Å–∞–Ω–∏–µ] —Ç–µ–∫—Å—Ç "
        f"- –î–ª—è –ø–æ—Å—Ç–æ–≤: —Å–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ "
        f"- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã, –Ω–µ —à–∞–±–ª–æ–Ω–Ω—ã–º "
        f"–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "
        f"- –î–ª—è '—Ç—É—Ä–±–∞–∑–∞': '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –¥–æ–º–∏–∫–∏ —Å—Ä–µ–¥–∏ —Å–æ—Å–µ–Ω, –±–∞–Ω—è —Å –≤–µ–Ω–∏–∫–∞–º–∏, —Ä—ã–±–∞–ª–∫–∞ –Ω–∞ –æ–∑–µ—Ä–µ' "
        f"- –î–ª—è '—Å–ø–æ—Ä—Ç–∑–∞–ª': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è' "
        f"–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –ø—Ä–∏–≤–ª–µ—á–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ."
    )

    try:
        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        loop = asyncio.get_event_loop()
        messages = [
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –Ω–µ—à–∞–±–ª–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–º—É –∏ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."},
                    {"role": "user", "content": content_prompt}
        ]
        gpt_reply = await openai_chat_completion_async(messages, "gpt-4o-mini", 1000, 0.8)

    except Exception as e:
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if user_format in ['instagram reels', 'tiktok', 'youtube shorts']:
            gpt_reply = f"[–ö–∞–¥—Ä 1: {topic} - –æ–±—â–∏–π –≤–∏–¥] –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è {topic}! [–ö–∞–¥—Ä 2: –¥–µ—Ç–∞–ª–∏ {topic}] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. [–ö–∞–¥—Ä 3: –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ {topic}] –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è."
        else:
            gpt_reply = f"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è {topic}! –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∂–¥—É—Ç –≤–∞—Å. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è. #{topic.replace(' ', '')} #–∫–∞—á–µ—Å—Ç–≤–æ #–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è"

    await update.message.reply_text(gpt_reply)

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if user_format not in ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞
        scenes = await extract_scenes_from_script(gpt_reply, user_format)
        scene_count = len(scenes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state['last_scenes'] = scenes
        state['last_script'] = gpt_reply
        USER_STATE[user_id] = state
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        keyboard = [
            [InlineKeyboardButton("1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_with_count:1")],
            [InlineKeyboardButton("2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate_with_count:2")],
            [InlineKeyboardButton("3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate_with_count:3")],
            [InlineKeyboardButton("4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate_with_count:4")],
            [InlineKeyboardButton("5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="generate_with_count:5")],
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_count_after_text")]
        ]
        
        keyboard.extend([
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="how_to_use")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f'–ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤! –ù–∞–π–¥–µ–Ω–æ {scene_count} —Å—Ü–µ–Ω.\n\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=reply_markup
        )

async def generate_content_async(update, context, state):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        await generate_content(update, context, state)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="generate_content")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=reply_markup
        )

async def edit_image_with_flux_async(update, context, state, original_image_url, edit_prompt):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        await edit_image_with_flux(update, context, state, original_image_url, edit_prompt)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="edit_image")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=reply_markup
        )

async def send_images_async(update, context, state, prompt_type='auto', user_prompt=None, scenes=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        await send_images(update, context, state, prompt_type, user_prompt, scenes)
    except Exception as e:
        import traceback
        error_traceback = traceback.format_exc()
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        logging.error(f"–ü–æ–ª–Ω—ã–π traceback: {error_traceback}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="generate_images")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=reply_markup
        )

async def check_payment_status_sync(update, context):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if not hasattr(update, 'callback_query') or not update.callback_query:
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Betatransfer payment_id –∏–∑ callback_data
        payment_id = update.callback_query.data.split(':')[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ Betatransfer ID
        payment_info = analytics_db.get_payment_by_betatransfer_id(payment_id)
        
        if not payment_info:
            await update.callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status = payment_info.get('status', 'unknown')
        amount = payment_info.get('amount', 0)
        currency = payment_info.get('currency', 'KGS')
        credit_amount = payment_info.get('credit_amount', 0)
        
        if status == 'completed':
            message = (
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {credit_amount:,}\n"
                f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
            )
        elif status == 'pending':
            message = (
                f"‚è≥ **–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
                f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
            )
        elif status == 'timeout':
            message = (
                f"‚è∞ **–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ**\n\n"
                f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
            )
        elif status == 'cancelled' or status == 'canceled' or status == 'cancel':
            message = (
                f"üö´ **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
            )
        else:
            message = (
                f"‚ùå **–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω**\n\n"
                f"üí≥ –°—É–º–º–∞: {amount} {currency}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}"
            )
        
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")

async def check_payment_status_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        await check_payment_status_sync(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")

async def handle_credit_purchase_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        await handle_credit_purchase(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤")
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤")

async def add_credits_command_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∞–¥–º–∏–Ω)"""
    try:
        await add_credits_command(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")

async def set_credits_command_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∞–¥–º–∏–Ω)"""
    try:
        await set_credits_command(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤")

async def check_credits_command_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∞–¥–º–∏–Ω)"""
    try:
        await check_credits_command(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤")

async def pending_payments_command_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ pending –ø–ª–∞—Ç–µ–∂–µ–π (–∞–¥–º–∏–Ω)"""
    try:
        await pending_payments_command(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π")

async def cleanup_payments_command_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∞–¥–º–∏–Ω)"""
    try:
        await cleanup_payments_command(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")

async def cleanup_confirm_command_async(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ (–∞–¥–º–∏–Ω)"""
    try:
        await cleanup_confirm_command(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π")

async def generate_video_async(update, context, state):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        await generate_video(update, context, state)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        else:
            return
            
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="generate_video")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=reply_markup
        )

async def generate_video(update, context, state):

    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Replicate API"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ user_id

    if hasattr(update, 'callback_query') and update.callback_query:

        chat_id = update.callback_query.message.chat_id

        user_id = update.callback_query.from_user.id

    elif hasattr(update, 'message') and update.message:

        chat_id = update.message.chat_id

        user_id = update.message.from_user.id

    else:

        # Fallback

        chat_id = None

        user_id = None

    

    if not chat_id or not user_id:

        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –∏–ª–∏ user_id")

        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –∑–∞ –∫—Ä–µ–¥–∏—Ç—ã)
    free_generations_left = await analytics_db_get_free_generations_left_async(user_id)
    user_credits = await analytics_db_get_user_credits_async(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    video_type = state.get('video_type', 'text_to_video')
    video_quality = state.get('video_quality', '480p')
    video_duration = state.get('video_duration', 5)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è pricing_config
    try:
        from pricing_config import get_generation_cost
        video_cost = get_generation_cost('Bytedance (Seedream-3)', video_quality=video_quality, video_duration=f"{video_duration}s")
    except ImportError:
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
        video_cost = 0
        if video_duration == 5:
            if video_quality == "480p":
                video_cost = 37
            elif video_quality == "720p":
                video_cost = 73
            elif video_quality == "1080p":
                video_cost = 183
        elif video_duration == 10:
            if video_quality == "480p":
                video_cost = 73
            elif video_quality == "720p":
                video_cost = 146
            elif video_quality == "1080p":
                video_cost = 365
        else:
            video_cost = 37  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π

    # –í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ –∫—Ä–µ–¥–∏—Ç—ã, –ù–ï –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if user_credits['balance'] < video_cost:
        # –ù–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ - –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        keyboard = [
            [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")],
            [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ!**\n\n"
                 f"üé¨ **–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ:**\n"
                 f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"
                 f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫\n"
                 f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {video_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                 f"ü™ô **–í–∞—à –±–∞–ª–∞–Ω—Å:** {user_credits['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                 f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:** {video_cost - user_credits['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                 "üí° **–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:**\n"
                 "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (3 —Ä–∞–∑–∞)\n"
                 "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (3 —Ä–∞–∑–∞)\n\n"
                 "üí∞ **–î–ª—è –≤–∏–¥–µ–æ –Ω—É–∂–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã:**\n"
                 "‚Ä¢ –ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ\n"
                 "‚Ä¢ –í–∏–¥–µ–æ –æ—Ç 37 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ 5 —Å–µ–∫—É–Ω–¥",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state['step'] = None
        state.pop('video_type', None)
        state.pop('video_quality', None)
        state.pop('video_duration', None)
        state.pop('video_prompt', None)
        return

    try:

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        video_type = state.get('video_type', 'text_to_video')

        video_quality = state.get('video_quality', '480p')

        video_duration = state.get('video_duration', 5)

        video_prompt = state.get('video_prompt', '')

        

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤)

        english_prompt = state.get('english_prompt', video_prompt)

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏

        if video_type == 'text_to_video':

            # –î–ª—è text-to-video –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            if not video_prompt:

                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω, —ç—Ç–æ –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–≥–æ –≤–≤–µ—Å—Ç–∏

                logging.error(f"video_prompt –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è text-to-video. State: {state}")

                raise Exception("–ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

            if 'enhanced_prompt' in state:

                english_prompt = state['enhanced_prompt']

                logging.info(f"Using enhanced prompt: {english_prompt}")

            elif english_prompt != video_prompt:

                logging.info(f"Using translated prompt: {english_prompt}")

            else:

                logging.info(f"Using original prompt: {english_prompt}")

            

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è text-to-video —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

            input_data = {

                "prompt": english_prompt,

                "duration": video_duration,

                "resolution": video_quality,

                "aspect_ratio": state.get('aspect_ratio', '16:9'),

                "camera_fixed": False,

                "fps": 24

            }

        else:

            # –î–ª—è image-to-video –Ω—É–∂–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ò –ø—Ä–æ–º–ø—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

            if 'selected_image_url' not in state:

                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å

                logging.error(f"selected_image_url –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è image-to-video. State: {state}")

                raise Exception("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è image-to-video

            if not video_prompt:

                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω, —ç—Ç–æ –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–≥–æ –≤–≤–µ—Å—Ç–∏

                logging.error(f"video_prompt –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è image-to-video. State: {state}")

                raise Exception("–ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

            if 'enhanced_prompt' in state:

                english_prompt = state['enhanced_prompt']

                logging.info(f"Using enhanced prompt for image-to-video: {english_prompt}")

            elif english_prompt != video_prompt:

                logging.info(f"Using translated prompt for image-to-video: {english_prompt}")

            else:

                logging.info(f"Using original prompt for image-to-video: {english_prompt}")

            

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è image-to-video —Å –ø—Ä–æ–º–ø—Ç–æ–º

            input_data = {

                "image": state['selected_image_url'],

                "prompt": english_prompt,  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è image-to-video

                "duration": video_duration,

                "resolution": video_quality,

                "aspect_ratio": state.get('aspect_ratio', '16:9'),

                "camera_fixed": False,

                "fps": 24

            }

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        if video_type == 'text_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

            prompt_text = f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {video_prompt}\nüåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {english_prompt}"

        elif video_type == 'image_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è image-to-video

            prompt_text = f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\nüìù –ü—Ä–æ–º–ø—Ç: {video_prompt}\nüåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {english_prompt}"

        else:

            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

            if video_type == 'image_to_video':

                prompt_text = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"

            else:

                prompt_text = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        size_warning = ""

        if video_quality == "1080p" and video_duration > 5:

            size_warning = "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í–∏–¥–µ–æ 1080p –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 5 —Å–µ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.\n"

        elif video_duration > 10:

            size_warning = "\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –î–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram (50 –ú–ë).\n"

        

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        cost_info = ""

        

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                f"üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"

                f"{prompt_text}\n"

                f"‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"

                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫\n\n"

                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã.{size_warning}{cost_info}",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", callback_data="waiting")

                ]])

            )

        else:

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)

            await update.message.reply_text(

                f"üé¨ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"

                f"{prompt_text}\n"

                f"‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"

                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫\n\n"

                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"

                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã.{size_warning}{cost_info}"

            )

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã Replicate –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

        try:

            logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Replicate API...")

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

            loop = asyncio.get_event_loop()
            test_output = await asyncio.wait_for(
                loop.run_in_executor(THREAD_POOL, lambda: replicate.run(
                    "replicate/hello-world",
                    input={"text": "test"}
                )),
                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
            )

            logging.info("Replicate API –¥–æ—Å—Ç—É–ø–µ–Ω")

        except Exception as credit_check_error:

            error_str = str(credit_check_error).lower()

            if "insufficient credit" in error_str or "insufficient_credit" in error_str:

                logging.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ Replicate")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤

                keyboard = [

                    [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://replicate.com/account/billing")],

                    [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                

                await context.bot.send_message(

                    chat_id=chat_id,

                    text="üí≥ **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ**\n\n"

                         "‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ Replicate –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã\n\n"

                         "üí° **–†–µ—à–µ–Ω–∏—è:**\n"

                         "‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing\n"

                         "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n"

                         "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ\n\n"

                         "üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**\n"

                         "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"

                         "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n"

                         "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"

                         "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate",

                    reply_markup=reply_markup,

                    parse_mode='Markdown'

                )

                

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                state['step'] = None

                state.pop('video_type', None)

                state.pop('video_quality', None)

                state.pop('video_duration', None)

                state.pop('video_prompt', None)

                return

            else:

                logging.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Replicate API: {credit_check_error}")

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        

        # –í—ã–∑—ã–≤–∞–µ–º Replicate API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

        import replicate

        

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        logging.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Replicate API:")

        logging.info(f"   –ú–æ–¥–µ–ª—å: bytedance/seedance-1-pro")

        logging.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {input_data}")

        logging.info(f"   –¢–∏–ø –≤–∏–¥–µ–æ: {video_type}")

        logging.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}")

        logging.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration}")

        logging.info(f"   Aspect ratio: {state.get('aspect_ratio', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        minimal_input = {"prompt": english_prompt}

        if video_type == 'image_to_video':

            minimal_input["image"] = state['selected_image_url']

        

        logging.info(f"üîç –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {minimal_input}")

        

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        logging.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")

        logging.info(f"   duration: {video_duration} (—Ç–∏–ø: {type(video_duration)})")

        logging.info(f"   resolution: {video_quality} (—Ç–∏–ø: {type(video_quality)})")

        logging.info(f"   aspect_ratio: {state.get('aspect_ratio', '–Ω–µ —É–∫–∞–∑–∞–Ω')} (—Ç–∏–ø: {type(state.get('aspect_ratio'))})")

        logging.info(f"   camera_fixed: False (—Ç–∏–ø: {type(False)})")

        logging.info(f"   fps: 24 (—Ç–∏–ø: {type(24)})")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–∏–ø–∞–º

        if not isinstance(video_duration, int):

            logging.warning(f"‚ö†Ô∏è duration –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int, –ø–æ–ª—É—á–µ–Ω: {type(video_duration)}")

        if not isinstance(video_quality, str):

            logging.warning(f"‚ö†Ô∏è resolution –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω: {type(video_quality)}")

        if state.get('aspect_ratio') and not isinstance(state.get('aspect_ratio'), str):

            logging.warning(f"‚ö†Ô∏è aspect_ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –ø–æ–ª—É—á–µ–Ω: {type(state.get('aspect_ratio'))}")

        

        try:

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Bytedance Seedance 1.0 Pro

            logging.info(f"üöÄ –í—ã–∑—ã–≤–∞–µ–º API —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

            loop = asyncio.get_event_loop()
            output = await asyncio.wait_for(
                loop.run_in_executor(THREAD_POOL, lambda: replicate.run(
                    "bytedance/seedance-1-pro",
                    input=input_data
                )),
                timeout=300.0  # 5 –º–∏–Ω—É—Ç –¥–ª—è –≤–∏–¥–µ–æ
            )

            

            # –ï—Å–ª–∏ output - —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            if hasattr(output, '__await__'):

                logging.info("–ü–æ–ª—É—á–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–∂–∏–¥–∞–µ–º...")

                output = await output

                

        except Exception as replicate_error:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Replicate API: {replicate_error}")

            

            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

            logging.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

            try:

                output = await asyncio.wait_for(
                    loop.run_in_executor(THREAD_POOL, lambda: replicate.run(
                        "bytedance/seedance-1-pro",
                        input=minimal_input
                    )),
                    timeout=300.0  # 5 –º–∏–Ω—É—Ç –¥–ª—è –≤–∏–¥–µ–æ
                )

                logging.info(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏!")

                

                # –ï—Å–ª–∏ output - —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                if hasattr(output, '__await__'):

                    logging.info("–ü–æ–ª—É—á–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–∂–∏–¥–∞–µ–º...")

                    output = await output

                    

            except Exception as minimal_error:

                logging.error(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {minimal_error}")

                raise Exception(f"–û—à–∏–±–∫–∞ API Replicate: {str(replicate_error)}")

        

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Replicate API

        # output –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º FileOutput

        logging.info(f"üé¨ Replicate API –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")

        logging.info(f"   –¢–∏–ø: {type(output)}")

        logging.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {output}")

        logging.info(f"   –î–ª–∏–Ω–∞ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫): {len(output) if isinstance(output, list) else 'N/A'}")

        

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞

        if hasattr(output, '__dict__'):

            logging.info(f"   –ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {output.__dict__}")

        if hasattr(output, 'url'):

            logging.info(f"   –ú–µ—Ç–æ–¥ .url(): {output.url}")

        if hasattr(output, 'file_path'):

            logging.info(f"   –ú–µ—Ç–æ–¥ .file_path: {output.file_path}")

        

        if output:

            # –ï—Å–ª–∏ output - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

            if isinstance(output, list) and len(output) > 0:

                video_url = output[0]

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ —Å–ø–∏—Å–∫–∞: {video_url}")

            # –ï—Å–ª–∏ output - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–ø—Ä—è–º–æ–π URL)

            elif isinstance(output, str):

                video_url = output

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL —Å—Ç—Ä–æ–∫–æ–π: {video_url}")

            # –ï—Å–ª–∏ output - —ç—Ç–æ –æ–±—ä–µ–∫—Ç FileOutput

            elif hasattr(output, 'url'):

                video_url = output.url

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ –æ–±—ä–µ–∫—Ç–∞.url: {video_url}")

            # –ï—Å–ª–∏ output - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º file_path

            elif hasattr(output, 'file_path'):

                video_url = output.file_path

                logging.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑ –æ–±—ä–µ–∫—Ç–∞.file_path: {video_url}")

            else:

                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É

                video_url = str(output)

                logging.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É: {video_url}")

        else:

            raise Exception("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π URL

        if not video_url or not isinstance(video_url, str):

            raise Exception(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {video_url}")

        

        logging.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞

        file_extension = video_url.split('.')[-1].lower() if '.' in video_url else ''

        logging.info(f"üé¨ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:")

        logging.info(f"   URL: {video_url}")

        logging.info(f"   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}")

        logging.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç 'gif' –≤ URL: {'gif' in video_url.lower()}")

        logging.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç 'mp4' –≤ URL: {'mp4' in video_url.lower()}")

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ

        video_extensions = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv', 'm4v']

        is_video_file = file_extension in video_extensions

        logging.info(f"   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {is_video_file}")

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞–∂–µ –µ—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç 'gif', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ

        if 'gif' in video_url.lower():

            is_video_file = True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º GIF –∫–∞–∫ –≤–∏–¥–µ–æ

            logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω GIF —Ñ–∞–π–ª –≤ URL! API –≤–µ—Ä–Ω—É–ª GIF –≤–º–µ—Å—Ç–æ MP4, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ!")

        elif 'mp4' in video_url.lower():

            logging.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω MP4 —Ñ–∞–π–ª –≤ URL")

        else:

            logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        try:

            logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...")

            async with aiohttp.ClientSession() as session:
                async with session.head(video_url, timeout=aiohttp.ClientTimeout(total=30)) as head_response:
                    if head_response.status != 200:
                        logging.warning(f"–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {head_response.status})")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
                    else:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                        content_type = head_response.headers.get('content-type', 'unknown')
                        content_length = head_response.headers.get('content-length')

                

                logging.info(f"üîç HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:")

                logging.info(f"   Content-Type: {content_type}")

                logging.info(f"   Content-Length: {content_length}")

                

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Å–µ—Ä–≤–µ—Ä –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞

                if 'gif' in content_type.lower():

                    logging.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ GIF —Ñ–∞–π–ª!")

                elif 'mp4' in content_type.lower() or 'video' in content_type.lower():

                    logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª")

                else:

                    logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Content-Type: {content_type}")

                

                if content_length:

                    file_size_mb = int(content_length) / (1024 * 1024)

                    logging.info(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë")

                    

                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö

                    if file_size_mb > 50:

                        logging.warning(f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram: {file_size_mb:.1f} –ú–ë")

                    elif file_size_mb > 20:

                        logging.info(f"–§–∞–π–ª –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë, –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

        except Exception as check_error:

            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª: {check_error}")

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π

        try:

            async with aiohttp.ClientSession() as session:
                async with session.get(video_url, timeout=aiohttp.ClientTimeout(total=10)) as test_response:
                    if test_response.status != 200:

                        logging.error(f"–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: {test_response.status})")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ö†Ô∏è **–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"
                                 f"–°—Ç–∞—Ç—É—Å: {test_response.status}\n"
                                 f"–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                                 f"üîó **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Å—ã–ª–∫—É:** {video_url}\n\n"
                                 f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                                 f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä\n"
                                 f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n"
                                 f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ",
                            reply_markup=InlineKeyboardMarkup([[

                                InlineKeyboardButton("üîó –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=video_url)

                            ]])
                        )
                        
                        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        except Exception as test_error:

            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {test_error}")

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        try:

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

            test_msg = await context.bot.send_message(

                chat_id=chat_id,

                text="üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞...",

                disable_notification=True

            )

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ

            await context.bot.delete_message(chat_id=chat_id, message_id=test_msg.message_id)

            logging.info("–ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

        except Exception as chat_error:

            logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —á–∞—Ç—É: {chat_error}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

            await context.bot.send_message(

                chat_id=chat_id,

                text=f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —á–∞—Ç—É**\n\n"

                     f"–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"

                     f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:** {video_url}\n\n"

                     f"üí° **–†–µ—à–µ–Ω–∏—è:**\n"

                     f"‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞\n"

                     f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä\n"

                     f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)

                ]])

            )

            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

            

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        def truncate_prompt(prompt, max_length=80):
            if len(prompt) <= max_length:
                return prompt
            return prompt[:max_length] + "..."

        if video_type == 'text_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞

            truncated_prompt = truncate_prompt(english_prompt, 80)
            prompt_caption = f"üìù {truncated_prompt}"

        elif video_type == 'image_to_video' and video_prompt:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞

            truncated_prompt = truncate_prompt(english_prompt, 80)
            prompt_caption = f"üñºÔ∏è {truncated_prompt}"

        else:

            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

            if video_type == 'image_to_video':

                prompt_caption = "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

            else:

                prompt_caption = "üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ"

        

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback –º–µ—Ç–æ–¥–∞–º–∏

        video_sent = False

        video_error = None

        doc_error = None

        local_error = None

        anim_error = None

        

        # –ú–µ—Ç–æ–¥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã

        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Telegram:")

        logging.info(f"   URL: {video_url}")

        logging.info(f"   –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")

        logging.info(f"   Content-Type: {content_type if 'content_type' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        logging.info(f"   –†–∞–∑–º–µ—Ä: {file_size_mb if 'file_size_mb' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'} –ú–ë")

        logging.info(f"   –ú–µ—Ç–æ–¥: send_document")

        

        try:

            await context.bot.send_document(

                chat_id=chat_id,

                document=video_url,

                caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                        f"{prompt_caption}\n"

                        f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"

                        f"‚ú® Bytedance Seedance 1.0 Pro",


                filename=f"video_{video_quality}_{video_duration}s.mp4",

                disable_notification=False,

                parse_mode='HTML'

            )

            video_sent = True

            logging.info("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
            
            # –°–ü–ò–°–´–í–ê–ï–ú –ö–†–ï–î–ò–¢–´ –ó–ê –í–ò–î–ï–û
            if user_id:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è pricing_config
                try:
                    from pricing_config import get_generation_cost
                    base_cost = get_generation_cost('Bytedance (Seedream-3)', video_quality=video_quality, video_duration=f"{video_duration}s")
                except ImportError:
                    # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
                    if video_duration == 5:
                        if video_quality == "480p":
                            base_cost = 37
                        elif video_quality == "720p":
                            base_cost = 73
                        elif video_quality == "1080p":
                            base_cost = 183
                    elif video_duration == 10:
                        if video_quality == "480p":
                            base_cost = 73
                        elif video_quality == "720p":
                            base_cost = 146
                        elif video_quality == "1080p":
                            base_cost = 365
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É 480p 5s
                        base_cost = 37
                
                if await analytics_db_use_credits_async(user_id, base_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {video_quality} {video_duration}—Å —á–µ—Ä–µ–∑ Bytedance Seedance 1.0 Pro"):
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {base_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≤–∏–¥–µ–æ")
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            state['step'] = None
            state.pop('video_type', None)
            state.pop('video_quality', None)
            state.pop('video_duration', None)
            state.pop('video_prompt', None)
            state.pop('english_prompt', None)
            state.pop('enhanced_prompt', None)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

            await context.bot.send_message(

                chat_id=chat_id,

                text=f"üé¨ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"

                     f"üîó **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**\n\n"

                     f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å!\n\n"

                     f"üí° **–ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:**\n"

                     f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' –Ω–∏–∂–µ\n"

                     f"‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"

                     f"‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ\n\n"

                     f"‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** ~30 –º–∏–Ω—É—Ç",

                reply_markup=InlineKeyboardMarkup([[

                    InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=video_url)

                ]])

            )

            

        except Exception as e:

            video_error = e

            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ: {video_error}")

            logging.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(video_error).__name__}")

            logging.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(video_error)}")

            

            # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞

            try:

                await context.bot.send_document(

                    chat_id=chat_id,

                    document=video_url,

                    caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                            f"{prompt_caption}\n"

                            f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å | üìÅ MP4\n"

                            f"‚ú® Bytedance Seedance 1.0 Pro"

                )

                video_sent = True

                logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (MP4)")
                
                # –°–ü–ò–°–´–í–ê–ï–ú –ö–†–ï–î–ò–¢–´ –ó–ê –í–ò–î–ï–û
                if user_id:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è pricing_config
                    try:
                        from pricing_config import get_generation_cost
                        base_cost = get_generation_cost('Bytedance (Seedream-3)', video_quality=video_quality, video_duration=f"{video_duration}s")
                    except ImportError:
                        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
                        if video_duration == 5:
                            if video_quality == "480p":
                                base_cost = 37
                            elif video_quality == "720p":
                                base_cost = 73
                            elif video_quality == "1080p":
                                base_cost = 183
                        elif video_duration == 10:
                            if video_quality == "480p":
                                base_cost = 73
                            elif video_quality == "720p":
                                base_cost = 146
                            elif video_quality == "1080p":
                                base_cost = 365
                        else:
                            # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É 480p 5s
                            base_cost = 37
                    
                    if await analytics_db_use_credits_async(user_id, base_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {video_quality} {video_duration}—Å —á–µ—Ä–µ–∑ Bytedance Seedance 1.0 Pro"):
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {base_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≤–∏–¥–µ–æ")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                state['step'] = None
                state.pop('video_type', None)
                state.pop('video_quality', None)
                state.pop('video_duration', None)
                state.pop('video_prompt', None)
                state.pop('english_prompt', None)
                state.pop('enhanced_prompt', None)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

                await context.bot.send_message(

                    chat_id=chat_id,

                    text=f"üé¨ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"

                         f"üîó **–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**\n\n"

                         f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å!\n\n"

                         f"üí° **–ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è:**\n"

                         f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' –Ω–∏–∂–µ\n"

                         f"‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"

                         f"‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ\n\n"

                         f"‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** ~30 –º–∏–Ω—É—Ç",

                    reply_markup=InlineKeyboardMarkup([[

                        InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=video_url)

                    ]])

                )

                

            except Exception as e:

                doc_error = e

                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {doc_error}")

            

                # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

                try:

                    logging.info("–ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å...")

                    

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                    import tempfile

                    import requests

                    

                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

                    async with aiohttp.ClientSession() as session:
                        async with session.head(video_url, timeout=aiohttp.ClientTimeout(total=30)) as head_response:
                            if head_response.status == 200:
                                content_length = head_response.headers.get('content-length')

                                if content_length:
                                    file_size_mb = int(content_length) / (1024 * 1024)
                                    logging.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã Telegram
                                    if file_size_mb > 50:
                                        logging.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_size_mb:.1f} –ú–ë")
                                        # –í–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                                        await context.bot.send_message(
                                            chat_id=chat_id,
                                            text=(
                                                f"‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!**\n\n"
                                                f"–†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                                                f"–õ–∏–º–∏—Ç Telegram: 50 –ú–ë\n\n"
                                                f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                                                f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 480p –≤–º–µ—Å—Ç–æ 1080p\n"
                                                f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5-10 —Å–µ–∫—É–Ω–¥\n"
                                                f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
                                                f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:** {video_url}"
                                            ),
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)]
                                            ])
                                        )
                                        video_sent = True
                                        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ")
                                        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                    elif file_size_mb > 20:
                                        logging.info(f"–§–∞–π–ª –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë), –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π")

                    

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    async with aiohttp.ClientSession() as session:
                        async with session.get(video_url, timeout=aiohttp.ClientTimeout(total=60)) as response:
                            if response.status == 200:

                                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                                loop = asyncio.get_event_loop()
                                temp_file_path = await loop.run_in_executor(
                                    THREAD_POOL,
                                    lambda: tempfile.NamedTemporaryFile(delete=False, suffix='.mp4').name
                                )
                                
                                total_size = 0
                                
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º
                                async for chunk in response.content.iter_chunked(8192):

                                        if chunk:
                                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º chunk –≤ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                                            await loop.run_in_executor(
                                                THREAD_POOL,
                                                lambda: open(temp_file_path, 'ab').write(chunk)
                                            )
                                            total_size += len(chunk)
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                                            if total_size > 50 * 1024 * 1024:  # 50 –ú–ë
                                                raise Exception("–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (50 –ú–ë)")
                                    
                                logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {temp_file_path}, —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} –ú–ë")

                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä
                                if not os.path.exists(temp_file_path) or os.path.getsize(temp_file_path) == 0:
                                    raise Exception("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                                try:
                                    # –ß–∏—Ç–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                                    loop = asyncio.get_event_loop()
                                    video_data = await loop.run_in_executor(
                                        THREAD_POOL,
                                        lambda: open(temp_file_path, 'rb').read()
                                    )
                                    
                                    await context.bot.send_document(
                                            chat_id=chat_id,

                                            document=video_data,
                                            caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                            f"{prompt_caption}\n"
                                            f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"
                                            f"‚ú® Bytedance Seedance 1.0 Pro",

                                            has_spoiler=False,

                                            filename=f"video_{video_quality}_{video_duration}s.mp4",

                                            disable_notification=False,

                                            parse_mode='HTML'

                                        )
                                    
                                    video_sent = True

                                    logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                                    
                                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                    state['step'] = None
                                    state.pop('video_type', None)
                                    state.pop('video_quality', None)
                                    state.pop('video_duration', None)
                                    state.pop('video_prompt', None)
                                    state.pop('english_prompt', None)
                                    state.pop('enhanced_prompt', None)

                                except Exception as send_error:

                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {send_error}")
                                    
                                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                    try:
                                        # –ß–∏—Ç–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                                        loop = asyncio.get_event_loop()
                                        video_data = await loop.run_in_executor(
                                            THREAD_POOL,
                                            lambda: open(temp_file_path, 'rb').read()
                                        )
                                        
                                        await context.bot.send_document(
                                                chat_id=chat_id,

                                                document=video_data,
                                                caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                                f"{prompt_caption}\n"
                                                f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å | üìÅ MP4\n"
                                                f"‚ú® Bytedance Seedance 1.0 Pro",

                                                filename=f"video_{video_quality}_{video_duration}s.mp4"
                                            )

                                        video_sent = True
                                        logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                                            
                                        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                        state['step'] = None
                                        state.pop('video_type', None)
                                        state.pop('video_quality', None)
                                        state.pop('video_duration', None)
                                        state.pop('video_prompt', None)
                                        state.pop('english_prompt', None)
                                        state.pop('enhanced_prompt', None)
                                            
                                    except Exception as doc_error:
                                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {doc_error}")
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                                        await context.bot.send_message(
                                            chat_id=chat_id,
                                            text=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"
                                                 f"{prompt_caption}\n"
                                                 f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"
                                                 f"‚ú® Bytedance Seedance 1.0 Pro\n\n"
                                                 f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:** {video_url}",
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)]
                                            ])
                                        )
                                        video_sent = True
                                
                                # –°–ü–ò–°–´–í–ê–ï–ú –ö–†–ï–î–ò–¢–´ –ó–ê –í–ò–î–ï–û
                                if user_id:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è pricing_config
                                    try:
                                        from pricing_config import get_generation_cost
                                        base_cost = get_generation_cost('Bytedance (Seedream-3)', video_quality=video_quality, video_duration=f"{video_duration}s")
                                    except ImportError:
                                        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
                                        if video_duration == 5:
                                            if video_quality == "480p":
                                                base_cost = 37
                                            elif video_quality == "720p":
                                                base_cost = 73
                                            elif video_quality == "1080p":
                                                base_cost = 183
                                        elif video_duration == 10:
                                            if video_quality == "480p":
                                                base_cost = 73
                                            elif video_quality == "720p":
                                                base_cost = 146
                                            elif video_quality == "1080p":
                                                base_cost = 365
                                        else:
                                            # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É 480p 5s
                                            base_cost = 37
                                    
                                    if await analytics_db_use_credits_async(user_id, base_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {video_quality} {video_duration}—Å —á–µ—Ä–µ–∑ Bytedance Seedance 1.0 Pro"):
                                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {base_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≤–∏–¥–µ–æ")
                                    else:
                                        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


                        

                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                        try:

                            os.unlink(temp_file_path)

                        except Exception as cleanup_error:

                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

                except Exception as e:

                    local_error = e

                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {local_error}")

                    

                    # –ú–µ—Ç–æ–¥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–≤—Å–µ–≥–¥–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ GIF)

                    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ GIF
                    if True:  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ GIF

                        try:

                            await context.bot.send_document(

                                chat_id=chat_id,

                                document=video_url,

                                caption=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                        f"{prompt_caption}\n"

                                        f"‚ö° {video_quality} | ‚è±Ô∏è {video_duration}—Å\n"

                                        f"‚ú® Bytedance Seedance 1.0 Pro",
                                filename=f"video_{video_quality}_{video_duration}s.mp4",
                                disable_notification=False,
                                parse_mode='HTML'
                            )

                            video_sent = True

                            logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
                            
                            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                            state['step'] = None
                            state.pop('video_type', None)
                            state.pop('video_quality', None)
                            state.pop('video_duration', None)
                            state.pop('video_prompt', None)
                            state.pop('english_prompt', None)
                            state.pop('enhanced_prompt', None)
                            
                            # –°–ü–ò–°–´–í–ê–ï–ú –ö–†–ï–î–ò–¢–´ –ó–ê –í–ò–î–ï–û
                            if user_id:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è pricing_config
                                try:
                                    from pricing_config import get_generation_cost
                                    base_cost = get_generation_cost('Bytedance (Seedream-3)', video_quality=video_quality, video_duration=f"{video_duration}s")
                                except ImportError:
                                    # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω—ã
                                    if video_duration == 5:
                                        if video_quality == "480p":
                                            base_cost = 37
                                        elif video_quality == "720p":
                                            base_cost = 73
                                        elif video_quality == "1080p":
                                            base_cost = 183
                                    elif video_duration == 10:
                                        if video_quality == "480p":
                                            base_cost = 73
                                        elif video_quality == "720p":
                                            base_cost = 146
                                        elif video_quality == "1080p":
                                            base_cost = 365
                                    else:
                                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É 480p 5s
                                        base_cost = 37
                                
                                if await analytics_db_use_credits_async(user_id, base_cost, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {video_quality} {video_duration}—Å —á–µ—Ä–µ–∑ Bytedance Seedance 1.0 Pro"):
                                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {base_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≤–∏–¥–µ–æ")
                                else:
                                    logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                            # –î–∞–∂–µ –µ—Å–ª–∏ GIF –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MP4

                            await context.bot.send_message(

                                chat_id=chat_id,

                                text=f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

                                     f"‚úÖ GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n"

                                     f"üîó **–°–∫–∞—á–∞–π—Ç–µ MP4 –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**\n\n"

                                     f"‚ö†Ô∏è **–í–ê–ñ–ù–û:** –°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å!\n\n"

                                     f"üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"

                                     f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å MP4' –Ω–∏–∂–µ\n"

                                     f"‚Ä¢ –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"

                                     f"‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ MP4 —Ñ–∞–π–ª\n\n"

                                     f"‚è∞ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** ~30 –º–∏–Ω—É—Ç",

                                reply_markup=InlineKeyboardMarkup([[

                                    InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å MP4", url=video_url)

                                ]])

                            )

                        except Exception as e:

                            anim_error = e

                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: {anim_error}")

        

        # –ú–µ—Ç–æ–¥ 5: –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

        if not video_sent:

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

            logging.error("–í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∏—Å—å:")

            if video_error:

                logging.error(f"–û—à–∏–±–∫–∞ send_document: {video_error}")

            if doc_error:

                logging.error(f"–û—à–∏–±–∫–∞ send_document: {doc_error}")

            if local_error:

                logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {local_error}")

            if anim_error:

                logging.error(f"–û—à–∏–±–∫–∞ send_document: {anim_error}")

            

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

            keyboard = [

                [InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=video_url)],

                [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data="video_generation")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫

            error_reasons = []

            

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏

            all_errors = [video_error, doc_error, local_error, anim_error]

            for error in all_errors:

                if error:

                    error_str = str(error).lower()

                    if "too large" in error_str or "file size" in error_str or "large" in error_str:

                        error_reasons.append("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram")

                    if "timeout" in error_str:

                        error_reasons.append("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

                    if "network" in error_str or "connection" in error_str:

                        error_reasons.append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")

                    if "format" in error_str or "unsupported" in error_str:

                        error_reasons.append("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

                    if "bot was blocked" in error_str or "bot was stopped" in error_str:

                        error_reasons.append("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

                    if "file" in error_str and "not found" in error_str:

                        error_reasons.append("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")

                    if "bad request" in error_str:

                        error_reasons.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram")

                    if "forbidden" in error_str:

                        error_reasons.append("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

                    if "internal server error" in error_str:

                        error_reasons.append("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

            

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

            error_reasons = list(set(error_reasons))

            

            if not error_reasons:

                error_reasons.append("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")

            

            error_reason = " ‚Ä¢ ".join(error_reasons)

            

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞

            size_info = ""

            try:

                async with aiohttp.ClientSession() as session:
                    async with session.head(video_url, timeout=aiohttp.ClientTimeout(total=10)) as head_response:
                        if head_response.status == 200:
                            content_length = head_response.headers.get('content-length')

                            if content_length:
                                file_size_mb = int(content_length) / (1024 * 1024)

                                size_info = f"\nüìè **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size_mb:.1f} –ú–ë"

            except:

                pass

            

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

            diagnostic_info = f"üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n"

            diagnostic_info += f"{prompt_caption}\n"

            diagnostic_info += f"‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}\n"

            diagnostic_info += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration} —Å–µ–∫{size_info}\n\n"

            diagnostic_info += f"‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Bytedance Seedance 1.0 Pro\n\n"

            diagnostic_info += f"‚ö†Ô∏è **–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é**\n\n"

            diagnostic_info += f"üîç **–ü—Ä–∏—á–∏–Ω–∞:** {error_reason}\n\n"

            

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö

            if video_error:

                diagnostic_info += f"üìπ **–û—à–∏–±–∫–∞ send_document:** {str(video_error)[:100]}...\n"

            if doc_error:

                diagnostic_info += f"üìÑ **–û—à–∏–±–∫–∞ send_document:** {str(doc_error)[:100]}...\n"

            if local_error:

                diagnostic_info += f"üíæ **–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:** {str(local_error)[:100]}...\n"

            if anim_error:

                diagnostic_info += f"üé¨ **–û—à–∏–±–∫–∞ send_document:** {str(anim_error)[:100]}...\n"

            

            diagnostic_info += f"\nüí° **–†–µ—à–µ–Ω–∏—è:**\n"

            diagnostic_info += f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ' –Ω–∏–∂–µ\n"

            diagnostic_info += f"‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"

            diagnostic_info += f"üì± **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**\n"

            diagnostic_info += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"

            diagnostic_info += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n\n"

            diagnostic_info += f"üîÑ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:**\n"

            diagnostic_info += f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p –≤–º–µ—Å—Ç–æ 1080p)\n"

            diagnostic_info += f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ\n"

            diagnostic_info += f"‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ\n\n"

            diagnostic_info += f"üí¨ **–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è:**\n"

            diagnostic_info += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)\n"

            diagnostic_info += f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏\n\n"

            diagnostic_info += f"üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"

            diagnostic_info += f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}\n"

            diagnostic_info += f"‚Ä¢ –¢–∏–ø: {video_type}"

            

            await context.bot.send_message(

                chat_id=chat_id,

                text=diagnostic_info,

                reply_markup=reply_markup,

                parse_mode='Markdown'

            )

            logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

        keyboard = [

            [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data="video_generation")],

            [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_simple_images")],

            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        await context.bot.send_message(

            chat_id=chat_id,

            text="üéâ **–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"

                 "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",

            reply_markup=reply_markup

        )

        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        state['step'] = None

        state.pop('video_type', None)

        state.pop('video_quality', None)

        state.pop('video_duration', None)

        state.pop('video_prompt', None)

            

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")

        

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞

        error_str = str(e).lower()

        error_type = "unknown"

        error_solution = ""

        

        if "insufficient credit" in error_str or "insufficient_credit" in error_str:

            error_type = "credit"

            error_solution = """

üí≥ **–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏ Replicate**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ Replicate –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://replicate.com/account/billing

‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è



üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã Replicate

"""

        elif "api" in error_str and "token" in error_str:

            error_type = "api"

            error_solution = """

üîë **–ü—Ä–æ–±–ª–µ–º–∞ —Å API —Ç–æ–∫–µ–Ω–æ–º**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Replicate API



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞

‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å Ideogram)

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

"""

        elif "timeout" in error_str or "timed out" in error_str:

            error_type = "timeout"

            error_solution = """

‚è∞ **–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –°–µ—Ä–≤–µ—Ä Replicate –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)

‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ)

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –Ω–µ–ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã

"""

        elif "network" in error_str or "connection" in error_str:

            error_type = "network"

            error_solution = """

üåê **–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é**



‚ùå **–ü—Ä–∏—á–∏–Ω–∞:** –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Replicate



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è

"""

        else:

            error_type = "unknown"

            error_solution = f"""

‚ùå **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**



**–û–ø–∏—Å–∞–Ω–∏–µ:** {str(e)[:200]}...



üí° **–†–µ—à–µ–Ω–∏—è:**

‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ

‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É



üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**

‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

"""

        

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏

        if error_type == "credit":

            keyboard = [

                [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://replicate.com/account/billing")],

                [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

        elif error_type == "api":

            keyboard = [

                [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

        else:

            keyboard = [

                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="video_generation")],

                [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="create_content")],

                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

            ]

        

        reply_markup = InlineKeyboardMarkup(keyboard)

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏

        if error_type == "credit":

            error_title = "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"

        elif error_type == "api":

            error_title = "üîë –û—à–∏–±–∫–∞ API —Ç–æ–∫–µ–Ω–∞"

        elif error_type == "timeout":

            error_title = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"

        elif error_type == "network":

            error_title = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é"

        else:

            error_title = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"

        

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        full_error_message = f"{error_title}\n\n{error_solution}"

        

        if hasattr(update, 'callback_query') and update.callback_query:

            await update.callback_query.edit_message_text(

                full_error_message,

                reply_markup=reply_markup,

                parse_mode='Markdown'

            )

        else:

            await context.bot.send_message(

                chat_id=chat_id,

                text=full_error_message,

                reply_markup=reply_markup,

                parse_mode='Markdown'

            )

        

        # –ò—Ç–æ–≥–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        logging.info(f"üé¨ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:")

        logging.info(f"   –¢–∏–ø –≤–∏–¥–µ–æ: {video_type}")

        logging.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {video_quality}")

        logging.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration}")

        logging.info(f"   Aspect ratio: {state.get('aspect_ratio', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        logging.info(f"   URL —Ñ–∞–π–ª–∞: {video_url if 'video_url' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        logging.info(f"   –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension if 'file_extension' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        logging.info(f"   –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {video_sent if 'video_sent' in locals() else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        if 'video_sent' in locals() and not video_sent:

            logging.error(f"   –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:")

            if 'video_error' in locals() and video_error:

                logging.error(f"     send_document: {video_error}")

            if 'doc_error' in locals() and doc_error:

                logging.error(f"     send_document: {doc_error}")

            if 'local_error' in locals() and local_error:

                logging.error(f"     –ª–æ–∫–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {local_error}")

            if 'anim_error' in locals() and anim_error:

                logging.error(f"     send_document: {anim_error}")

        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        state['step'] = None

        state.pop('video_type', None)

        state.pop('video_quality', None)

        state.pop('video_duration', None)

        state.pop('video_prompt', None)

        state.pop('english_prompt', None)

        state.pop('enhanced_prompt', None)



# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´



async def show_subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–æ–≤"""

    user_id = update.effective_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    limits = await analytics_db_get_user_limits_async(user_id)

    credits = await analytics_db_get_user_credits_async(user_id)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞

    free_generations_left = await analytics_db_get_free_generations_left_async(user_id)

    

    status_text = ""

    if free_generations_left > 0:

        status_text = f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations_left} –æ—Å—Ç–∞–ª–æ—Å—å\n"

    else:

        status_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n"

    

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö

    if credits['balance'] > 0:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credits['balance']} –¥–æ—Å—Ç—É–ø–Ω–æ\n\n"

    else:

        status_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** –Ω–µ –∫—É–ø–ª–µ–Ω—ã\n\n"

    

    keyboard = [

        [InlineKeyboardButton("ü™ô –ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data="credit_packages")],

        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]

    ]

    

    await update.callback_query.edit_message_text(

        f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n{status_text}"

        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



# –§—É–Ω–∫—Ü–∏—è show_subscription_plans —É–¥–∞–ª–µ–Ω–∞ - –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è



async def show_credit_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤"""

    try:

        from pricing_config import CREDIT_PACKAGES, format_price

    except ImportError:

        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

        CREDIT_PACKAGES = {

            'small': {'name': 'ü™ô –ú–∞–ª—ã–π –ø–∞–∫–µ—Ç', 'credits': 2000, 'price': 14.0, 'currency': 'UAH', 'description': '2000 –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'},

            'medium': {'name': 'ü™ô –°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç', 'credits': 5000, 'price': 30.0, 'currency': 'UAH', 'description': '5000 –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π 14%'},

            'large': {'name': 'ü™ô –ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç', 'credits': 10000, 'price': 50.0, 'currency': 'UAH', 'description': '10000 –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π 29%'}

        }

        

        def format_price(amount, currency):

            return f"‚Ç¥{amount:.2f}" if currency == 'UAH' else f"{amount:.2f}{currency}"

    

    text = "ü™ô **–ü–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ (pay-per-use):**\n\n"

    text += "üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"

    text += "‚Ä¢ –ü–æ–∫—É–ø–∞–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑\n"

    text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"

    text += "‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n\n"

    

    for package_type, package in CREDIT_PACKAGES.items():

        text += f"**{package['name']}**\n"

        text += f"‚Ä¢ {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {format_price(package['price'], package['currency'])}\n"

        if package.get('discount_percent', 0) > 0:

            text += f"‚Ä¢ –°–∫–∏–¥–∫–∞ {package['discount_percent']}%\n"

        text += f"‚Ä¢ {package['description']}\n\n"

    

    text += "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:**\n\n"

    text += "üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞ 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):**\n"

    text += "‚Ä¢ Ideogram, Bytedance (Seedream-3), Bytedance (Seedream-4), Luma: 10 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"


    text += "‚Ä¢ Google Imagen 4 Ultra: 16 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ Recraft AI: 20 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

    text += "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):**\n"

    text += "‚Ä¢ FLUX.1 Kontext Pro: 12 –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

    text += "üé¨ **–í–∏–¥–µ–æ (–∑–∞ 1 –≤–∏–¥–µ–æ):**\n"

    text += "‚Ä¢ 480p 5 —Å–µ–∫—É–Ω–¥: 37 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ 720p 5 —Å–µ–∫—É–Ω–¥: 73 –∫—Ä–µ–¥–∏—Ç\n"

    text += "‚Ä¢ 1080p 5 —Å–µ–∫—É–Ω–¥: 183 –∫—Ä–µ–¥–∏—Ç–∞\n"

    text += "‚Ä¢ 480p 10 —Å–µ–∫—É–Ω–¥: 73 –∫—Ä–µ–¥–∏—Ç\n"

    text += "‚Ä¢ 720p 10 —Å–µ–∫—É–Ω–¥: 146 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"

    text += "‚Ä¢ 1080p 10 —Å–µ–∫—É–Ω–¥: 365 –∫—Ä–µ–¥–∏—Ç–∞\n\n"

    text += "üîÑ **–ö—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞!**"

    

    keyboard = []

    for package_type, package in CREDIT_PACKAGES.items():

        keyboard.append([InlineKeyboardButton(

            f"{package['name']} - {format_price(package['price'], package['currency'])}", 

            callback_data=f"buy_credits:{package_type}"

        )])

    

    keyboard.extend([

        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscription_menu")]

    ])

    

    await update.callback_query.edit_message_text(

        text,

        reply_markup=InlineKeyboardMarkup(keyboard)

    )



# –§—É–Ω–∫—Ü–∏—è handle_subscription_purchase —É–¥–∞–ª–µ–Ω–∞ - –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è



async def handle_credit_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∫—Ä–µ–¥–∏—Ç–æ–≤"""

    try:

        from pricing_config import get_credit_package_by_type

    except ImportError:

        await update.callback_query.answer("‚ùå –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return

    

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –∏–∑ callback_data

    package_type = update.callback_query.data.split(':')[1]

    package = get_credit_package_by_type(package_type)

    

    if not package:

        await update.callback_query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return

    

    user_id = update.effective_user.id

    

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Betatransfer

    try:

        from betatransfer_api import betatransfer_api

        

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–∞–∫–µ—Ç–∞: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {package['price']} —Å–æ–º")

        loop = asyncio.get_event_loop()
        payment_result = await loop.run_in_executor(
            THREAD_POOL,
            lambda: betatransfer_api.create_payment(
                amount=package['price'],
                currency=package['currency'],
                description=f"–ü–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤: {package['name']} ({package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤)",
                payer_id=str(user_id)
            )
        )

        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {'—É—Å–ø–µ—à–Ω–æ' if 'error' not in payment_result else '–æ—à–∏–±–∫–∞'}")

        

        if 'error' in payment_result:

            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result['error']}")

            return

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ payment_id –≤ –æ—Ç–≤–µ—Ç–µ

        if 'id' not in payment_result:

            logging.error(f"–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç id: {payment_result}")

            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω ID –ø–ª–∞—Ç–µ–∂–∞")

            return

        

        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã

        payment_url = payment_result.get('urlPayment', payment_result.get('url', ''))

        

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤
        order_id = payment_result.get('order_id', f"order{int(time.time())}")
        try:
            payment_record = await asyncio.wait_for(
                analytics_db_create_payment_with_credits_async(
                    user_id=user_id,
                    amount=package['price'],
                    currency=package['currency'],
                    payment_id=payment_result['id'],
                    order_id=order_id,
                    credit_amount=package['credits']  # –í–∞–∂–Ω–æ! –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                ),
                timeout=10.0
            )
        except asyncio.TimeoutError:
            logging.error(f"Timeout creating payment record for user {user_id}")
            await update.callback_query.answer("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        if not payment_record:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ

        text = f"ü™ô **–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤**\n\n"

        text += f"üì¶ **–ü–∞–∫–µ—Ç:** {package['name']}\n"

        text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç–æ–≤:** {package['credits']}\n"

        text += f"üí∞ **–°—É–º–º–∞:** {format_price(package['price'], package.get('currency', 'TJS'))}\n"

        text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {package['description']}\n\n"

        text += "üîó **–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:**\n"

        text += f"{payment_url}\n\n"

        text += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'"

        

        keyboard = [

            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],

            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment:{payment_result['id']}")],

            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="credit_packages")]

        ]

        

        await update.callback_query.edit_message_text(

            text,

            reply_markup=InlineKeyboardMarkup(keyboard)

        )

        

    except Exception as e:

        import traceback

        error_traceback = traceback.format_exc()

        logging.error(f"–ü–æ–ª–Ω—ã–π traceback –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_traceback}")

        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

        logging.error(f"Traceback: {error_traceback}")

        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")



async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞, callback_data: {update.callback_query.data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data

    payment_id = update.callback_query.data.split(':')[1]

    

    try:

        from betatransfer_api import betatransfer_api
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.get_event_loop()
        payment_status = await loop.run_in_executor(
            THREAD_POOL,
            lambda: betatransfer_api.get_payment_status(payment_id)
        )

        

        if 'error' in payment_status:

            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {payment_status['error']}")

            return

        

        status = payment_status.get('status', 'unknown')

        

        if status == 'completed' or status == 'success':

            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã

            logging.info(f"–ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
            await activate_payment(update, context, payment_status)

        elif status == 'pending':

            await update.callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        elif status == 'failed':
            await update.callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª")

        elif status == 'not_paid_timeout':
            await update.callback_query.answer("‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–æ –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @aiimagebotmanager.")
        
        elif status == 'not_paid':
            await update.callback_query.answer("‚è≥ –ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @aiimagebotmanager –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —á–µ–∫.")

        elif status == 'cancelled' or status == 'canceled' or status == 'cancel':
            await update.callback_query.answer("üö´ –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")

        else:
            await update.callback_query.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")

            

    except Exception as e:

        import traceback
        error_traceback = traceback.format_exc()
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_payment_status: {error_traceback}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logging.error(f"Traceback: {error_traceback}")

        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")



async def activate_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, payment_data: dict):

    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã"""

    user_id = update.effective_user.id

    payment_id = payment_data.get('id')

    amount = payment_data.get('amount', 0)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if isinstance(amount, str):
        try:
            amount = float(amount)
        except ValueError:
            amount = 0.0
    
    logging.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞: user_id={user_id}, payment_id={payment_id}, amount={amount}")

    

    try:

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ —Å—É–º–º–µ

        try:

            from pricing_config import CREDIT_PACKAGES

        except ImportError:

            CREDIT_PACKAGES = {

                'small': {'credits': 2000, 'price': 1129.0},

                'medium': {'credits': 5000, 'price': 2420.0},

                'large': {'credits': 10000, 'price': 4030.0}

            }

        

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç –ø–æ —Ü–µ–Ω–µ
        logging.info(f"–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å—É–º–º—ã: {amount}")

        for package in CREDIT_PACKAGES.values():
            logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {package['price']} —Å–æ–º, —Ä–∞–∑–Ω–∏—Ü–∞: {abs(package['price'] - amount)}")
            if abs(package['price'] - amount) < 1.0:  # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1 —Å–æ–º–ª—å

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
                existing_transaction = await analytics_db_get_credit_transaction_by_payment_id_async(payment_id)
                
                if existing_transaction:
                    # –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã
                    await update.callback_query.answer("‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã!")
                    return
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                success = await analytics_db_add_credits_async(
                    user_id=user_id,
                    amount=package['credits'],
                    payment_id=payment_id,
                    description=f"–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                )
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–ª–∞—Ç–µ–∂—É
                await analytics_db_create_credit_transaction_with_payment_async(user_id, package['credits'], f"–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞: {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤", payment_id)

                

                if success:

                    text = f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"

                    text += f"ü™ô **–ü–æ–ª—É—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:** {package['credits']}\n"

                    text += f"üí∞ **–°—É–º–º–∞:** {format_price(amount, package.get('currency', 'TJS'))}\n"

                    text += f"üì¶ **–ü–∞–∫–µ—Ç:** {package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"

                    text += "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!"

                    

                    keyboard = [

                        [InlineKeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="create_content")],

                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]

                    ]

                    

                    await update.callback_query.edit_message_text(

                        text,

                        reply_markup=InlineKeyboardMarkup(keyboard)

                    )

                    return

        

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç

        await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤")

        

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")

        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤")



def main():

    import os

    from dotenv import load_dotenv

    

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    load_dotenv()

    

    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

    if not TOKEN:

        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_env.py –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")

        return

    

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è Replicate –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

    if not os.getenv('REPLICATE_API_TOKEN'):

        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REPLICATE_API_TOKEN")

        print("üí° –î–ª—è Railway –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞")

        return

    

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    from telegram.request import HTTPXRequest
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    request = HTTPXRequest(
        connection_pool_size=8,
        connect_timeout=30.0,
        read_timeout=30.0,
        write_timeout=30.0,
        pool_timeout=30.0
    )
    
    app = ApplicationBuilder().token(TOKEN).request(request).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import traceback
        error_traceback = traceback.format_exc()
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error_traceback}")
        logging.error(f"Exception while handling an update: {context.error}")
        logging.error(f"Traceback: {error_traceback}")
    
    app.add_error_handler(error_handler)

    

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    app.add_handler(CommandHandler('start', start))

    app.add_handler(CommandHandler('help', help_command))

    app.add_handler(CommandHandler('stats', stats_command))
    
    app.add_handler(CommandHandler('my_balance', my_balance_command))

    app.add_handler(CommandHandler('my_id', my_id_command))  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

    app.add_handler(CommandHandler('admin_stats', admin_stats_command))
    
    app.add_handler(CommandHandler('credits_stats', credits_stats_command))  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º

    app.add_handler(CommandHandler('model_tips', model_tips_command))

    app.add_handler(CommandHandler('check_replicate', check_replicate))

    app.add_handler(CommandHandler('test_ideogram', test_ideogram))

    app.add_handler(CommandHandler('test_seedream4', test_seedream4))

    app.add_handler(CommandHandler('test_image_send', test_image_send))

    app.add_handler(CommandHandler('edit_image', edit_image_command))
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞–º–∏
    app.add_handler(CommandHandler('add_credits', add_credits_command_async))
    app.add_handler(CommandHandler('check_credits', check_credits_command_async))
    app.add_handler(CommandHandler('set_credits', set_credits_command_async))
    app.add_handler(CommandHandler('pending_payments', pending_payments_command_async))
    app.add_handler(CommandHandler('cleanup_payments', cleanup_payments_command_async))
    app.add_handler(CommandHandler('cleanup_confirm', cleanup_confirm_command_async))

    app.add_handler(CallbackQueryHandler(button_handler))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.add_handler(MessageHandler(filters.PHOTO, text_handler))

    


    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –Ω–∞ Railway

    port = int(os.environ.get('PORT', 0))

    

    if port:

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ Railway —Å webhook


        

        async def start_webhook():
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await init_http_session()
            print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            await app.initialize()

            await app.start()

            

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook

            webhook_url = f"https://web-production-3dd82.up.railway.app/{TOKEN}"

            print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")

            

            try:

                await app.bot.set_webhook(url=webhook_url)

                print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            except Exception as e:

                logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

                return

            

            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook

            try:

                await app.updater.start_webhook(

                    listen="0.0.0.0",

                    port=port,

                    url_path=TOKEN,

                    webhook_url=webhook_url

                )

                print("‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            except Exception as e:

                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")

                return

            print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway –Ω–∞ –ø–æ—Ä—Ç—É {port}")

            print(f"üåê Webhook URL: {webhook_url}")

            print(f"üîë Token: {TOKEN[:10]}...")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook

            try:

                webhook_info = await app.bot.get_webhook_info()

                print(f"üìä Webhook —Å—Ç–∞—Ç—É—Å: {webhook_info}")

            except Exception as e:

                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook —Å—Ç–∞—Ç—É—Å–∞: {e}")

            

            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def run_flask():
                flask_app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
            
            flask_thread = threading.Thread(target=run_flask, daemon=True)
            flask_thread.start()
            print("üåê Flask callback —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
            payment_polling_task = asyncio.create_task(start_payment_polling())
            print("üîÑ [SYSTEM] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥)")
            print("üìä [SYSTEM] –í Railway deploy logs –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏")

            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º

            try:

                await asyncio.Event().wait()

            except KeyboardInterrupt:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await close_http_session()
                print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                pass

        

        asyncio.run(start_webhook())

    else:

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å polling

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å polling")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async def init_http():
            await init_http_session()
            print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        asyncio.run(init_http())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è callback –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        def run_flask():
            flask_app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
        
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        print("üåê Flask callback —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_payment_polling():
            asyncio.run(start_payment_polling())
        
        polling_thread = threading.Thread(target=run_payment_polling, daemon=True)
        polling_thread.start()
        print("üîÑ [SYSTEM] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥)")
        print("üìä [SYSTEM] –í –∫–æ–Ω—Å–æ–ª–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏")

        try:
            app.run_polling()
        except KeyboardInterrupt:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            asyncio.run(close_http_session())
            print("‚úÖ HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")



# ==================== –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò ====================

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = update.effective_user.id
    user_info = await analytics_db_get_user_info_by_id_async(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username_display = "–ë–µ–∑ username"
    name_display = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user_info:
        username_value = user_info.get('username')
        first_name_value = user_info.get('first_name')
        last_name_value = user_info.get('last_name')

        if username_value:
            username_display = f"@{username_value}"

        full_name = f"{first_name_value or ''} {last_name_value or ''}".strip()
        if full_name:
            name_display = full_name
    
    support_text = f"""
üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

üë§ **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üÜî ID: `{user_id}`
üìù Username: {username_display}
üìù –ò–º—è: {name_display}

üí¨ **–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:**

1Ô∏è‚É£ **–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram:**
   üë§ @aiimagebotmanager (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏)

2Ô∏è‚É£ **–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:**
   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π
   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
   ‚Ä¢ –í–æ–ø—Ä–æ—Å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
   ‚Ä¢ –î—Ä—É–≥–æ–µ

3Ô∏è‚É£ **–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã** (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

4Ô∏è‚É£ **–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID:** `{user_id}`

‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å!
    """
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.callback_query.edit_message_text(
        support_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# ==================== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–†–ï–î–ò–¢–ê–ú–ò ====================

async def add_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/add_credits user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `/add_credits 123456789 100`"
        )
        return
    
    try:
        user_id = int(context.args[0])
        credits_to_add = int(context.args[1])
        if credits_to_add <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_credits user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await analytics_db_get_user_info_by_id_async(user_id)
    if not user_info:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    credits_data = analytics_db.get_user_credits(user_id)
    current_credits = credits_data.get('balance', 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    await analytics_db_add_credits_async(user_id, credits_to_add, description=f"–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª {credits_to_add} –∫—Ä–µ–¥–∏—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    new_credits_data = analytics_db.get_user_credits(user_id)
    new_credits = new_credits_data.get('balance', 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username_display = f"@{user_info['username']}" if user_info['username'] else "–ë–µ–∑ username"
    name_display = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    logging.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª {credits_to_add} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username_display})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await update.message.reply_text(
        f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {name_display}\n"
        f"üÜî **ID:** {user_id}\n"
        f"üìù **Username:** {username_display}\n"
        f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {credits_to_add} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        f"üí≥ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ **–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {credits_to_add} –∫—Ä–µ–¥–∏—Ç–æ–≤!**\n\n"
                 f"üí≥ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {new_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                 f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üöÄ"
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def my_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            credits_data = await asyncio.wait_for(
                analytics_db_get_user_credits_async(user_id),
                timeout=10.0
            )
            current_credits = credits_data.get('balance', 0)
        except asyncio.TimeoutError:
            logging.error(f"Timeout getting user credits for {user_id}")
            await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            free_generations = await asyncio.wait_for(
                analytics_db_get_free_generations_left_async(user_id),
                timeout=10.0
            )
        except asyncio.TimeoutError:
            logging.error(f"Timeout getting free generations for {user_id}")
            await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        balance_text = f"üí≥ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n\n"
        balance_text += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {current_credits}\n"
        balance_text += f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations}\n\n"
        
        if current_credits > 0:
            balance_text += "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"
        elif free_generations > 0:
            balance_text += "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!"
        else:
            balance_text += "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã.\n"
            balance_text += "üí° –ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("ü™ô –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit_packages")]
        ]
        
        await update.message.reply_text(
            balance_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) < 1:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/check_credits user_id`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `/check_credits 123456789`"
        )
        return
    
    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/check_credits user_id`")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await analytics_db_get_user_info_by_id_async(user_id)
    if not user_info:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
    credits_data = analytics_db.get_user_credits(user_id)
    current_credits = credits_data.get('balance', 0)
    free_generations = analytics_db.get_free_generations_left(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username_display = f"@{user_info['username']}" if user_info['username'] else "–ë–µ–∑ username"
    name_display = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    await update.message.reply_text(
        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
        f"üìù **–ò–º—è:** {name_display}\n"
        f"üÜî **ID:** {user_id}\n"
        f"üìù **Username:** {username_display}\n"
        f"üí≥ **–ö—Ä–µ–¥–∏—Ç—ã:** {current_credits}\n"
        f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {free_generations}"
    )


async def set_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/set_credits user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `/set_credits 123456789 500`"
        )
        return
    
    try:
        user_id = int(context.args[0])
        credits_to_set = int(context.args[1])
        if credits_to_set < 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_credits user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await analytics_db_get_user_info_by_id_async(user_id)
    if not user_info:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å
    credits_data = analytics_db.get_user_credits(user_id)
    old_credits = credits_data.get('balance', 0)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º add_credits)
    difference = credits_to_set - old_credits
    if difference != 0:
        await analytics_db_add_credits_async(user_id, difference, description=f"–ê–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–∏–ª {credits_to_set} –∫—Ä–µ–¥–∏—Ç–æ–≤ (–±—ã–ª–æ: {old_credits})")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username_display = f"@{user_info['username']}" if user_info['username'] else "–ë–µ–∑ username"
    name_display = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    logging.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª {credits_to_set} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username_display}) (–±—ã–ª–æ: {old_credits})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await update.message.reply_text(
        f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {name_display}\n"
        f"üÜî **ID:** {user_id}\n"
        f"üìù **Username:** {username_display}\n"
        f"üîÑ **–ë—ã–ª–æ:** {old_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        f"üí≥ **–°—Ç–∞–ª–æ:** {credits_to_set} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    )


async def pending_payments_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ pending –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏
        pending_payments = await analytics_db_get_pending_payments_async()
        
        if not pending_payments:
            await update.message.reply_text("‚úÖ **Pending –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç!**\n\n–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìã **Pending –ø–ª–∞—Ç–µ–∂–∏ ({len(pending_payments)}):**\n\n"
        
        for i, payment in enumerate(pending_payments, 1):
            user_id = payment.get('user_id', 'N/A')
            amount = payment.get('amount', 0)
            currency = payment.get('currency', 'UAH')
            credit_amount = payment.get('credit_amount', 0)
            created_at = payment.get('created_at', 'N/A')
            betatransfer_id = payment.get('betatransfer_id', 'N/A')
            order_id = payment.get('order_id', 'N/A')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await analytics_db_get_user_info_by_id_async(user_id)
            if user_info:
                username_display = f"@{user_info['username']}" if user_info['username'] else "–ë–µ–∑ username"
                name_display = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            else:
                username_display = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                name_display = "N/A"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if created_at and created_at != 'N/A':
                try:
                    from datetime import datetime
                    if isinstance(created_at, str):
                        created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
                except:
                    formatted_date = str(created_at)
            else:
                formatted_date = "N/A"
            
            message += f"**{i}. –ü–ª–∞—Ç–µ–∂ #{order_id}**\n"
            message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {name_display}\n"
            message += f"üÜî **ID:** {user_id}\n"
            message += f"üìù **Username:** {username_display}\n"
            message += f"üí∞ **–°—É–º–º–∞:** {amount} {currency}\n"
            message += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credit_amount}\n"
            message += f"üìÖ **–°–æ–∑–¥–∞–Ω:** {formatted_date}\n"
            message += f"üîó **Betatransfer ID:** {betatransfer_id}\n\n"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(message) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            await update.message.reply_text(message[:4000])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            remaining = message[4000:]
            while remaining:
                chunk = remaining[:4000]
                await update.message.reply_text(chunk)
                remaining = remaining[4000:]
        else:
            await update.message.reply_text(message)
            
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        logging.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª pending –ø–ª–∞—Ç–µ–∂–∏ ({len(pending_payments)} —à—Ç.)")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π:**\n\n{str(e)}")


async def cleanup_payments_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ä—ã—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ pending –ø–ª–∞—Ç–µ–∂–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        old_payments = await analytics_db_get_old_pending_payments_async(24)
        
        if not old_payments:
            await update.message.reply_text(
                "‚úÖ **–°—Ç–∞—Ä—ã—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!**\n\n"
                "–í—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ —Å–æ–∑–¥–∞–Ω—ã –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üßπ **–ù–∞–π–¥–µ–Ω–æ {len(old_payments)} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤):**\n\n"
        
        for i, payment in enumerate(old_payments, 1):
            user_id = payment.get('user_id', 'N/A')
            amount = payment.get('amount', 0)
            currency = payment.get('currency', 'UAH')
            credit_amount = payment.get('credit_amount', 0)
            created_at = payment.get('created_at', 'N/A')
            betatransfer_id = payment.get('betatransfer_id', 'N/A')
            order_id = payment.get('order_id', 'N/A')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await analytics_db_get_user_info_by_id_async(user_id)
            if user_info:
                username_display = f"@{user_info['username']}" if user_info['username'] else "–ë–µ–∑ username"
                name_display = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            else:
                username_display = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                name_display = "N/A"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if created_at and created_at != 'N/A':
                try:
                    from datetime import datetime
                    if isinstance(created_at, str):
                        created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–ª–∞—Ç–µ–∂–∞
                    now = datetime.now()
                    if isinstance(created_at, str):
                        created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    age_hours = int((now - created_at).total_seconds() / 3600)
                except:
                    formatted_date = str(created_at)
                    age_hours = "N/A"
            else:
                formatted_date = "N/A"
                age_hours = "N/A"
            
            message += f"**{i}. –ü–ª–∞—Ç–µ–∂ #{order_id}**\n"
            message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {name_display}\n"
            message += f"üÜî **ID:** {user_id}\n"
            message += f"üìù **Username:** {username_display}\n"
            message += f"üí∞ **–°—É–º–º–∞:** {amount} {currency}\n"
            message += f"ü™ô **–ö—Ä–µ–¥–∏—Ç—ã:** {credit_amount}\n"
            message += f"üìÖ **–°–æ–∑–¥–∞–Ω:** {formatted_date}\n"
            message += f"‚è∞ **–í–æ–∑—Ä–∞—Å—Ç:** {age_hours} —á–∞—Å–æ–≤\n"
            message += f"üîó **Betatransfer ID:** {betatransfer_id}\n\n"
        
        message += "**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/cleanup_confirm` –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏**"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(message) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            await update.message.reply_text(message[:4000])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            remaining = message[4000:]
            while remaining:
                chunk = remaining[:4000]
                await update.message.reply_text(chunk)
                remaining = remaining[4000:]
        else:
            await update.message.reply_text(message)
            
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        logging.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ä—ã–µ pending –ø–ª–∞—Ç–µ–∂–∏ ({len(old_payments)} —à—Ç.)")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π:**\n\n{str(e)}")


async def cleanup_confirm_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    ADMIN_USER_ID = 7735323051  # –í–∞—à ID
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        print("üßπ [CLEANUP] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
        logging.info("üßπ [CLEANUP] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ pending –ø–ª–∞—Ç–µ–∂–∏
        old_payments = await analytics_db_get_old_pending_payments_async(24)
        
        if not old_payments:
            await update.message.reply_text("‚úÖ **–°—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!**\n\n–í—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ —Å–æ–∑–¥–∞–Ω—ã –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥.")
            return
        
        print(f"üßπ [CLEANUP] –ù–∞–π–¥–µ–Ω–æ {len(old_payments)} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        logging.info(f"üßπ [CLEANUP] –ù–∞–π–¥–µ–Ω–æ {len(old_payments)} —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        cleaned_count = 0
        
        for payment in old_payments:
            payment_id = payment.get('betatransfer_id')
            user_id = payment.get('user_id')
            amount = payment.get('amount', 0)
            currency = payment.get('currency', 'UAH')
            order_id = payment.get('order_id', 'N/A')
            
            try:
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ timeout
                await analytics_db_update_payment_status_async(payment_id, 'timeout')
                
                print(f"‚è∞ [CLEANUP] –ü–ª–∞—Ç–µ–∂ {payment_id} (Order: {order_id}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ timeout")
                logging.info(f"‚è∞ [CLEANUP] –ü–ª–∞—Ç–µ–∂ {payment_id} (Order: {order_id}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ timeout")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                timeout_message = (
                    f"‚è∞ **–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ**\n\n"
                    f"üí∞ **–°—É–º–º–∞:** {amount} {currency}\n"
                    f"üì¶ **–ü–ª–∞—Ç–µ–∂:** {order_id}\n\n"
                    f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
                )
                
                await send_telegram_notification(user_id, timeout_message)
                print(f"üì± [CLEANUP] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                logging.info(f"üì± [CLEANUP] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                cleaned_count += 1
                
            except Exception as e:
                print(f"üí• [CLEANUP] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                logging.error(f"üí• [CLEANUP] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                continue
        
        print(f"‚úÖ [CLEANUP] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cleaned_count} –ø–ª–∞—Ç–µ–∂–µ–π")
        logging.info(f"‚úÖ [CLEANUP] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cleaned_count} –ø–ª–∞—Ç–µ–∂–µ–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await update.message.reply_text(
            f"‚úÖ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üßπ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π:** {cleaned_count}\n"
            f"‚è∞ **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:** timeout\n"
            f"üì± **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/pending_payments` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        )
        
    except Exception as e:
        print(f"üí• [CLEANUP] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        logging.error(f"üí• [CLEANUP] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:**\n\n{str(e)}")


if __name__ == '__main__':
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üîß –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –º–∏–≥—Ä–∞—Ü–∏—é
        from database import analytics_db
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    main()